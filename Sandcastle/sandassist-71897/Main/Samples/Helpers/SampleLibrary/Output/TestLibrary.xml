<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TestLibrary</name>
    </assembly>
    <members>
        <member name="T:TestLibrary.Point3D">
            <summary>
            This is a 3-dimensional point class.
            </summary>
        </member>
        <member name="T:TestLibrary.Point">
             <summary>
             This is a point class of somthing I knoww.
             </summary>
             <remarks>
             <code language="c#">
            using System;
            using System.Text;
            using System.Collections.Generic;
            using TestLibrary;
             
            namespace TestSample
            {
                class Program
                {
                    static void Main(string[] args)
                    {
                        Point pt = new Point(10, 20);
                        Console.WriteLine(String.Format("[{0}, {1}]", pt.X, pt.Y));
                    }
                }
            }
             </code>
             </remarks>
        </member>
        <member name="M:TestLibrary.Point.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:TestLibrary.Point"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:TestLibrary.Point"/> class with
            the default parameters.
            </summary>
        </member>
        <member name="M:TestLibrary.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibrary.Point"/> class with
            the specified x- and y- coordinates.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:TestLibrary.Point.Translate(System.Int32)">
            <overloads>
            Moves or offsets the current position by a specified amount.
            </overloads>
            <summary>
            Moves or offsets the current position by the specified amount in both
            x- and y-axis.
            </summary>
            <param name="value">The amount for both x- and y-axis.</param>
        </member>
        <member name="M:TestLibrary.Point.Translate(System.Int32,System.Int32)">
            <summary>
            Moves or offsets the current position by the specified x- and y-values.
            </summary>
            <param name="x">The x-offset.</param>
            <param name="y">The y-offset</param>
        </member>
        <member name="P:TestLibrary.Point.X">
            <summary>
            Gets or sets the x coordinate.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> specifying the x coordinate.
            </value>
        </member>
        <member name="P:TestLibrary.Point.Y">
            <summary>
            Gets or sets the y coordinate.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> specifying the y coordinate.
            </value>
        </member>
        <member name="M:TestLibrary.Point3D.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:TestLibrary.Point3D"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:TestLibrary.Point3D"/> class with
            the default parameters.
            </summary>
        </member>
        <member name="M:TestLibrary.Point3D.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibrary.Point3D"/> class with
            the specified x-, y- and z- coordinates.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
        </member>
        <member name="P:TestLibrary.Point3D.X">
            <inheritdoc/>
        </member>
        <member name="P:TestLibrary.Point3D.Y">
            <summary>
            <inheritdoc/>
            </summary>
            <value>
            <inheritdoc/>
            </value>
        </member>
        <member name="P:TestLibrary.Point3D.Z">
            <summary>
            Gets or sets the z coordinate.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> specifying the z coordinate.
            </value>
        </member>
        <member name="T:TestLibrary.PointCollection`1">
            <summary>
            A collection of the <see cref="T:TestLibrary.Point"/> objects.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:TestLibrary.PointCollection`1.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:TestLibrary.PointCollection`1"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:TestLibrary.PointCollection`1"/> class.
            </summary>
        </member>
        <member name="M:TestLibrary.PointCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibrary.PointCollection`1"/> class as
            a wrapper of the specified list.
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:TestLibrary.CodeSnippets">
             <summary>
             This is just for testing code snippets.
             </summary>
             <remarks>
             <para>...</para>
             </remarks>
             <example>
             <para>
                 <strong>Case 1: The single-part code snippet</strong>
             </para>
            <para>
                <strong>Example 1:</strong> An example of two language code samples..
            </para>
            <codeReference>exampleId3#snippetId3</codeReference>
            <para>
                <strong>Example 2:</strong> An example of three language code samples...
            </para>
            <codeReference>exampleId1#snippetId1</codeReference>
             <para>
                 <strong>Case 2: The multi-part code snippet</strong>
             </para>
            <para>
                <strong>Example 1</strong>: An example of two language code samples..
            </para>
            <codeReference>exampleId2#snippetId1,snippetId2</codeReference>
            <para>
                <strong>Example 2</strong>: An example of three language code samples...
            </para>
            <codeReference>exampleId4#snippetId1,snippetId2,snippetId3</codeReference>
             </example>
        </member>
        <member name="T:TestLibrary.Equation">
            <summary>
            Demonstrating support for math equations, such as the solution of the 
            quadratic equation, <math address="MathTeXInline.-1">
            x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}</math>.
            </summary>
            <remarks>
            <para>
                The following are examples of equations in the conceptual help:
            </para>
            <para>  
                We will start with a simple example and add more complex equations.
                <math address="MathTeX.1">
                    x^2 + y^2 = z^2
                </math>
                And we all know the solutions to a quadratic equation       
                <math address="MathTeXInline.-2">ax^2 + bx + c = 0</math>
                is
                <math address="MathTeX.2">
                    x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}
                </math>
                 Now, it is time to get complex, here we go...
                <math address="MathTeX.3">
                    e^x=\sum_{n=0}^\infty\frac{x^n}{n!}
                </math>
            </para>
            <para>            
                <math address="MathTeX.4">
                    f(x)={\Large\frac{1}{\sigma\sqrt{2\pi}}} \int_{\small-\infty}^xe^{-\small\frac{(t-\mu)^2}{2\sigma^2}}dt
                </math>
            </para>
            <para>
                <math address="MathTeX.5">
                <title>The title of this math equation</title>
                    f^\prime(x)\ = \lim_{\Delta x\to0}\frac{f(x+\Delta x)-f(x)}{\Delta x}
                </math>
            </para>
            <para>
                <math address="MathTeX.-1">
                    <![CDATA[
                    A\ =\ \left(\begin{array}{cccc} a_{11}&a_{12}&\cdots&a_{1n}\\         
                    a_{21}&a_{22}&\cdots&a_{2n}\\         
                    \vdots&\vdots&\ddots&\vdots\\         
                    a_{n1}&a_{n2}&\cdots&a_{nn}
                    \end{array}\right)                    
                     ]]>
                </math>
            </para>
            <para>
                <math address="MathTeX.-2">
                <title>The title of this math equation</title>
                    <![CDATA[
                    A\ =\ \left(\begin{array}{cccc} a_{11}&a_{12}&\cdots&a_{1n}\\         
                    a_{21}&a_{22}&\cdots&a_{2n}\\         
                    \vdots&\vdots&\ddots&\vdots\\         
                    a_{n1}&a_{n2}&\cdots&a_{nn}
                    \end{array}\right)                    
                     ]]>
                </math>
            </para>
            </remarks>
        </member>
        <member name="T:TestLibrary.DClass">
            <summary>
            This is the summary for the <c>DClass</c> class.
            </summary>
            <remarks>
            The test remarks. Testing overload link: <see cref="O:TestLibrary.DClass.BMethod"/>
            </remarks>
            <seealso cref="!:Overload:TestLibrary.DClass.BMethod"/>
            <seealso cref="!:Overload:TestLibrary.DClass.Add"/>
        </member>
        <member name="M:TestLibrary.DClass.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:TestLibrary.DClass.BMethod">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestLibrary.DClass.BMethod(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:TestLibrary.DClass.DInnerClass">
            <!-- Failed to insert some or all of included XML --><include file="XML_include_tag.doc" path="MyDocs/MyMembers[@name=&quot;test&quot;]/*"/>
        </member>
        <member name="M:TestLibrary.DClass.DInnerClass.InnerAMethod">
            <summary>
            
            </summary>
            <exception cref="!:"></exception>
        </member>
        <member name="P:TestLibrary.DClass.DInnerClass.InnerAProperty">
            <!-- Failed to insert some or all of included XML --><include file="XML_include_tag.doc" path="MyDocs/MyMembers[@name=&quot;test1&quot;]/*"/>
            <!-- Failed to insert some or all of included XML --><include file="XML_include_tag.doc" path="MyDocs/MyMembers[@name=&quot;test2&quot;]/*"/>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:TestLibrary.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TestLibrary.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TestLibrary.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:TestLibrary.CClass`1">
            <summary>
            Summary of the class C.
            </summary>
            <typeparam name="T">A type for this class.</typeparam>
        </member>
        <member name="M:TestLibrary.CClass`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibrary.CClass`1"/> class.
            </summary>
        </member>
        <member name="M:TestLibrary.CClass`1.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:TestLibrary.CClass`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:TestLibrary.CClass`1.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:TestLibrary.AEnum.A">
            <summary>
            Enumeration member A.
            </summary>
        </member>
        <member name="F:TestLibrary.AEnum.C">
            <summary>
            Enumeration member C.
            </summary>
        </member>
        <member name="T:ANamespace.BClass">
            <summary>
            This is the summary of BClass.
            </summary>
        </member>
        <member name="M:ANamespace.BClass.#ctor">
            <summary>
            This is the constructor of the BClass.
            </summary>
        </member>
        <member name="M:ANamespace.BClass.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ANamespace.BClass.Text">
            <summary>
            Gets or sets the text contents.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the text contents of this class.
            </value>
        </member>
        <member name="P:ANamespace.BClass.Description">
            <summary>
            Gets or sets the text contents.
            </summary>
            <value>
            A <see cref="T:System.String"/> containing the text contents of this class.
            </value>
        </member>
        <member name="T:TestLibrary.Rectangle">
            <summary>
            This is the rectangle class.
            </summary>
        </member>
        <member name="M:TestLibrary.Rectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibrary.Rectangle"/> class.
            </summary>
        </member>
        <member name="T:ANamespace.NamespaceDoc">
            <summary>
            This is the comment for <see cref="N:ANamespace"/> from <c>NamespaceDoc</c>.
            </summary>
            <remarks>
            This is the remarks for the <see cref="N:ANamespace"/> from <c>NamespaceDoc</c>.
            </remarks>
        </member>
        <member name="T:ANamespace.IAClass">
            <summary>
            The IAClass interface summary.
            </summary>
        </member>
        <member name="M:ANamespace.IAClass.ToString">
            <summary>
            Convert to text.
            </summary>
            <returns>The text representation.</returns>
        </member>
        <member name="T:ANamespace.AClass">
            <summary>
            <isnew/> This is a sample class summary, AClass.
            </summary>
            <remarks>
            <para>
            An implementation of the <see cref="T:ANamespace.BClass"/> class.
            </para>
            <para>
            Here we have decided to embed an image 
            <mediaLinkInline>
            <image href="2aca5da4-6f94-43a0-9817-5f413d16f803"/>
            </mediaLinkInline>
            to make the experience cool. Another way is to embed the image like
            this <mediaLinkInline href="2aca5da4-6f94-43a0-9817-5f413d16f805"/>.
            </para>
            <para>
            The following are the illustrations of the displayed media:
            </para>
            <para>Image with the default caption:</para>
            <mediaLink>
               <caption>A caption of the image.</caption>
               <image href="2aca5da4-6f94-43a0-9817-5f413d16f801"/>
            </mediaLink>
            <para>Image with a lead caption, will be displayed at the top.</para>
            <mediaLink>
               <caption lead="Figure 1">A caption of the image.</caption>
               <image href="2aca5da4-6f94-43a0-9817-5f413d16f801"/>
            </mediaLink>
            <para>
            Image with a lead caption placed at the bottom.
            </para>
            <mediaLink>
               <caption placement="after" lead="Figure 1">A caption of the image.</caption>
               <image href="2aca5da4-6f94-43a0-9817-5f413d16f801"/>
            </mediaLink>
            <para>With the image centered, and the caption at the bottom.</para>
            <mediaLink placement="center">
               <caption location="bottom" lead="Figure 1">A caption of the image.</caption>
               <image href="2aca5da4-6f94-43a0-9817-5f413d16f801"/>
            </mediaLink>
            <para>
            You can use the shorter syntax for an image without a caption.
            </para>
            <mediaLink placement="right" href="2aca5da4-6f94-43a0-9817-5f413d16f801"/>
            <para>
            Finally, we use image with image up.
            </para>
            <mediaLink placement="center" href="2aca5da4-6f94-43a0-9817-5f413d16f813"/>
            </remarks>
        </member>
        <member name="F:ANamespace.AClass._aText">
            <summary>
            A test class member.
            </summary>
        </member>
        <member name="F:ANamespace.AClass._aName">
            <summary>
            Another test class member.
            </summary>
        </member>
        <member name="M:ANamespace.AClass.#ctor">
            <overloads>
            This is for all sample class constructors.
            </overloads>
            <summary>
            This is a sample class parameterless constructor.
            </summary>
        </member>
        <member name="M:ANamespace.AClass.#ctor(System.String)">
            <summary>
            This is a sample class constructor.
            </summary>
            <param name="text">A text content.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="text"/> is <see langword="null"/>. </exception>
        </member>
        <member name="M:ANamespace.AClass.ToString">
            <overloads>
            Returns the text representation of this object.
            </overloads>
            <summary>
            Returns the text representation of this object, updated.
            </summary>
            <returns>
            <inheritdoc cref="M:System.Object.ToString"/>
            </returns>
            <remarks>
            This is just testing, AClass:ToString().
            </remarks>
            <example>
            <code>
            a = b + c
            </code>
            </example>
        </member>
        <member name="M:ANamespace.AClass.ToString(System.String)">
            <summary><isnew/> A AClass to-string.</summary>
            <param name="testing">A test parameter.</param>
            <inheritdoc cref="M:ANamespace.AClass.ToString" select="returns|remarks|example"/>
        </member>
        <member name="M:ANamespace.AClass.NewQuantity">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ANamespace.AClass.NewQuantity(System.Double)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ANamespace.AClass.NewQuantity(System.String)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="P:ANamespace.AClass.Text">
            <summary>
            Gets or sets the text contents, updated.
            </summary>
            <value>
            <inheritdoc/>
            <para>
            Note that, this is the contents from the <see cref="T:ANamespace.AClass"/>.
            </para>
            </value>
        </member>
        <member name="P:ANamespace.AClass.Description">
            <summary>
            Gets or sets the text contents, updated.
            </summary>
            <value>
            <inheritdoc/>
            <para>
            Note that, this is the contents from the <see cref="T:ANamespace.AClass"/>.
            </para>
            </value>
        </member>
        <member name="P:ANamespace.AClass.Name">
            <summary>
            Gets or sets the name of this object.
            </summary>
            <value>
            A string value for the name.
            </value>
        </member>
        <member name="T:TestLibrary.GenericMethods`1">
            <summary>
            For testing generic methods
            </summary>
            <typeparam name="T">A test type parameter.</typeparam>
        </member>
        <member name="M:TestLibrary.GenericMethods`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibrary.GenericMethods`1"/> class.
            </summary>
        </member>
        <member name="M:TestLibrary.GenericMethods`1.Method1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Testing generic expression.
            </summary>
            <param name="test">
            A test parameter.
            </param>
        </member>
        <member name="M:TestLibrary.GenericMethods`1.Test(System.Func{System.Double})">
            <summary>
            Text that is lost in Sandcastle.
            </summary>
            <param name="param">Text that is lost in Sandcastle</param>
        </member>
        <member name="M:TestLibrary.GenericMethods`1.MemberOf(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Creates a <c>Member</c> using a property, field o non-void expression call.
            </summary>
            <param name="member">
            The member expression to use as a member.
            </param>
            <returns>A <c>Member</c> for the specified member expression.</returns>
        </member>
        <member name="T:TestLibrary.GenericMethods`1.IConnectibleProperty`1">
            <summary>
            A property that may be connected to a carrier object at runtime. 
            The property is either connected or disconnected. A disconnected 
            property is different than a connected property value of 
            <c>null</c>. All members are thread safe.
            </summary>
            <typeparam name="TValue">The property type.</typeparam>
        </member>
        <member name="M:TestLibrary.GenericMethods`1.IConnectibleProperty`1.GetOrCreate(System.Func{`1})">
            <summary>
            Gets the value of the property, if it is connected; otherwise, sets the value of the property and returns the new value.
            </summary>
            <param name="createCallback">
            The delegate invoked to create the value of the property, 
            if it is disconnected. May not be <c>null</c>. If there is 
            a multi-threaded race condition, each thread's delegate may 
            be invoked, but all values except one will be discarded.
            </param>
            <returns>The value of the property.</returns>
        </member>
        <member name="T:TestLibrary.AFormatType">
            <summary>
            
            </summary>
            <remarks>
            This is an extensible enumeration type structure with the following members and
            values:
            <list type="table">
            <listheader>
            <term>Enumeration</term>
            <term>Value</term>
            <term>Description</term>
            </listheader>
            <item>
            <description><see cref="F:TestLibrary.AFormatType.Null"/></description>
            <description>-1</description>
            <description>Null</description>
            </item>
            <item>
            <description><see cref="F:TestLibrary.AFormatType.None"/></description>
            <description>0</description>
            <description>None</description>
            </item>
            <item>
            <description><see cref="F:TestLibrary.AFormatType.ItemA"/></description>
            <description>1</description>
            <description>A</description>
            </item>
            <item>
            <description><see cref="F:TestLibrary.AFormatType.ItemB"/></description>
            <description>2</description>
            <description>B</description>
            </item>
            <item>
            <description><see cref="F:TestLibrary.AFormatType.ItemC"/></description>
            <description>3</description>
            <description>C</description>
            </item>
            <item>
            <description><see cref="F:TestLibrary.AFormatType.ItemD"/></description>
            <description>4</description>
            <description>D</description>
            </item>
            <item>
            <description><see cref="F:TestLibrary.AFormatType.Custom"/></description>
            <description>10</description>
            <description>Custom</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:TestLibrary.AFormatType.CustomPrefix">
            <summary>
            Defines the constant prefix to all custom items.
            </summary>
        </member>
        <member name="F:TestLibrary.AFormatType.Null">
            <summary>
            <para></para>
            <para>The enumeration value is <c>-1</c>.</para>
            </summary>
        </member>
        <member name="F:TestLibrary.AFormatType.None">
            <summary>
            <para></para>
            <para>The enumeration value is <c>0</c>.</para>
            </summary>
        </member>
        <member name="F:TestLibrary.AFormatType.ItemA">
            <summary>
            <para></para>
            <para>The enumeration value is <c>1</c>.</para>
            </summary>
        </member>
        <member name="F:TestLibrary.AFormatType.ItemB">
            <summary>
            <para></para>
            <para>The enumeration value is <c>2</c>.</para>
            </summary>
        </member>
        <member name="F:TestLibrary.AFormatType.ItemC">
            <summary>
            <para></para>
            <para>The enumeration value is <c>3</c>.</para>
            </summary>
        </member>
        <member name="F:TestLibrary.AFormatType.ItemD">
            <summary>
            <para></para>
            <para>The enumeration value is <c>4</c>.</para>
            </summary>
        </member>
        <member name="F:TestLibrary.AFormatType.Custom">
            <summary>
            <para></para>
            <para>The enumeration value is <c>10</c>.</para>
            <para>All the custom types must have values above this value.</para>
            </summary>
        </member>
        <member name="F:TestLibrary.AFormatType._typeValue">
            <summary>
            The enumeration value of this structure.
            </summary>
        </member>
        <member name="M:TestLibrary.AFormatType.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TestLibrary.AFormatType"/> structure
            with the specified integer value.
            </summary>
            <param name="value">
            The numerical value of this enumeration structure.
            </param>
        </member>
        <member name="M:TestLibrary.AFormatType.op_Explicit(TestLibrary.AFormatType)~System.Int32">
            <summary>
            Converts the specified <see cref="T:TestLibrary.AFormatType"/> structure to an 
            integer, which is its value.
            </summary>
            <param name="type">A <see cref="T:TestLibrary.AFormatType"/> to be converted.</param>
            <returns>The integer value of the specified <see cref="T:TestLibrary.AFormatType"/>.</returns>
        </member>
        <member name="M:TestLibrary.AFormatType.op_Explicit(System.Int32)~TestLibrary.AFormatType">
            <summary>
            Converts the specified integer to the equivalent 
            <see cref="T:TestLibrary.AFormatType"/> structure.
            </summary>
            <param name="value">An integer to be converted.</param>
            <returns>
            The <see cref="T:TestLibrary.AFormatType"/> whose value is specified in the integer
            parameter.
            </returns>
        </member>
        <member name="M:TestLibrary.AFormatType.op_Equality(TestLibrary.AFormatType,TestLibrary.AFormatType)">
            <summary>
            Performs a logical comparison of the two <see cref="T:TestLibrary.AFormatType"/> 
            parameters to determine whether they are equal.
            </summary>
            <param name="type1">An instance of <see cref="T:TestLibrary.AFormatType"/>.</param>
            <param name="type2">An instance of <see cref="T:TestLibrary.AFormatType"/>.</param>
            <returns>
            This returns <see langword="true"/> if the specified parameters,
            <paramref name="type1"/> and <paramref name="type2"/> represent the 
            same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TestLibrary.AFormatType.op_Inequality(TestLibrary.AFormatType,TestLibrary.AFormatType)">
            <summary>
            Performs a logical comparison of the two <see cref="T:TestLibrary.AFormatType"/> 
            parameters to determine whether they are not equal. 
            </summary>
            <param name="type1">An instance of <see cref="T:TestLibrary.AFormatType"/>.</param>
            <param name="type2">An instance of <see cref="T:TestLibrary.AFormatType"/>.</param>
            <returns>
            This returns <see langword="true"/> if the specified parameters,
            <paramref name="type1"/> and <paramref name="type2"/> do not represent 
            the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TestLibrary.AFormatType.op_GreaterThan(TestLibrary.AFormatType,TestLibrary.AFormatType)">
            <summary>
            Compares the two <see cref="T:TestLibrary.AFormatType"/> parameters to determine 
            whether the first is greater than the second.
            </summary>
            <param name="type1">An instance of <see cref="T:TestLibrary.AFormatType"/>.</param>
            <param name="type2">An instance of <see cref="T:TestLibrary.AFormatType"/>.</param>
            <returns>
            This returns <see langword="true"/> if the first instance is greater 
            than the second instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TestLibrary.AFormatType.op_GreaterThanOrEqual(TestLibrary.AFormatType,TestLibrary.AFormatType)">
            <summary>
            Compares the two <see cref="T:TestLibrary.AFormatType"/> parameters to determine 
            whether the first is greater than or equal to the second.
            </summary>
            <param name="type1">An instance of <see cref="T:TestLibrary.AFormatType"/>.</param>
            <param name="type2">An instance of <see cref="T:TestLibrary.AFormatType"/>.</param>
            <returns>
            This returns <see langword="true"/> if the first instance is greater 
            than or equal to the second instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TestLibrary.AFormatType.op_LessThan(TestLibrary.AFormatType,TestLibrary.AFormatType)">
            <summary>
            Compares the two <see cref="T:TestLibrary.AFormatType"/> parameters to determine 
            whether the first is less than the second.
            </summary>
            <param name="type1">An instance of <see cref="T:TestLibrary.AFormatType"/>.</param>
            <param name="type2">An instance of <see cref="T:TestLibrary.AFormatType"/>.</param>
            <returns>
            This returns <see langword="true"/> if the first instance is less 
            than the second instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TestLibrary.AFormatType.op_LessThanOrEqual(TestLibrary.AFormatType,TestLibrary.AFormatType)">
            <summary>
            Compares the two <see cref="T:TestLibrary.AFormatType"/> parameters to determine 
            whether the first is less than or equal to the second.
            </summary>
            <param name="type1">An instance of <see cref="T:TestLibrary.AFormatType"/>.</param>
            <param name="type2">An instance of <see cref="T:TestLibrary.AFormatType"/>.</param>
            <returns>
            This returns <see langword="true"/> if the first instance is less 
            than or equal to the second instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TestLibrary.AFormatType.Parse(System.String)">
            <summary>
            Converts the string representation of the enumeration to 
            its <see cref="T:TestLibrary.AFormatType"/> equivalent.
            </summary>
            <param name="text">A string containing a enumeration to convert.</param>
            <returns>
            <para>
            A <see cref="T:TestLibrary.AFormatType"/> equivalent to the enumeration contained 
            in the specified parameter, <paramref name="text"/>.
            </para>
            <para>
            This will return <see cref="F:TestLibrary.AFormatType.Null"/> if the string is empty
            or <see langword="null"/>.
            </para>
            </returns>
            <exception cref="T:System.FormatException">
            If the parameter, <paramref name="text"/>, does not contain a valid 
            string representation of a <see cref="T:TestLibrary.AFormatType"/> structure.
            </exception>
        </member>
        <member name="M:TestLibrary.AFormatType.TryParse(System.String,TestLibrary.AFormatType@)">
            <summary>
            Converts the specified string representation of an enumeration 
            to its <see cref="T:TestLibrary.AFormatType"/> equivalent and returns a value 
            that indicates whether the conversion succeeded.
            </summary>
            <param name="text">A string containing a enumeration to convert.</param>
            <param name="value">
            When this method returns, contains the <see cref="T:TestLibrary.AFormatType"/> value 
            equivalent to the enumeration contained in <paramref name="text"/>, 
            if the conversion succeeded, or <see cref="F:TestLibrary.AFormatType.Null"/> 
            if the conversion failed. 
            </param>
            <returns>
            This returns <see langword="true"/> if the specified parameter, 
            <paramref name="text"/>, is converted successfully; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TestLibrary.AFormatType.ToString">
            <summary>
            Converts this <see cref="T:TestLibrary.AFormatType"/> structure to its string
            representation, which is the enumeration name of this structure.
            </summary>
            <returns>
            <para>
            A string object equal to the value of this <see cref="T:TestLibrary.AFormatType"/>.
            </para>
            <para>
            The <see cref="F:TestLibrary.AFormatType.Null"/> instance will return <c>(Null)</c>.
            </para>
            <para>
            The <see cref="F:TestLibrary.AFormatType.Custom"/> instances will return a string
            starting with <c>CustomFormat</c>.
            </para>
            </returns>
        </member>
        <member name="M:TestLibrary.AFormatType.Equals(TestLibrary.AFormatType)">
            <overloads>
            Performs a logical comparison of two structures to determine whether 
            they are equal.
            </overloads>
            <summary>
            Performs a logical comparison of this and the specified 
            <see cref="T:TestLibrary.AFormatType"/> parameter to determine whether 
            they are equal. 
            </summary>
            <param name="other">The <see cref="T:TestLibrary.AFormatType"/> to be compared.</param>
            <returns>
            This returns <see langword="true"/> if this and the specified 
            <see cref="T:TestLibrary.AFormatType"/> are equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TestLibrary.AFormatType.Equals(System.Object)">
            <summary>
            Compares the specified object parameter to the <see cref="P:TestLibrary.AFormatType.Value"/> 
            property of the <see cref="T:TestLibrary.AFormatType"/> object.
            </summary>
            <param name="obj">The object to be compared.</param>
            <returns>
            This returns <see langword="true"/> if object is an instance of 
            <see cref="T:TestLibrary.AFormatType"/> and the two are equal; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TestLibrary.AFormatType.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:TestLibrary.AFormatType.CompareTo(TestLibrary.AFormatType)">
            <summary>
            Compares the current <see cref="T:TestLibrary.AFormatType"/> with the specified
            <see cref="T:TestLibrary.AFormatType"/> structure.
            </summary>
            <param name="other">
            The <see cref="T:TestLibrary.AFormatType"/> structure to compare with this structure.
            </param>
            <returns>
            <para>
            </para>
            A 32-bit signed integer that indicates the relative order of the 
            objects being compared. 
            <para>
            The return value has the following meanings:
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <description>Less than zero</description>
            <description>This object is less than the <paramref name="other"/> parameter.</description>
            </item>
            <item>
            <description>Zero</description>
            <description>This object is equal to <paramref name="other"/> parameter.</description>
            </item>
            <item>
            <description>Greater than zero</description>
            <description>This object is greater than <paramref name="other"/> parameter.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="P:TestLibrary.AFormatType.IsNull">
            <summary>
            Gets a value indicating whether the <see cref="P:TestLibrary.AFormatType.Value"/> 
            is <see langword="null"/>.
            </summary>
            <value>
            This property is <see langword="true"/> if <see cref="P:TestLibrary.AFormatType.Value"/> 
            is <see langword="null"/>; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:TestLibrary.AFormatType.Value">
            <summary>
            Gets the value of this <see cref="T:TestLibrary.AFormatType"/> structure.
            </summary>
            <value>
            An integer representing the value of this <see cref="T:TestLibrary.AFormatType"/> structure. 
            </value>
        </member>
        <member name="P:TestLibrary.AFormatType.IsCustom">
            <summary>
            Gets a value indicating whether this structure represents a 
            user-defined or custom type.
            </summary>
            <value>
            This property is <see langword="true"/> if this structure is a
            user-defined type; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            The user-defined or custom types have <see cref="P:TestLibrary.AFormatType.Value"/>
            greater than or equal to <c>10</c>.
            </remarks>
        </member>
    </members>
</doc>
