//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.1 Language\\Interface.g3 2013-06-14 09:39:34

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace Antlr3.ST.Language
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.1")]
[System.CLSCompliant(false)]
public partial class InterfaceLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int COLON=4;
	public const int COMMA=5;
	public const int ID=6;
	public const int INTERFACE=7;
	public const int LPAREN=8;
	public const int ML_COMMENT=9;
	public const int OPTIONAL=10;
	public const int RPAREN=11;
	public const int SEMI=12;
	public const int SL_COMMENT=13;
	public const int WS=14;

	// delegates
	// delegators

	public InterfaceLexer()
	{
		OnCreated();
	}

	public InterfaceLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public InterfaceLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "Language\\Interface.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_INTERFACE();
	partial void LeaveRule_INTERFACE();

	// $ANTLR start "INTERFACE"
	[GrammarRule("INTERFACE")]
	private void mINTERFACE()
	{
		EnterRule_INTERFACE();
		EnterRule("INTERFACE", 1);
		TraceIn("INTERFACE", 1);
		try
		{
			int _type = INTERFACE;
			int _channel = DefaultTokenChannel;
			// Language\\Interface.g3:9:11: ( 'interface' )
			DebugEnterAlt(1);
			// Language\\Interface.g3:9:13: 'interface'
			{
			DebugLocation(9, 13);
			Match("interface"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTERFACE", 1);
			LeaveRule("INTERFACE", 1);
			LeaveRule_INTERFACE();
		}
	}
	// $ANTLR end "INTERFACE"

	partial void EnterRule_OPTIONAL();
	partial void LeaveRule_OPTIONAL();

	// $ANTLR start "OPTIONAL"
	[GrammarRule("OPTIONAL")]
	private void mOPTIONAL()
	{
		EnterRule_OPTIONAL();
		EnterRule("OPTIONAL", 2);
		TraceIn("OPTIONAL", 2);
		try
		{
			int _type = OPTIONAL;
			int _channel = DefaultTokenChannel;
			// Language\\Interface.g3:10:10: ( 'optional' )
			DebugEnterAlt(1);
			// Language\\Interface.g3:10:12: 'optional'
			{
			DebugLocation(10, 12);
			Match("optional"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPTIONAL", 2);
			LeaveRule("OPTIONAL", 2);
			LeaveRule_OPTIONAL();
		}
	}
	// $ANTLR end "OPTIONAL"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 3);
		TraceIn("ID", 3);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// Language\\Interface.g3:86:4: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' )* )
			DebugEnterAlt(1);
			// Language\\Interface.g3:86:6: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' )*
			{
			DebugLocation(86, 6);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(86, 30);
			// Language\\Interface.g3:86:30: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1=='-'||(LA1_1>='0' && LA1_1<='9')||(LA1_1>='A' && LA1_1<='Z')||LA1_1=='_'||(LA1_1>='a' && LA1_1<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// Language\\Interface.g3:
					{
					DebugLocation(86, 30);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 3);
			LeaveRule("ID", 3);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_LPAREN();
	partial void LeaveRule_LPAREN();

	// $ANTLR start "LPAREN"
	[GrammarRule("LPAREN")]
	private void mLPAREN()
	{
		EnterRule_LPAREN();
		EnterRule("LPAREN", 4);
		TraceIn("LPAREN", 4);
		try
		{
			int _type = LPAREN;
			int _channel = DefaultTokenChannel;
			// Language\\Interface.g3:89:8: ( '(' )
			DebugEnterAlt(1);
			// Language\\Interface.g3:89:10: '('
			{
			DebugLocation(89, 10);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAREN", 4);
			LeaveRule("LPAREN", 4);
			LeaveRule_LPAREN();
		}
	}
	// $ANTLR end "LPAREN"

	partial void EnterRule_RPAREN();
	partial void LeaveRule_RPAREN();

	// $ANTLR start "RPAREN"
	[GrammarRule("RPAREN")]
	private void mRPAREN()
	{
		EnterRule_RPAREN();
		EnterRule("RPAREN", 5);
		TraceIn("RPAREN", 5);
		try
		{
			int _type = RPAREN;
			int _channel = DefaultTokenChannel;
			// Language\\Interface.g3:90:8: ( ')' )
			DebugEnterAlt(1);
			// Language\\Interface.g3:90:10: ')'
			{
			DebugLocation(90, 10);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAREN", 5);
			LeaveRule("RPAREN", 5);
			LeaveRule_RPAREN();
		}
	}
	// $ANTLR end "RPAREN"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 6);
		TraceIn("COMMA", 6);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// Language\\Interface.g3:91:7: ( ',' )
			DebugEnterAlt(1);
			// Language\\Interface.g3:91:9: ','
			{
			DebugLocation(91, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 6);
			LeaveRule("COMMA", 6);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 7);
		TraceIn("SEMI", 7);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// Language\\Interface.g3:92:6: ( ';' )
			DebugEnterAlt(1);
			// Language\\Interface.g3:92:8: ';'
			{
			DebugLocation(92, 8);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 7);
			LeaveRule("SEMI", 7);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 8);
		TraceIn("COLON", 8);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// Language\\Interface.g3:93:7: ( ':' )
			DebugEnterAlt(1);
			// Language\\Interface.g3:93:9: ':'
			{
			DebugLocation(93, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 8);
			LeaveRule("COLON", 8);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_SL_COMMENT();
	partial void LeaveRule_SL_COMMENT();

	// $ANTLR start "SL_COMMENT"
	[GrammarRule("SL_COMMENT")]
	private void mSL_COMMENT()
	{
		EnterRule_SL_COMMENT();
		EnterRule("SL_COMMENT", 9);
		TraceIn("SL_COMMENT", 9);
		try
		{
			int _type = SL_COMMENT;
			int _channel = DefaultTokenChannel;
			// Language\\Interface.g3:97:2: ( '//' (~ ( '\\n' | '\\r' ) )* ( ( '\\r' )? '\\n' )? )
			DebugEnterAlt(1);
			// Language\\Interface.g3:97:4: '//' (~ ( '\\n' | '\\r' ) )* ( ( '\\r' )? '\\n' )?
			{
			DebugLocation(97, 4);
			Match("//"); 

			DebugLocation(98, 3);
			// Language\\Interface.g3:98:3: (~ ( '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='\u0000' && LA2_1<='\t')||(LA2_1>='\u000B' && LA2_1<='\f')||(LA2_1>='\u000E' && LA2_1<='\uFFFF')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Language\\Interface.g3:
					{
					DebugLocation(98, 3);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(98, 19);
			// Language\\Interface.g3:98:19: ( ( '\\r' )? '\\n' )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1=='\n'||LA4_1=='\r'))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\Interface.g3:98:20: ( '\\r' )? '\\n'
				{
				DebugLocation(98, 20);
				// Language\\Interface.g3:98:20: ( '\\r' )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1=='\r'))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// Language\\Interface.g3:98:21: '\\r'
					{
					DebugLocation(98, 21);
					Match('\r'); 

					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(98, 28);
				Match('\n'); 

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(99, 3);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SL_COMMENT", 9);
			LeaveRule("SL_COMMENT", 9);
			LeaveRule_SL_COMMENT();
		}
	}
	// $ANTLR end "SL_COMMENT"

	partial void EnterRule_ML_COMMENT();
	partial void LeaveRule_ML_COMMENT();

	// $ANTLR start "ML_COMMENT"
	[GrammarRule("ML_COMMENT")]
	private void mML_COMMENT()
	{
		EnterRule_ML_COMMENT();
		EnterRule("ML_COMMENT", 10);
		TraceIn("ML_COMMENT", 10);
		try
		{
			int _type = ML_COMMENT;
			int _channel = DefaultTokenChannel;
			// Language\\Interface.g3:103:2: ( '/*' ( . )* '*/' )
			DebugEnterAlt(1);
			// Language\\Interface.g3:103:4: '/*' ( . )* '*/'
			{
			DebugLocation(103, 4);
			Match("/*"); 

			DebugLocation(103, 9);
			// Language\\Interface.g3:103:9: ( . )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1=='*'))
				{
					int LA5_2 = input.LA(2);

					if ((LA5_2=='/'))
					{
						alt5 = 2;
					}
					else if (((LA5_2>='\u0000' && LA5_2<='.')||(LA5_2>='0' && LA5_2<='\uFFFF')))
					{
						alt5 = 1;
					}


				}
				else if (((LA5_1>='\u0000' && LA5_1<=')')||(LA5_1>='+' && LA5_1<='\uFFFF')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Language\\Interface.g3:103:9: .
					{
					DebugLocation(103, 9);
					MatchAny(); 

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(103, 12);
			Match("*/"); 

			DebugLocation(104, 3);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ML_COMMENT", 10);
			LeaveRule("ML_COMMENT", 10);
			LeaveRule_ML_COMMENT();
		}
	}
	// $ANTLR end "ML_COMMENT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 11);
		TraceIn("WS", 11);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// Language\\Interface.g3:108:2: ( ( ' ' | '\\t' | '\\f' | ( '\\r' )? '\\n' )+ )
			DebugEnterAlt(1);
			// Language\\Interface.g3:108:4: ( ' ' | '\\t' | '\\f' | ( '\\r' )? '\\n' )+
			{
			DebugLocation(108, 4);
			// Language\\Interface.g3:108:4: ( ' ' | '\\t' | '\\f' | ( '\\r' )? '\\n' )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=5;
				try { DebugEnterDecision(7, false);
				switch (input.LA(1))
				{
				case ' ':
					{
					alt7 = 1;
					}
					break;
				case '\t':
					{
					alt7 = 2;
					}
					break;
				case '\f':
					{
					alt7 = 3;
					}
					break;
				case '\n':
				case '\r':
					{
					alt7 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// Language\\Interface.g3:108:6: ' '
					{
					DebugLocation(108, 6);
					Match(' '); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Language\\Interface.g3:109:5: '\\t'
					{
					DebugLocation(109, 5);
					Match('\t'); 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Language\\Interface.g3:110:5: '\\f'
					{
					DebugLocation(110, 5);
					Match('\f'); 

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// Language\\Interface.g3:111:5: ( '\\r' )? '\\n'
					{
					DebugLocation(111, 5);
					// Language\\Interface.g3:111:5: ( '\\r' )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, false);
					int LA6_1 = input.LA(1);

					if ((LA6_1=='\r'))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// Language\\Interface.g3:111:6: '\\r'
						{
						DebugLocation(111, 6);
						Match('\r'); 

						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(111, 13);
					Match('\n'); 

					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(113, 3);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 11);
			LeaveRule("WS", 11);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// Language\\Interface.g3:1:8: ( INTERFACE | OPTIONAL | ID | LPAREN | RPAREN | COMMA | SEMI | COLON | SL_COMMENT | ML_COMMENT | WS )
		int alt8=11;
		try { DebugEnterDecision(8, false);
		switch (input.LA(1))
		{
		case 'i':
			{
			int LA8_2 = input.LA(2);

			if ((LA8_2=='n'))
			{
				int LA8_3 = input.LA(3);

				if ((LA8_3=='t'))
				{
					int LA8_4 = input.LA(4);

					if ((LA8_4=='e'))
					{
						int LA8_5 = input.LA(5);

						if ((LA8_5=='r'))
						{
							int LA8_6 = input.LA(6);

							if ((LA8_6=='f'))
							{
								int LA8_7 = input.LA(7);

								if ((LA8_7=='a'))
								{
									int LA8_8 = input.LA(8);

									if ((LA8_8=='c'))
									{
										int LA8_9 = input.LA(9);

										if ((LA8_9=='e'))
										{
											int LA8_10 = input.LA(10);

											if ((LA8_10=='-'||(LA8_10>='0' && LA8_10<='9')||(LA8_10>='A' && LA8_10<='Z')||LA8_10=='_'||(LA8_10>='a' && LA8_10<='z')))
											{
												alt8 = 3;
											}
											else
											{
												alt8 = 1;
											}
										}
										else
										{
											alt8 = 3;
										}
									}
									else
									{
										alt8 = 3;
									}
								}
								else
								{
									alt8 = 3;
								}
							}
							else
							{
								alt8 = 3;
							}
						}
						else
						{
							alt8 = 3;
						}
					}
					else
					{
						alt8 = 3;
					}
				}
				else
				{
					alt8 = 3;
				}
			}
			else
			{
				alt8 = 3;
			}
			}
			break;
		case 'o':
			{
			int LA8_2 = input.LA(2);

			if ((LA8_2=='p'))
			{
				int LA8_3 = input.LA(3);

				if ((LA8_3=='t'))
				{
					int LA8_4 = input.LA(4);

					if ((LA8_4=='i'))
					{
						int LA8_5 = input.LA(5);

						if ((LA8_5=='o'))
						{
							int LA8_6 = input.LA(6);

							if ((LA8_6=='n'))
							{
								int LA8_7 = input.LA(7);

								if ((LA8_7=='a'))
								{
									int LA8_8 = input.LA(8);

									if ((LA8_8=='l'))
									{
										int LA8_9 = input.LA(9);

										if ((LA8_9=='-'||(LA8_9>='0' && LA8_9<='9')||(LA8_9>='A' && LA8_9<='Z')||LA8_9=='_'||(LA8_9>='a' && LA8_9<='z')))
										{
											alt8 = 3;
										}
										else
										{
											alt8 = 2;
										}
									}
									else
									{
										alt8 = 3;
									}
								}
								else
								{
									alt8 = 3;
								}
							}
							else
							{
								alt8 = 3;
							}
						}
						else
						{
							alt8 = 3;
						}
					}
					else
					{
						alt8 = 3;
					}
				}
				else
				{
					alt8 = 3;
				}
			}
			else
			{
				alt8 = 3;
			}
			}
			break;
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'p':
		case 'q':
		case 'r':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
			{
			alt8 = 3;
			}
			break;
		case '(':
			{
			alt8 = 4;
			}
			break;
		case ')':
			{
			alt8 = 5;
			}
			break;
		case ',':
			{
			alt8 = 6;
			}
			break;
		case ';':
			{
			alt8 = 7;
			}
			break;
		case ':':
			{
			alt8 = 8;
			}
			break;
		case '/':
			{
			int LA8_2 = input.LA(2);

			if ((LA8_2=='/'))
			{
				alt8 = 9;
			}
			else if ((LA8_2=='*'))
			{
				alt8 = 10;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 9, input, 2);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			}
			break;
		case '\t':
		case '\n':
		case '\f':
		case '\r':
		case ' ':
			{
			alt8 = 11;
			}
			break;
		default:
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
		}

		} finally { DebugExitDecision(8); }
		switch (alt8)
		{
		case 1:
			DebugEnterAlt(1);
			// Language\\Interface.g3:1:10: INTERFACE
			{
			DebugLocation(1, 10);
			mINTERFACE(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// Language\\Interface.g3:1:20: OPTIONAL
			{
			DebugLocation(1, 20);
			mOPTIONAL(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// Language\\Interface.g3:1:29: ID
			{
			DebugLocation(1, 29);
			mID(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// Language\\Interface.g3:1:32: LPAREN
			{
			DebugLocation(1, 32);
			mLPAREN(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// Language\\Interface.g3:1:39: RPAREN
			{
			DebugLocation(1, 39);
			mRPAREN(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// Language\\Interface.g3:1:46: COMMA
			{
			DebugLocation(1, 46);
			mCOMMA(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// Language\\Interface.g3:1:52: SEMI
			{
			DebugLocation(1, 52);
			mSEMI(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// Language\\Interface.g3:1:57: COLON
			{
			DebugLocation(1, 57);
			mCOLON(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// Language\\Interface.g3:1:63: SL_COMMENT
			{
			DebugLocation(1, 63);
			mSL_COMMENT(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// Language\\Interface.g3:1:74: ML_COMMENT
			{
			DebugLocation(1, 74);
			mML_COMMENT(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// Language\\Interface.g3:1:85: WS
			{
			DebugLocation(1, 85);
			mWS(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

	#endregion

}

} // namespace Antlr3.ST.Language
