//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.1 Language\\ActionEvaluator.g3 2013-06-14 09:39:35

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Linq;
using Antlr.Runtime.JavaExtensions;

using StringWriter = System.IO.StringWriter;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace Antlr3.ST.Language
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.1")]
[System.CLSCompliant(false)]
public partial class ActionEvaluator : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ANONYMOUS_TEMPLATE", "APPLY", "ARGS", "ASSIGN", "COLON", "COMMA", "CONDITIONAL", "DOT", "DOTDOTDOT", "ELSEIF", "ESC_CHAR", "FIRST", "FUNCTION", "ID", "INCLUDE", "INT", "LAST", "LBRACK", "LENGTH", "LIST", "LPAREN", "MULTI_APPLY", "NESTED_ANONYMOUS_TEMPLATE", "NEWLINE", "NOT", "NOTHING", "PLUS", "RBRACK", "REST", "RPAREN", "SEMI", "SINGLEVALUEARG", "STRING", "STRIP", "SUPER", "TEMPLATE", "TEMPLATE_ARGS", "TRUNC", "VALUE", "WS", "WS_CHAR"
	};
	public const int EOF=-1;
	public const int ANONYMOUS_TEMPLATE=4;
	public const int APPLY=5;
	public const int ARGS=6;
	public const int ASSIGN=7;
	public const int COLON=8;
	public const int COMMA=9;
	public const int CONDITIONAL=10;
	public const int DOT=11;
	public const int DOTDOTDOT=12;
	public const int ELSEIF=13;
	public const int ESC_CHAR=14;
	public const int FIRST=15;
	public const int FUNCTION=16;
	public const int ID=17;
	public const int INCLUDE=18;
	public const int INT=19;
	public const int LAST=20;
	public const int LBRACK=21;
	public const int LENGTH=22;
	public const int LIST=23;
	public const int LPAREN=24;
	public const int MULTI_APPLY=25;
	public const int NESTED_ANONYMOUS_TEMPLATE=26;
	public const int NEWLINE=27;
	public const int NOT=28;
	public const int NOTHING=29;
	public const int PLUS=30;
	public const int RBRACK=31;
	public const int REST=32;
	public const int RPAREN=33;
	public const int SEMI=34;
	public const int SINGLEVALUEARG=35;
	public const int STRING=36;
	public const int STRIP=37;
	public const int SUPER=38;
	public const int TEMPLATE=39;
	public const int TEMPLATE_ARGS=40;
	public const int TRUNC=41;
	public const int VALUE=42;
	public const int WS=43;
	public const int WS_CHAR=44;

	private ActionEvaluator(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	private ActionEvaluator(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return ActionEvaluator.tokenNames; } }
	public override string GrammarFileName { get { return "Language\\ActionEvaluator.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_action();
	partial void LeaveRule_action();
	// $ANTLR start "action"
	// Language\\ActionEvaluator.g3:53:1: public action returns [int numCharsWritten=0] : expr ;
	[GrammarRule("action")]
	public int action()
	{
		EnterRule_action();
		EnterRule("action", 1);
		TraceIn("action", 1);
		int numCharsWritten = 0;


		object expr1 = default(object);

		try { DebugEnterRule(GrammarFileName, "action");
		DebugLocation(53, 1);
		try
		{
			// Language\\ActionEvaluator.g3:54:2: ( expr )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:54:4: expr
			{
			DebugLocation(54, 4);
			PushFollow(Follow._expr_in_action60);
			expr1=expr();
			PopFollow();

			DebugLocation(54, 9);
			numCharsWritten = chunk.WriteAttribute(self,expr1,writer);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("action", 1);
			LeaveRule("action", 1);
			LeaveRule_action();
		}
		DebugLocation(55, 1);
		} finally { DebugExitRule(GrammarFileName, "action"); }
		return numCharsWritten;

	}
	// $ANTLR end "action"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();
	// $ANTLR start "expr"
	// Language\\ActionEvaluator.g3:57:1: expr returns [object value] : ( ^( PLUS a= expr b= expr ) | templateApplication | attribute | templateInclude | function | list | ^( VALUE e= expr ) );
	[GrammarRule("expr")]
	private object expr()
	{
		EnterRule_expr();
		EnterRule("expr", 2);
		TraceIn("expr", 2);
		object value = default(object);


		object a = default(object);
		object b = default(object);
		object e = default(object);
		object templateApplication2 = default(object);
		object attribute3 = default(object);
		object templateInclude4 = default(object);
		object function5 = default(object);
		object list6 = default(object);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(57, 1);
		try
		{
			// Language\\ActionEvaluator.g3:58:2: ( ^( PLUS a= expr b= expr ) | templateApplication | attribute | templateInclude | function | list | ^( VALUE e= expr ) )
			int alt1=7;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt1 = 1;
				}
				break;
			case APPLY:
			case MULTI_APPLY:
				{
				alt1 = 2;
				}
				break;
			case ANONYMOUS_TEMPLATE:
			case DOT:
			case ID:
			case INT:
			case STRING:
				{
				alt1 = 3;
				}
				break;
			case INCLUDE:
				{
				alt1 = 4;
				}
				break;
			case FUNCTION:
				{
				alt1 = 5;
				}
				break;
			case LIST:
				{
				alt1 = 6;
				}
				break;
			case VALUE:
				{
				alt1 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:58:4: ^( PLUS a= expr b= expr )
				{
				DebugLocation(58, 4);
				DebugLocation(58, 6);
				Match(input,PLUS,Follow._PLUS_in_expr78); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(58, 12);
				PushFollow(Follow._expr_in_expr82);
				a=expr();
				PopFollow();

				DebugLocation(58, 19);
				PushFollow(Follow._expr_in_expr86);
				b=expr();
				PopFollow();

				DebugLocation(58, 25);
				value = chunk.Add(a,b);

				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:59:4: templateApplication
				{
				DebugLocation(59, 4);
				PushFollow(Follow._templateApplication_in_expr94);
				templateApplication2=templateApplication();
				PopFollow();

				DebugLocation(59, 24);
				value = templateApplication2;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Language\\ActionEvaluator.g3:60:4: attribute
				{
				DebugLocation(60, 4);
				PushFollow(Follow._attribute_in_expr101);
				attribute3=attribute();
				PopFollow();

				DebugLocation(60, 14);
				value = attribute3;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Language\\ActionEvaluator.g3:61:4: templateInclude
				{
				DebugLocation(61, 4);
				PushFollow(Follow._templateInclude_in_expr108);
				templateInclude4=templateInclude();
				PopFollow();

				DebugLocation(61, 20);
				value = templateInclude4;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Language\\ActionEvaluator.g3:62:4: function
				{
				DebugLocation(62, 4);
				PushFollow(Follow._function_in_expr115);
				function5=function();
				PopFollow();

				DebugLocation(62, 13);
				value = function5;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Language\\ActionEvaluator.g3:63:4: list
				{
				DebugLocation(63, 4);
				PushFollow(Follow._list_in_expr122);
				list6=list();
				PopFollow();

				DebugLocation(63, 9);
				value = list6;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Language\\ActionEvaluator.g3:64:4: ^( VALUE e= expr )
				{
				DebugLocation(64, 4);
				DebugLocation(64, 6);
				Match(input,VALUE,Follow._VALUE_in_expr130); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(64, 13);
				PushFollow(Follow._expr_in_expr134);
				e=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(66, 3);

							StringWriter buf = new StringWriter();
							IStringTemplateWriter sw = self.Group.GetStringTemplateWriter(buf);
							int n = chunk.WriteAttribute(self,e,sw);
							if ( n > 0 )
							{
								value = buf.ToString();
							}
						

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 2);
			LeaveRule("expr", 2);
			LeaveRule_expr();
		}
		DebugLocation(75, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list();
	partial void LeaveRule_list();
	// $ANTLR start "list"
	// Language\\ActionEvaluator.g3:78:1: list returns [object value] : ^( LIST ( expr | NOTHING )+ ) ;
	[GrammarRule("list")]
	private object list()
	{
		EnterRule_list();
		EnterRule("list", 3);
		TraceIn("list", 3);
		object value = default(object);


		object expr7 = default(object);


			List<object> elements = new List<object>();

		try { DebugEnterRule(GrammarFileName, "list");
		DebugLocation(78, 1);
		try
		{
			// Language\\ActionEvaluator.g3:83:2: ( ^( LIST ( expr | NOTHING )+ ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:83:4: ^( LIST ( expr | NOTHING )+ )
			{
			DebugLocation(83, 4);
			DebugLocation(83, 7);
			Match(input,LIST,Follow._LIST_in_list166); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(84, 4);
			// Language\\ActionEvaluator.g3:84:4: ( expr | NOTHING )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=3;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>=ANONYMOUS_TEMPLATE && LA2_1<=APPLY)||LA2_1==DOT||(LA2_1>=FUNCTION && LA2_1<=INT)||LA2_1==LIST||LA2_1==MULTI_APPLY||LA2_1==PLUS||LA2_1==STRING||LA2_1==VALUE))
				{
					alt2 = 1;
				}
				else if ((LA2_1==NOTHING))
				{
					alt2 = 2;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// Language\\ActionEvaluator.g3:84:6: expr
					{
					DebugLocation(84, 6);
					PushFollow(Follow._expr_in_list173);
					expr7=expr();
					PopFollow();

					DebugLocation(85, 5);

										if ( expr7!=null )
										{
											elements.Add(expr7);
										}
									

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Language\\ActionEvaluator.g3:91:6: NOTHING
					{
					DebugLocation(91, 6);
					Match(input,NOTHING,Follow._NOTHING_in_list186); 
					DebugLocation(92, 5);

										List<object> nullSingleton = new List<object>( new object[] {null} );
										elements.Add(nullSingleton.GetEnumerator()); // add a blank
									

					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(98, 3);
			value = new Cat(elements);

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("list", 3);
			LeaveRule("list", 3);
			LeaveRule_list();
		}
		DebugLocation(99, 1);
		} finally { DebugExitRule(GrammarFileName, "list"); }
		return value;

	}
	// $ANTLR end "list"

	partial void EnterRule_templateInclude();
	partial void LeaveRule_templateInclude();
	// $ANTLR start "templateInclude"
	// Language\\ActionEvaluator.g3:101:1: templateInclude returns [object value] : ^( INCLUDE (id= ID a1= . | ^( VALUE n= expr a2= . ) ) ) ;
	[GrammarRule("templateInclude")]
	private object templateInclude()
	{
		EnterRule_templateInclude();
		EnterRule("templateInclude", 4);
		TraceIn("templateInclude", 4);
		object value = default(object);


		StringTemplateAST id = default(StringTemplateAST);
		StringTemplateAST a1 = default(StringTemplateAST);
		StringTemplateAST a2 = default(StringTemplateAST);
		object n = default(object);


			StringTemplateAST args = null;
			string name = null;

		try { DebugEnterRule(GrammarFileName, "templateInclude");
		DebugLocation(101, 1);
		try
		{
			// Language\\ActionEvaluator.g3:107:2: ( ^( INCLUDE (id= ID a1= . | ^( VALUE n= expr a2= . ) ) ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:107:4: ^( INCLUDE (id= ID a1= . | ^( VALUE n= expr a2= . ) ) )
			{
			DebugLocation(107, 4);
			DebugLocation(107, 7);
			Match(input,INCLUDE,Follow._INCLUDE_in_templateInclude228); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(109, 4);
			// Language\\ActionEvaluator.g3:109:4: (id= ID a1= . | ^( VALUE n= expr a2= . ) )
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==ID))
			{
				alt3 = 1;
			}
			else if ((LA3_1==VALUE))
			{
				alt3 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:109:6: id= ID a1= .
				{
				DebugLocation(109, 8);
				id=(StringTemplateAST)Match(input,ID,Follow._ID_in_templateInclude241); 
				DebugLocation(109, 14);

				a1=(StringTemplateAST)input.LT(1);

				MatchAny(input); 
				DebugLocation(110, 5);
				name=(id!=null?id.Text:default(string)); args=a1;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:112:6: ^( VALUE n= expr a2= . )
				{
				DebugLocation(112, 6);
				DebugLocation(112, 9);
				Match(input,VALUE,Follow._VALUE_in_templateInclude261); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(112, 16);
				PushFollow(Follow._expr_in_templateInclude265);
				n=expr();
				PopFollow();

				DebugLocation(112, 24);

				a2=(StringTemplateAST)input.LT(1);

				MatchAny(input); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(113, 5);
				if (n!=null) {name=n.ToString();} args=a2;

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(117, 3);

						if ( name!=null )
						{
							value = chunk.GetTemplateInclude(self, name, args);
						}
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("templateInclude", 4);
			LeaveRule("templateInclude", 4);
			LeaveRule_templateInclude();
		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "templateInclude"); }
		return value;

	}
	// $ANTLR end "templateInclude"

	partial void EnterRule_templateApplication();
	partial void LeaveRule_templateApplication();
	// $ANTLR start "templateApplication"
	// Language\\ActionEvaluator.g3:128:1: templateApplication returns [object value] : ( ^( APPLY a= expr ( template[templatesToApply] )+ ) | ^( MULTI_APPLY (a= expr )+ COLON anon= ANONYMOUS_TEMPLATE ) );
	[GrammarRule("templateApplication")]
	private object templateApplication()
	{
		EnterRule_templateApplication();
		EnterRule("templateApplication", 5);
		TraceIn("templateApplication", 5);
		object value = default(object);


		StringTemplateAST anon = default(StringTemplateAST);
		object a = default(object);


			var templatesToApply = new List<StringTemplate>();
			List<object> attributes = new List<object>();

		try { DebugEnterRule(GrammarFileName, "templateApplication");
		DebugLocation(128, 1);
		try
		{
			// Language\\ActionEvaluator.g3:134:2: ( ^( APPLY a= expr ( template[templatesToApply] )+ ) | ^( MULTI_APPLY (a= expr )+ COLON anon= ANONYMOUS_TEMPLATE ) )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==APPLY))
			{
				alt6 = 1;
			}
			else if ((LA6_1==MULTI_APPLY))
			{
				alt6 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:134:4: ^( APPLY a= expr ( template[templatesToApply] )+ )
				{
				DebugLocation(134, 4);
				DebugLocation(134, 7);
				Match(input,APPLY,Follow._APPLY_in_templateApplication315); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(134, 14);
				PushFollow(Follow._expr_in_templateApplication319);
				a=expr();
				PopFollow();

				DebugLocation(135, 4);
				// Language\\ActionEvaluator.g3:135:4: ( template[templatesToApply] )+
				int cnt4=0;
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_1 = input.LA(1);

					if ((LA4_1==TEMPLATE))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// Language\\ActionEvaluator.g3:135:5: template[templatesToApply]
						{
						DebugLocation(135, 5);
						PushFollow(Follow._template_in_templateApplication325);
						template(templatesToApply);
						PopFollow();


						}
						break;

					default:
						if (cnt4 >= 1)
							goto loop4;

						EarlyExitException eee4 = new EarlyExitException( 4, input );
						DebugRecognitionException(eee4);
						throw eee4;
					}
					cnt4++;
				}
				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(136, 4);
				value = chunk.ApplyListOfAlternatingTemplates(self,a,templatesToApply);

				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:138:4: ^( MULTI_APPLY (a= expr )+ COLON anon= ANONYMOUS_TEMPLATE )
				{
				DebugLocation(138, 4);
				DebugLocation(138, 7);
				Match(input,MULTI_APPLY,Follow._MULTI_APPLY_in_templateApplication344); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(138, 19);
				// Language\\ActionEvaluator.g3:138:19: (a= expr )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if (((LA5_1>=ANONYMOUS_TEMPLATE && LA5_1<=APPLY)||LA5_1==DOT||(LA5_1>=FUNCTION && LA5_1<=INT)||LA5_1==LIST||LA5_1==MULTI_APPLY||LA5_1==PLUS||LA5_1==STRING||LA5_1==VALUE))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// Language\\ActionEvaluator.g3:138:20: a= expr
						{
						DebugLocation(138, 21);
						PushFollow(Follow._expr_in_templateApplication349);
						a=expr();
						PopFollow();

						DebugLocation(138, 27);
						attributes.Add(a);

						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(138, 58);
				Match(input,COLON,Follow._COLON_in_templateApplication356); 
				DebugLocation(139, 8);
				anon=(StringTemplateAST)Match(input,ANONYMOUS_TEMPLATE,Follow._ANONYMOUS_TEMPLATE_in_templateApplication363); 
				DebugLocation(140, 4);

								StringTemplate anonymous = anon.StringTemplate;
								templatesToApply.Add(anonymous);
								value = chunk.ApplyTemplateToListOfAttributes(self,
																			  attributes,
																			  anon.StringTemplate);
							

				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("templateApplication", 5);
			LeaveRule("templateApplication", 5);
			LeaveRule_templateApplication();
		}
		DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "templateApplication"); }
		return value;

	}
	// $ANTLR end "templateApplication"

	partial void EnterRule_function();
	partial void LeaveRule_function();
	// $ANTLR start "function"
	// Language\\ActionEvaluator.g3:150:1: function returns [object value] : ^( FUNCTION ( 'first' a= singleFunctionArg | 'rest' a= singleFunctionArg | 'last' a= singleFunctionArg | 'length' a= singleFunctionArg | 'strip' a= singleFunctionArg | 'trunc' a= singleFunctionArg ) ) ;
	[GrammarRule("function")]
	private object function()
	{
		EnterRule_function();
		EnterRule("function", 6);
		TraceIn("function", 6);
		object value = default(object);


		object a = default(object);

		try { DebugEnterRule(GrammarFileName, "function");
		DebugLocation(150, 1);
		try
		{
			// Language\\ActionEvaluator.g3:151:2: ( ^( FUNCTION ( 'first' a= singleFunctionArg | 'rest' a= singleFunctionArg | 'last' a= singleFunctionArg | 'length' a= singleFunctionArg | 'strip' a= singleFunctionArg | 'trunc' a= singleFunctionArg ) ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:151:4: ^( FUNCTION ( 'first' a= singleFunctionArg | 'rest' a= singleFunctionArg | 'last' a= singleFunctionArg | 'length' a= singleFunctionArg | 'strip' a= singleFunctionArg | 'trunc' a= singleFunctionArg ) )
			{
			DebugLocation(151, 4);
			DebugLocation(151, 7);
			Match(input,FUNCTION,Follow._FUNCTION_in_function389); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(152, 4);
			// Language\\ActionEvaluator.g3:152:4: ( 'first' a= singleFunctionArg | 'rest' a= singleFunctionArg | 'last' a= singleFunctionArg | 'length' a= singleFunctionArg | 'strip' a= singleFunctionArg | 'trunc' a= singleFunctionArg )
			int alt7=6;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case FIRST:
				{
				alt7 = 1;
				}
				break;
			case REST:
				{
				alt7 = 2;
				}
				break;
			case LAST:
				{
				alt7 = 3;
				}
				break;
			case LENGTH:
				{
				alt7 = 4;
				}
				break;
			case STRIP:
				{
				alt7 = 5;
				}
				break;
			case TRUNC:
				{
				alt7 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:152:6: 'first' a= singleFunctionArg
				{
				DebugLocation(152, 6);
				Match(input,FIRST,Follow._FIRST_in_function396); 
				DebugLocation(152, 16);
				PushFollow(Follow._singleFunctionArg_in_function401);
				a=singleFunctionArg();
				PopFollow();

				DebugLocation(152, 35);
				value =chunk.First(a);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:153:6: 'rest' a= singleFunctionArg
				{
				DebugLocation(153, 6);
				Match(input,REST,Follow._REST_in_function410); 
				DebugLocation(153, 15);
				PushFollow(Follow._singleFunctionArg_in_function415);
				a=singleFunctionArg();
				PopFollow();

				DebugLocation(153, 34);
				value =chunk.Rest(a);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Language\\ActionEvaluator.g3:154:6: 'last' a= singleFunctionArg
				{
				DebugLocation(154, 6);
				Match(input,LAST,Follow._LAST_in_function424); 
				DebugLocation(154, 15);
				PushFollow(Follow._singleFunctionArg_in_function429);
				a=singleFunctionArg();
				PopFollow();

				DebugLocation(154, 34);
				value =chunk.Last(a);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Language\\ActionEvaluator.g3:155:6: 'length' a= singleFunctionArg
				{
				DebugLocation(155, 6);
				Match(input,LENGTH,Follow._LENGTH_in_function438); 
				DebugLocation(155, 16);
				PushFollow(Follow._singleFunctionArg_in_function442);
				a=singleFunctionArg();
				PopFollow();

				DebugLocation(155, 35);
				value =chunk.Length(a);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Language\\ActionEvaluator.g3:156:6: 'strip' a= singleFunctionArg
				{
				DebugLocation(156, 6);
				Match(input,STRIP,Follow._STRIP_in_function451); 
				DebugLocation(156, 16);
				PushFollow(Follow._singleFunctionArg_in_function456);
				a=singleFunctionArg();
				PopFollow();

				DebugLocation(156, 35);
				value =chunk.Strip(a);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Language\\ActionEvaluator.g3:157:6: 'trunc' a= singleFunctionArg
				{
				DebugLocation(157, 6);
				Match(input,TRUNC,Follow._TRUNC_in_function465); 
				DebugLocation(157, 16);
				PushFollow(Follow._singleFunctionArg_in_function470);
				a=singleFunctionArg();
				PopFollow();

				DebugLocation(157, 35);
				value =chunk.Trunc(a);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("function", 6);
			LeaveRule("function", 6);
			LeaveRule_function();
		}
		DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "function"); }
		return value;

	}
	// $ANTLR end "function"

	partial void EnterRule_singleFunctionArg();
	partial void LeaveRule_singleFunctionArg();
	// $ANTLR start "singleFunctionArg"
	// Language\\ActionEvaluator.g3:162:1: singleFunctionArg returns [object value] : ^( SINGLEVALUEARG expr ) ;
	[GrammarRule("singleFunctionArg")]
	private object singleFunctionArg()
	{
		EnterRule_singleFunctionArg();
		EnterRule("singleFunctionArg", 7);
		TraceIn("singleFunctionArg", 7);
		object value = default(object);


		object expr8 = default(object);

		try { DebugEnterRule(GrammarFileName, "singleFunctionArg");
		DebugLocation(162, 1);
		try
		{
			// Language\\ActionEvaluator.g3:163:2: ( ^( SINGLEVALUEARG expr ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:163:4: ^( SINGLEVALUEARG expr )
			{
			DebugLocation(163, 4);
			DebugLocation(163, 7);
			Match(input,SINGLEVALUEARG,Follow._SINGLEVALUEARG_in_singleFunctionArg498); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(163, 22);
			PushFollow(Follow._expr_in_singleFunctionArg500);
			expr8=expr();
			PopFollow();

			DebugLocation(163, 27);
			value = expr8;

			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("singleFunctionArg", 7);
			LeaveRule("singleFunctionArg", 7);
			LeaveRule_singleFunctionArg();
		}
		DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "singleFunctionArg"); }
		return value;

	}
	// $ANTLR end "singleFunctionArg"

	partial void EnterRule_template();
	partial void LeaveRule_template();
	// $ANTLR start "template"
	// Language\\ActionEvaluator.g3:166:1: template[List<StringTemplate> templatesToApply] : ^( TEMPLATE ( ID args= . |anon= ANONYMOUS_TEMPLATE | ^( VALUE n= expr args= . ) ) ) ;
	[GrammarRule("template")]
	private void template(List<StringTemplate> templatesToApply)
	{
		EnterRule_template();
		EnterRule("template", 8);
		TraceIn("template", 8);
		StringTemplateAST anon = default(StringTemplateAST);
		StringTemplateAST ID9 = default(StringTemplateAST);
		StringTemplateAST args = default(StringTemplateAST);
		object n = default(object);


			IDictionary<string, object> argumentContext = null;

		try { DebugEnterRule(GrammarFileName, "template");
		DebugLocation(166, 1);
		try
		{
			// Language\\ActionEvaluator.g3:171:2: ( ^( TEMPLATE ( ID args= . |anon= ANONYMOUS_TEMPLATE | ^( VALUE n= expr args= . ) ) ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:171:4: ^( TEMPLATE ( ID args= . |anon= ANONYMOUS_TEMPLATE | ^( VALUE n= expr args= . ) ) )
			{
			DebugLocation(171, 4);
			DebugLocation(171, 7);
			Match(input,TEMPLATE,Follow._TEMPLATE_in_template523); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(172, 4);
			// Language\\ActionEvaluator.g3:172:4: ( ID args= . |anon= ANONYMOUS_TEMPLATE | ^( VALUE n= expr args= . ) )
			int alt8=3;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt8 = 1;
				}
				break;
			case ANONYMOUS_TEMPLATE:
				{
				alt8 = 2;
				}
				break;
			case VALUE:
				{
				alt8 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:172:6: ID args= .
				{
				DebugLocation(172, 6);
				ID9=(StringTemplateAST)Match(input,ID,Follow._ID_in_template530); 
				DebugLocation(172, 13);

				args=(StringTemplateAST)input.LT(1);

				MatchAny(input); 
				DebugLocation(173, 5);

									string templateName = (ID9!=null?ID9.Text:default(string));
									StringTemplateGroup group = self.Group;
									StringTemplate embedded = group.GetEmbeddedInstanceOf(self, templateName);
									if ( embedded!=null )
									{
										embedded.ArgumentsAST = args;
										templatesToApply.Add(embedded);
									}
								

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:184:6: anon= ANONYMOUS_TEMPLATE
				{
				DebugLocation(184, 10);
				anon=(StringTemplateAST)Match(input,ANONYMOUS_TEMPLATE,Follow._ANONYMOUS_TEMPLATE_in_template551); 
				DebugLocation(185, 5);

									StringTemplate anonymous = anon.StringTemplate;
									// to properly see overridden templates, always set
									// anonymous' group to be self's group
									anonymous.Group = self.Group;
									templatesToApply.Add(anonymous);
								

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Language\\ActionEvaluator.g3:193:6: ^( VALUE n= expr args= . )
				{
				DebugLocation(193, 6);
				DebugLocation(193, 9);
				Match(input,VALUE,Follow._VALUE_in_template567); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(193, 16);
				PushFollow(Follow._expr_in_template571);
				n=expr();
				PopFollow();

				DebugLocation(193, 26);

				args=(StringTemplateAST)input.LT(1);

				MatchAny(input); 
				DebugLocation(194, 6);

										StringTemplate embedded = null;
										if ( n!=null )
										{
											string templateName = n.ToString();
											StringTemplateGroup group = self.Group;
											embedded = group.GetEmbeddedInstanceOf(self, templateName);
											if ( embedded!=null )
											{
												embedded.ArgumentsAST = args;
												templatesToApply.Add(embedded);
											}
										}
									

				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
			} finally { DebugExitSubRule(8); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("template", 8);
			LeaveRule("template", 8);
			LeaveRule_template();
		}
		DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "template"); }
		return;

	}
	// $ANTLR end "template"

	partial void EnterRule_ifCondition();
	partial void LeaveRule_ifCondition();
	// $ANTLR start "ifCondition"
	// Language\\ActionEvaluator.g3:214:1: public ifCondition returns [bool value] : (a= ifAtom | ^( NOT a= ifAtom ) );
	[GrammarRule("ifCondition")]
	public bool ifCondition()
	{
		EnterRule_ifCondition();
		EnterRule("ifCondition", 9);
		TraceIn("ifCondition", 9);
		bool value = default(bool);


		object a = default(object);

		try { DebugEnterRule(GrammarFileName, "ifCondition");
		DebugLocation(214, 1);
		try
		{
			// Language\\ActionEvaluator.g3:215:2: (a= ifAtom | ^( NOT a= ifAtom ) )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if (((LA9_1>=ANONYMOUS_TEMPLATE && LA9_1<=APPLY)||LA9_1==DOT||(LA9_1>=FUNCTION && LA9_1<=INT)||LA9_1==LIST||LA9_1==MULTI_APPLY||LA9_1==PLUS||LA9_1==STRING||LA9_1==VALUE))
			{
				alt9 = 1;
			}
			else if ((LA9_1==NOT))
			{
				alt9 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:215:4: a= ifAtom
				{
				DebugLocation(215, 5);
				PushFollow(Follow._ifAtom_in_ifCondition616);
				a=ifAtom();
				PopFollow();

				DebugLocation(215, 13);
				value = chunk.TestAttributeTrue(a);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:216:4: ^( NOT a= ifAtom )
				{
				DebugLocation(216, 4);
				DebugLocation(216, 6);
				Match(input,NOT,Follow._NOT_in_ifCondition624); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(216, 11);
				PushFollow(Follow._ifAtom_in_ifCondition628);
				a=ifAtom();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(216, 20);
				value = !chunk.TestAttributeTrue(a);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifCondition", 9);
			LeaveRule("ifCondition", 9);
			LeaveRule_ifCondition();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "ifCondition"); }
		return value;

	}
	// $ANTLR end "ifCondition"

	partial void EnterRule_ifAtom();
	partial void LeaveRule_ifAtom();
	// $ANTLR start "ifAtom"
	// Language\\ActionEvaluator.g3:219:1: ifAtom returns [object value] : expr ;
	[GrammarRule("ifAtom")]
	private object ifAtom()
	{
		EnterRule_ifAtom();
		EnterRule("ifAtom", 10);
		TraceIn("ifAtom", 10);
		object value = default(object);


		object expr10 = default(object);

		try { DebugEnterRule(GrammarFileName, "ifAtom");
		DebugLocation(219, 1);
		try
		{
			// Language\\ActionEvaluator.g3:220:2: ( expr )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:220:4: expr
			{
			DebugLocation(220, 4);
			PushFollow(Follow._expr_in_ifAtom646);
			expr10=expr();
			PopFollow();

			DebugLocation(220, 9);
			value = expr10;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifAtom", 10);
			LeaveRule("ifAtom", 10);
			LeaveRule_ifAtom();
		}
		DebugLocation(221, 1);
		} finally { DebugExitRule(GrammarFileName, "ifAtom"); }
		return value;

	}
	// $ANTLR end "ifAtom"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();
	// $ANTLR start "attribute"
	// Language\\ActionEvaluator.g3:223:1: attribute returns [object value] : ( ^( DOT obj= expr (prop= ID | ^( VALUE e= expr ) ) ) | ID | INT | STRING | ANONYMOUS_TEMPLATE );
	[GrammarRule("attribute")]
	private object attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 11);
		TraceIn("attribute", 11);
		object value = default(object);


		StringTemplateAST prop = default(StringTemplateAST);
		StringTemplateAST ID11 = default(StringTemplateAST);
		StringTemplateAST INT12 = default(StringTemplateAST);
		StringTemplateAST STRING13 = default(StringTemplateAST);
		StringTemplateAST ANONYMOUS_TEMPLATE14 = default(StringTemplateAST);
		object obj = default(object);
		object e = default(object);


			object propName = null;

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(223, 1);
		try
		{
			// Language\\ActionEvaluator.g3:228:2: ( ^( DOT obj= expr (prop= ID | ^( VALUE e= expr ) ) ) | ID | INT | STRING | ANONYMOUS_TEMPLATE )
			int alt11=5;
			try { DebugEnterDecision(11, false);
			switch (input.LA(1))
			{
			case DOT:
				{
				alt11 = 1;
				}
				break;
			case ID:
				{
				alt11 = 2;
				}
				break;
			case INT:
				{
				alt11 = 3;
				}
				break;
			case STRING:
				{
				alt11 = 4;
				}
				break;
			case ANONYMOUS_TEMPLATE:
				{
				alt11 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:228:4: ^( DOT obj= expr (prop= ID | ^( VALUE e= expr ) ) )
				{
				DebugLocation(228, 4);
				DebugLocation(228, 7);
				Match(input,DOT,Follow._DOT_in_attribute670); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(228, 14);
				PushFollow(Follow._expr_in_attribute674);
				obj=expr();
				PopFollow();

				DebugLocation(229, 4);
				// Language\\ActionEvaluator.g3:229:4: (prop= ID | ^( VALUE e= expr ) )
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==ID))
				{
					alt10 = 1;
				}
				else if ((LA10_1==VALUE))
				{
					alt10 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// Language\\ActionEvaluator.g3:229:6: prop= ID
					{
					DebugLocation(229, 10);
					prop=(StringTemplateAST)Match(input,ID,Follow._ID_in_attribute683); 
					DebugLocation(229, 14);
					propName = (prop!=null?prop.Text:default(string));

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Language\\ActionEvaluator.g3:234:6: ^( VALUE e= expr )
					{
					DebugLocation(234, 6);
					DebugLocation(234, 8);
					Match(input,VALUE,Follow._VALUE_in_attribute713); 

					Match(input, TokenTypes.Down, null); 
					DebugLocation(234, 15);
					PushFollow(Follow._expr_in_attribute717);
					e=expr();
					PopFollow();


					Match(input, TokenTypes.Up, null); 

					DebugLocation(234, 22);
					if (e!=null) {propName=e;}

					}
					break;

				}
				} finally { DebugExitSubRule(10); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(237, 3);
				value = chunk.GetObjectProperty(self,obj,propName);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:239:4: ID
				{
				DebugLocation(239, 4);
				ID11=(StringTemplateAST)Match(input,ID,Follow._ID_in_attribute739); 
				DebugLocation(240, 3);

						value =self.GetAttribute((ID11!=null?ID11.Text:default(string)));
						

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Language\\ActionEvaluator.g3:244:4: INT
				{
				DebugLocation(244, 4);
				INT12=(StringTemplateAST)Match(input,INT,Follow._INT_in_attribute749); 
				DebugLocation(244, 8);
				value =int.Parse((INT12!=null?INT12.Text:default(string)));

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Language\\ActionEvaluator.g3:246:4: STRING
				{
				DebugLocation(246, 4);
				STRING13=(StringTemplateAST)Match(input,STRING,Follow._STRING_in_attribute757); 
				DebugLocation(247, 3);

						value =(STRING13!=null?STRING13.Text:default(string));
						

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Language\\ActionEvaluator.g3:251:4: ANONYMOUS_TEMPLATE
				{
				DebugLocation(251, 4);
				ANONYMOUS_TEMPLATE14=(StringTemplateAST)Match(input,ANONYMOUS_TEMPLATE,Follow._ANONYMOUS_TEMPLATE_in_attribute767); 
				DebugLocation(252, 3);

							value = (ANONYMOUS_TEMPLATE14!=null?ANONYMOUS_TEMPLATE14.Text:default(string));
							if ((ANONYMOUS_TEMPLATE14!=null?ANONYMOUS_TEMPLATE14.Text:default(string)) != null)
							{
								StringTemplate valueST =new StringTemplate(self.Group, (ANONYMOUS_TEMPLATE14!=null?ANONYMOUS_TEMPLATE14.Text:default(string)));
								valueST.EnclosingInstance = self;
								valueST.Name = "<anonymous template argument>";
								value = valueST;
							}
						

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 11);
			LeaveRule("attribute", 11);
			LeaveRule_attribute();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_argList();
	partial void LeaveRule_argList();
	// $ANTLR start "argList"
	// Language\\ActionEvaluator.g3:270:1: public argList[StringTemplate embedded, Dictionary<string, object> initialContext] returns [Dictionary<string, object> argumentContext] : ( ^( ARGS ( argumentAssignment[$embedded,$argumentContext] )* ) | singleTemplateArg[$embedded,$argumentContext] );
	[GrammarRule("argList")]
	public Dictionary<string, object> argList(StringTemplate embedded, Dictionary<string, object> initialContext)
	{
		EnterRule_argList();
		EnterRule("argList", 12);
		TraceIn("argList", 12);
		Dictionary<string, object> argumentContext = default(Dictionary<string, object>);



			argumentContext = initialContext;
			if ( argumentContext==null )
			{
				argumentContext =new System.Collections.Generic.Dictionary<string, object>();
			}

		try { DebugEnterRule(GrammarFileName, "argList");
		DebugLocation(270, 1);
		try
		{
			// Language\\ActionEvaluator.g3:280:2: ( ^( ARGS ( argumentAssignment[$embedded,$argumentContext] )* ) | singleTemplateArg[$embedded,$argumentContext] )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==ARGS))
			{
				alt13 = 1;
			}
			else if ((LA13_1==SINGLEVALUEARG))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:280:4: ^( ARGS ( argumentAssignment[$embedded,$argumentContext] )* )
				{
				DebugLocation(280, 4);
				DebugLocation(280, 7);
				Match(input,ARGS,Follow._ARGS_in_argList799); 

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); 
					DebugLocation(280, 12);
					// Language\\ActionEvaluator.g3:280:12: ( argumentAssignment[$embedded,$argumentContext] )*
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_1 = input.LA(1);

						if ((LA12_1==ASSIGN||LA12_1==DOTDOTDOT))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch ( alt12 )
						{
						case 1:
							DebugEnterAlt(1);
							// Language\\ActionEvaluator.g3:280:13: argumentAssignment[$embedded,$argumentContext]
							{
							DebugLocation(280, 13);
							PushFollow(Follow._argumentAssignment_in_argList802);
							argumentAssignment(embedded, argumentContext);
							PopFollow();


							}
							break;

						default:
							goto loop12;
						}
					}

					loop12:
						;

					} finally { DebugExitSubRule(12); }


					Match(input, TokenTypes.Up, null); 
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:281:4: singleTemplateArg[$embedded,$argumentContext]
				{
				DebugLocation(281, 4);
				PushFollow(Follow._singleTemplateArg_in_argList812);
				singleTemplateArg(embedded, argumentContext);
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("argList", 12);
			LeaveRule("argList", 12);
			LeaveRule_argList();
		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "argList"); }
		return argumentContext;

	}
	// $ANTLR end "argList"

	partial void EnterRule_singleTemplateArg();
	partial void LeaveRule_singleTemplateArg();
	// $ANTLR start "singleTemplateArg"
	// Language\\ActionEvaluator.g3:284:1: singleTemplateArg[StringTemplate embedded, IDictionary<string, object> argumentContext] : ^( SINGLEVALUEARG e= expr ) ;
	[GrammarRule("singleTemplateArg")]
	private void singleTemplateArg(StringTemplate embedded, IDictionary<string, object> argumentContext)
	{
		EnterRule_singleTemplateArg();
		EnterRule("singleTemplateArg", 13);
		TraceIn("singleTemplateArg", 13);
		object e = default(object);

		try { DebugEnterRule(GrammarFileName, "singleTemplateArg");
		DebugLocation(284, 1);
		try
		{
			// Language\\ActionEvaluator.g3:285:2: ( ^( SINGLEVALUEARG e= expr ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:285:4: ^( SINGLEVALUEARG e= expr )
			{
			DebugLocation(285, 4);
			DebugLocation(285, 7);
			Match(input,SINGLEVALUEARG,Follow._SINGLEVALUEARG_in_singleTemplateArg827); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(285, 23);
			PushFollow(Follow._expr_in_singleTemplateArg831);
			e=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(286, 3);

						if ( e!=null )
						{
							string soleArgName = null;
							// find the sole defined formal argument for embedded
							bool error = false;
							var formalArgs = embedded.FormalArguments;
							if ( formalArgs!=null )
							{
								var argNames = formalArgs.Select( fa => fa.name ).ToArray();
								if ( argNames.Length==1 )
								{
									soleArgName = (string)argNames.ToArray()[0];
									//System.out.println("sole formal arg of "+embedded.Name+" is "+soleArgName);
								}
								else
								{
									error=true;
								}
							}
							else
							{
								error=true;
							}
							if ( error )
							{
								self.Error("template "+embedded.Name+
										   " must have exactly one formal arg in template context "+
										   self.GetEnclosingInstanceStackString());
							}
							else
							{
								self.RawSetArgumentAttribute(embedded,argumentContext,soleArgName,e);
							}
						}
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("singleTemplateArg", 13);
			LeaveRule("singleTemplateArg", 13);
			LeaveRule_singleTemplateArg();
		}
		DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "singleTemplateArg"); }
		return;

	}
	// $ANTLR end "singleTemplateArg"

	partial void EnterRule_argumentAssignment();
	partial void LeaveRule_argumentAssignment();
	// $ANTLR start "argumentAssignment"
	// Language\\ActionEvaluator.g3:324:1: argumentAssignment[StringTemplate embedded, IDictionary<string, object> argumentContext] : ( ^( ASSIGN arg= ID expr ) | DOTDOTDOT );
	[GrammarRule("argumentAssignment")]
	private void argumentAssignment(StringTemplate embedded, IDictionary<string, object> argumentContext)
	{
		EnterRule_argumentAssignment();
		EnterRule("argumentAssignment", 14);
		TraceIn("argumentAssignment", 14);
		StringTemplateAST arg = default(StringTemplateAST);
		object expr15 = default(object);

		try { DebugEnterRule(GrammarFileName, "argumentAssignment");
		DebugLocation(324, 1);
		try
		{
			// Language\\ActionEvaluator.g3:325:2: ( ^( ASSIGN arg= ID expr ) | DOTDOTDOT )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==ASSIGN))
			{
				alt14 = 1;
			}
			else if ((LA14_1==DOTDOTDOT))
			{
				alt14 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:325:4: ^( ASSIGN arg= ID expr )
				{
				DebugLocation(325, 4);
				DebugLocation(325, 7);
				Match(input,ASSIGN,Follow._ASSIGN_in_argumentAssignment851); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(325, 17);
				arg=(StringTemplateAST)Match(input,ID,Follow._ID_in_argumentAssignment855); 
				DebugLocation(325, 21);
				PushFollow(Follow._expr_in_argumentAssignment857);
				expr15=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(326, 3);

							if ( expr15 != null )
							{
								self.RawSetArgumentAttribute(embedded,argumentContext,(arg!=null?arg.Text:default(string)),expr15);
							}
						

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:332:4: DOTDOTDOT
				{
				DebugLocation(332, 4);
				Match(input,DOTDOTDOT,Follow._DOTDOTDOT_in_argumentAssignment868); 
				DebugLocation(332, 14);
				embedded.SetPassThroughAttributes(true);

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("argumentAssignment", 14);
			LeaveRule("argumentAssignment", 14);
			LeaveRule_argumentAssignment();
		}
		DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "argumentAssignment"); }
		return;

	}
	// $ANTLR end "argumentAssignment"

	partial void EnterRule_actionCompiled();
	partial void LeaveRule_actionCompiled();
	// $ANTLR start "actionCompiled"
	// Language\\ActionEvaluator.g3:336:1: public actionCompiled[System.Reflection.Emit.ILGenerator gen] : exprCompiled[$gen] ;
	[GrammarRule("actionCompiled")]
	public void actionCompiled(System.Reflection.Emit.ILGenerator gen)
	{
		EnterRule_actionCompiled();
		EnterRule("actionCompiled", 15);
		TraceIn("actionCompiled", 15);
		try { DebugEnterRule(GrammarFileName, "actionCompiled");
		DebugLocation(336, 1);
		try
		{
			// Language\\ActionEvaluator.g3:337:2: ( exprCompiled[$gen] )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:337:4: exprCompiled[$gen]
			{
			DebugLocation(337, 4);
			PushFollow(Follow._exprCompiled_in_actionCompiled884);
			exprCompiled(gen);
			PopFollow();

			DebugLocation(338, 3);

			#if COMPILE_EXPRESSIONS
						EmitWriteAttribute(gen);
			#endif
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("actionCompiled", 15);
			LeaveRule("actionCompiled", 15);
			LeaveRule_actionCompiled();
		}
		DebugLocation(343, 1);
		} finally { DebugExitRule(GrammarFileName, "actionCompiled"); }
		return;

	}
	// $ANTLR end "actionCompiled"

	partial void EnterRule_actionFunctional();
	partial void LeaveRule_actionFunctional();
	// $ANTLR start "actionFunctional"
	// Language\\ActionEvaluator.g3:346:1: public actionFunctional returns [System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,int> func] : exprFunctional ;
	[GrammarRule("actionFunctional")]
	public System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,int> actionFunctional()
	{
		EnterRule_actionFunctional();
		EnterRule("actionFunctional", 16);
		TraceIn("actionFunctional", 16);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,int> func = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,int>);


		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> exprFunctional16 = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);

		try { DebugEnterRule(GrammarFileName, "actionFunctional");
		DebugLocation(346, 1);
		try
		{
			// Language\\ActionEvaluator.g3:347:2: ( exprFunctional )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:347:4: exprFunctional
			{
			DebugLocation(347, 4);
			PushFollow(Follow._exprFunctional_in_actionFunctional906);
			exprFunctional16=exprFunctional();
			PopFollow();

			DebugLocation(348, 3);

			#if COMPILE_EXPRESSIONS
						func = (chunk,self,writer) => chunk.WriteAttribute(self,exprFunctional16(chunk,self,writer),writer);
			#endif
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("actionFunctional", 16);
			LeaveRule("actionFunctional", 16);
			LeaveRule_actionFunctional();
		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "actionFunctional"); }
		return func;

	}
	// $ANTLR end "actionFunctional"

	partial void EnterRule_ifConditionCompiled();
	partial void LeaveRule_ifConditionCompiled();
	// $ANTLR start "ifConditionCompiled"
	// Language\\ActionEvaluator.g3:356:1: public ifConditionCompiled[System.Reflection.Emit.ILGenerator gen] : ( ifAtomCompiled[$gen] | ^( NOT ifAtomCompiled[$gen] ) );
	[GrammarRule("ifConditionCompiled")]
	public void ifConditionCompiled(System.Reflection.Emit.ILGenerator gen)
	{
		EnterRule_ifConditionCompiled();
		EnterRule("ifConditionCompiled", 17);
		TraceIn("ifConditionCompiled", 17);
		try { DebugEnterRule(GrammarFileName, "ifConditionCompiled");
		DebugLocation(356, 1);
		try
		{
			// Language\\ActionEvaluator.g3:357:2: ( ifAtomCompiled[$gen] | ^( NOT ifAtomCompiled[$gen] ) )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if (((LA15_1>=ANONYMOUS_TEMPLATE && LA15_1<=APPLY)||LA15_1==DOT||(LA15_1>=FUNCTION && LA15_1<=INT)||LA15_1==LIST||LA15_1==MULTI_APPLY||LA15_1==PLUS||LA15_1==STRING||LA15_1==VALUE))
			{
				alt15 = 1;
			}
			else if ((LA15_1==NOT))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:357:4: ifAtomCompiled[$gen]
				{
				DebugLocation(357, 4);
				PushFollow(Follow._ifAtomCompiled_in_ifConditionCompiled924);
				ifAtomCompiled(gen);
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:358:4: ^( NOT ifAtomCompiled[$gen] )
				{
				DebugLocation(358, 4);
				DebugLocation(358, 6);
				Match(input,NOT,Follow._NOT_in_ifConditionCompiled931); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(358, 10);
				PushFollow(Follow._ifAtomCompiled_in_ifConditionCompiled933);
				ifAtomCompiled(gen);
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(359, 3);

				#if COMPILE_EXPRESSIONS
							EmitNot(gen);
				#endif
						

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifConditionCompiled", 17);
			LeaveRule("ifConditionCompiled", 17);
			LeaveRule_ifConditionCompiled();
		}
		DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "ifConditionCompiled"); }
		return;

	}
	// $ANTLR end "ifConditionCompiled"

	partial void EnterRule_ifConditionFunctional();
	partial void LeaveRule_ifConditionFunctional();
	// $ANTLR start "ifConditionFunctional"
	// Language\\ActionEvaluator.g3:367:1: public ifConditionFunctional returns [System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,bool> func] : ( ifAtomFunctional | ^( NOT ifAtomFunctional ) );
	[GrammarRule("ifConditionFunctional")]
	public System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,bool> ifConditionFunctional()
	{
		EnterRule_ifConditionFunctional();
		EnterRule("ifConditionFunctional", 18);
		TraceIn("ifConditionFunctional", 18);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,bool> func = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,bool>);


		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,bool> ifAtomFunctional17 = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,bool>);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,bool> ifAtomFunctional18 = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,bool>);

		try { DebugEnterRule(GrammarFileName, "ifConditionFunctional");
		DebugLocation(367, 1);
		try
		{
			// Language\\ActionEvaluator.g3:368:2: ( ifAtomFunctional | ^( NOT ifAtomFunctional ) )
			int alt16=2;
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if (((LA16_1>=ANONYMOUS_TEMPLATE && LA16_1<=APPLY)||LA16_1==DOT||(LA16_1>=FUNCTION && LA16_1<=INT)||LA16_1==LIST||LA16_1==MULTI_APPLY||LA16_1==PLUS||LA16_1==STRING||LA16_1==VALUE))
			{
				alt16 = 1;
			}
			else if ((LA16_1==NOT))
			{
				alt16 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:368:4: ifAtomFunctional
				{
				DebugLocation(368, 4);
				PushFollow(Follow._ifAtomFunctional_in_ifConditionFunctional956);
				ifAtomFunctional17=ifAtomFunctional();
				PopFollow();

				DebugLocation(369, 3);

				#if COMPILE_EXPRESSIONS
							func = ifAtomFunctional17;
				#endif
						

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:374:4: ^( NOT ifAtomFunctional )
				{
				DebugLocation(374, 4);
				DebugLocation(374, 6);
				Match(input,NOT,Follow._NOT_in_ifConditionFunctional966); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(374, 10);
				PushFollow(Follow._ifAtomFunctional_in_ifConditionFunctional968);
				ifAtomFunctional18=ifAtomFunctional();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(375, 3);

				#if COMPILE_EXPRESSIONS
							func = (chunk,self,writer) => !(ifAtomFunctional18(chunk,self,writer));
				#endif
						

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifConditionFunctional", 18);
			LeaveRule("ifConditionFunctional", 18);
			LeaveRule_ifConditionFunctional();
		}
		DebugLocation(380, 1);
		} finally { DebugExitRule(GrammarFileName, "ifConditionFunctional"); }
		return func;

	}
	// $ANTLR end "ifConditionFunctional"

	partial void EnterRule_ifAtomCompiled();
	partial void LeaveRule_ifAtomCompiled();
	// $ANTLR start "ifAtomCompiled"
	// Language\\ActionEvaluator.g3:382:1: ifAtomCompiled[System.Reflection.Emit.ILGenerator gen] : exprCompiled[$gen] ;
	[GrammarRule("ifAtomCompiled")]
	private void ifAtomCompiled(System.Reflection.Emit.ILGenerator gen)
	{
		EnterRule_ifAtomCompiled();
		EnterRule("ifAtomCompiled", 19);
		TraceIn("ifAtomCompiled", 19);
		try { DebugEnterRule(GrammarFileName, "ifAtomCompiled");
		DebugLocation(382, 1);
		try
		{
			// Language\\ActionEvaluator.g3:383:2: ( exprCompiled[$gen] )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:383:4: exprCompiled[$gen]
			{
			DebugLocation(383, 4);
			PushFollow(Follow._exprCompiled_in_ifAtomCompiled985);
			exprCompiled(gen);
			PopFollow();

			DebugLocation(384, 3);

			#if COMPILE_EXPRESSIONS
						EmitTest(gen);
			#endif
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifAtomCompiled", 19);
			LeaveRule("ifAtomCompiled", 19);
			LeaveRule_ifAtomCompiled();
		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "ifAtomCompiled"); }
		return;

	}
	// $ANTLR end "ifAtomCompiled"

	partial void EnterRule_ifAtomFunctional();
	partial void LeaveRule_ifAtomFunctional();
	// $ANTLR start "ifAtomFunctional"
	// Language\\ActionEvaluator.g3:391:1: ifAtomFunctional returns [System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,bool> func] : exprFunctional ;
	[GrammarRule("ifAtomFunctional")]
	private System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,bool> ifAtomFunctional()
	{
		EnterRule_ifAtomFunctional();
		EnterRule("ifAtomFunctional", 20);
		TraceIn("ifAtomFunctional", 20);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,bool> func = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,bool>);


		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> exprFunctional19 = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);

		try { DebugEnterRule(GrammarFileName, "ifAtomFunctional");
		DebugLocation(391, 1);
		try
		{
			// Language\\ActionEvaluator.g3:392:2: ( exprFunctional )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:392:4: exprFunctional
			{
			DebugLocation(392, 4);
			PushFollow(Follow._exprFunctional_in_ifAtomFunctional1005);
			exprFunctional19=exprFunctional();
			PopFollow();

			DebugLocation(393, 3);

			#if COMPILE_EXPRESSIONS
						func = (chunk,self,writer) => chunk.TestAttributeTrue(exprFunctional19(chunk,self,writer));
			#endif
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifAtomFunctional", 20);
			LeaveRule("ifAtomFunctional", 20);
			LeaveRule_ifAtomFunctional();
		}
		DebugLocation(398, 1);
		} finally { DebugExitRule(GrammarFileName, "ifAtomFunctional"); }
		return func;

	}
	// $ANTLR end "ifAtomFunctional"

	partial void EnterRule_exprCompiled();
	partial void LeaveRule_exprCompiled();
	// $ANTLR start "exprCompiled"
	// Language\\ActionEvaluator.g3:400:1: exprCompiled[System.Reflection.Emit.ILGenerator gen] : ( ^( PLUS exprCompiled[$gen] exprCompiled[$gen] ) | templateApplicationCompiled[$gen] | attributeCompiled[$gen] | templateIncludeCompiled[$gen] | functionCompiled[$gen] | listCompiled[$gen] | ^( VALUE exprCompiled[$gen] ) );
	[GrammarRule("exprCompiled")]
	private void exprCompiled(System.Reflection.Emit.ILGenerator gen)
	{
		EnterRule_exprCompiled();
		EnterRule("exprCompiled", 21);
		TraceIn("exprCompiled", 21);
		try { DebugEnterRule(GrammarFileName, "exprCompiled");
		DebugLocation(400, 1);
		try
		{
			// Language\\ActionEvaluator.g3:401:2: ( ^( PLUS exprCompiled[$gen] exprCompiled[$gen] ) | templateApplicationCompiled[$gen] | attributeCompiled[$gen] | templateIncludeCompiled[$gen] | functionCompiled[$gen] | listCompiled[$gen] | ^( VALUE exprCompiled[$gen] ) )
			int alt17=7;
			try { DebugEnterDecision(17, false);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt17 = 1;
				}
				break;
			case APPLY:
			case MULTI_APPLY:
				{
				alt17 = 2;
				}
				break;
			case ANONYMOUS_TEMPLATE:
			case DOT:
			case ID:
			case INT:
			case STRING:
				{
				alt17 = 3;
				}
				break;
			case INCLUDE:
				{
				alt17 = 4;
				}
				break;
			case FUNCTION:
				{
				alt17 = 5;
				}
				break;
			case LIST:
				{
				alt17 = 6;
				}
				break;
			case VALUE:
				{
				alt17 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:401:4: ^( PLUS exprCompiled[$gen] exprCompiled[$gen] )
				{
				DebugLocation(401, 4);
				DebugLocation(401, 6);
				Match(input,PLUS,Follow._PLUS_in_exprCompiled1022); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(401, 11);
				PushFollow(Follow._exprCompiled_in_exprCompiled1024);
				exprCompiled(gen);
				PopFollow();

				DebugLocation(401, 30);
				PushFollow(Follow._exprCompiled_in_exprCompiled1027);
				exprCompiled(gen);
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(402, 3);

				#if COMPILE_EXPRESSIONS
							EmitAdd(gen);
				#endif
						

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:407:4: templateApplicationCompiled[$gen]
				{
				DebugLocation(407, 4);
				PushFollow(Follow._templateApplicationCompiled_in_exprCompiled1038);
				templateApplicationCompiled(gen);
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Language\\ActionEvaluator.g3:408:4: attributeCompiled[$gen]
				{
				DebugLocation(408, 4);
				PushFollow(Follow._attributeCompiled_in_exprCompiled1044);
				attributeCompiled(gen);
				PopFollow();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Language\\ActionEvaluator.g3:409:4: templateIncludeCompiled[$gen]
				{
				DebugLocation(409, 4);
				PushFollow(Follow._templateIncludeCompiled_in_exprCompiled1050);
				templateIncludeCompiled(gen);
				PopFollow();


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Language\\ActionEvaluator.g3:410:4: functionCompiled[$gen]
				{
				DebugLocation(410, 4);
				PushFollow(Follow._functionCompiled_in_exprCompiled1056);
				functionCompiled(gen);
				PopFollow();


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Language\\ActionEvaluator.g3:411:4: listCompiled[$gen]
				{
				DebugLocation(411, 4);
				PushFollow(Follow._listCompiled_in_exprCompiled1062);
				listCompiled(gen);
				PopFollow();


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Language\\ActionEvaluator.g3:412:4: ^( VALUE exprCompiled[$gen] )
				{
				DebugLocation(412, 4);
				DebugLocation(412, 6);
				Match(input,VALUE,Follow._VALUE_in_exprCompiled1069); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(412, 12);
				PushFollow(Follow._exprCompiled_in_exprCompiled1071);
				exprCompiled(gen);
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(413, 3);

				#if COMPILE_EXPRESSIONS
							EmitWriteToString(gen);
				#endif
						

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exprCompiled", 21);
			LeaveRule("exprCompiled", 21);
			LeaveRule_exprCompiled();
		}
		DebugLocation(418, 1);
		} finally { DebugExitRule(GrammarFileName, "exprCompiled"); }
		return;

	}
	// $ANTLR end "exprCompiled"

	partial void EnterRule_exprFunctional();
	partial void LeaveRule_exprFunctional();
	// $ANTLR start "exprFunctional"
	// Language\\ActionEvaluator.g3:420:1: exprFunctional returns [System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> func] : ( ^( PLUS a= exprFunctional b= exprFunctional ) | templateApplicationFunctional | attributeFunctional | templateIncludeFunctional | functionFunctional | listFunctional | ^( VALUE a= exprFunctional ) );
	[GrammarRule("exprFunctional")]
	private System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> exprFunctional()
	{
		EnterRule_exprFunctional();
		EnterRule("exprFunctional", 22);
		TraceIn("exprFunctional", 22);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> func = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);


		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> a = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> b = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> templateApplicationFunctional20 = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> attributeFunctional21 = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> templateIncludeFunctional22 = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> functionFunctional23 = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> listFunctional24 = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);

		try { DebugEnterRule(GrammarFileName, "exprFunctional");
		DebugLocation(420, 1);
		try
		{
			// Language\\ActionEvaluator.g3:421:2: ( ^( PLUS a= exprFunctional b= exprFunctional ) | templateApplicationFunctional | attributeFunctional | templateIncludeFunctional | functionFunctional | listFunctional | ^( VALUE a= exprFunctional ) )
			int alt18=7;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt18 = 1;
				}
				break;
			case APPLY:
			case MULTI_APPLY:
				{
				alt18 = 2;
				}
				break;
			case ANONYMOUS_TEMPLATE:
			case DOT:
			case ID:
			case INT:
			case STRING:
				{
				alt18 = 3;
				}
				break;
			case INCLUDE:
				{
				alt18 = 4;
				}
				break;
			case FUNCTION:
				{
				alt18 = 5;
				}
				break;
			case LIST:
				{
				alt18 = 6;
				}
				break;
			case VALUE:
				{
				alt18 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:421:4: ^( PLUS a= exprFunctional b= exprFunctional )
				{
				DebugLocation(421, 4);
				DebugLocation(421, 6);
				Match(input,PLUS,Follow._PLUS_in_exprFunctional1093); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(421, 12);
				PushFollow(Follow._exprFunctional_in_exprFunctional1097);
				a=exprFunctional();
				PopFollow();

				DebugLocation(421, 29);
				PushFollow(Follow._exprFunctional_in_exprFunctional1101);
				b=exprFunctional();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(422, 3);

				#if COMPILE_EXPRESSIONS
							func = (chunk,self,writer) => chunk.Add(a(chunk,self,writer),b(chunk,self,writer));
				#endif
						

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:427:4: templateApplicationFunctional
				{
				DebugLocation(427, 4);
				PushFollow(Follow._templateApplicationFunctional_in_exprFunctional1111);
				templateApplicationFunctional20=templateApplicationFunctional();
				PopFollow();

				DebugLocation(428, 3);

				#if COMPILE_EXPRESSIONS
							func = templateApplicationFunctional20;
				#endif
						

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Language\\ActionEvaluator.g3:433:4: attributeFunctional
				{
				DebugLocation(433, 4);
				PushFollow(Follow._attributeFunctional_in_exprFunctional1120);
				attributeFunctional21=attributeFunctional();
				PopFollow();

				DebugLocation(434, 3);

				#if COMPILE_EXPRESSIONS
							func = attributeFunctional21;
				#endif
						

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Language\\ActionEvaluator.g3:439:4: templateIncludeFunctional
				{
				DebugLocation(439, 4);
				PushFollow(Follow._templateIncludeFunctional_in_exprFunctional1129);
				templateIncludeFunctional22=templateIncludeFunctional();
				PopFollow();

				DebugLocation(440, 3);

				#if COMPILE_EXPRESSIONS
							func = templateIncludeFunctional22;
				#endif
						

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Language\\ActionEvaluator.g3:445:4: functionFunctional
				{
				DebugLocation(445, 4);
				PushFollow(Follow._functionFunctional_in_exprFunctional1138);
				functionFunctional23=functionFunctional();
				PopFollow();

				DebugLocation(446, 3);

				#if COMPILE_EXPRESSIONS
							func = functionFunctional23;
				#endif
						

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Language\\ActionEvaluator.g3:451:4: listFunctional
				{
				DebugLocation(451, 4);
				PushFollow(Follow._listFunctional_in_exprFunctional1147);
				listFunctional24=listFunctional();
				PopFollow();

				DebugLocation(452, 3);

				#if COMPILE_EXPRESSIONS
							func = listFunctional24;
				#endif
						

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Language\\ActionEvaluator.g3:457:4: ^( VALUE a= exprFunctional )
				{
				DebugLocation(457, 4);
				DebugLocation(457, 6);
				Match(input,VALUE,Follow._VALUE_in_exprFunctional1157); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(457, 13);
				PushFollow(Follow._exprFunctional_in_exprFunctional1161);
				a=exprFunctional();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(458, 3);

				#if COMPILE_EXPRESSIONS
							func = (chunk,self,writer) =>
								{
									var value = a(chunk,self,writer);
									StringWriter buf = new StringWriter();
									IStringTemplateWriter sw = self.Group.GetStringTemplateWriter( buf );
									int n = chunk.WriteAttribute( self, value, sw );
									if ( n > 0 )
										return buf.ToString();
									return value;
								};
				#endif
						

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exprFunctional", 22);
			LeaveRule("exprFunctional", 22);
			LeaveRule_exprFunctional();
		}
		DebugLocation(472, 1);
		} finally { DebugExitRule(GrammarFileName, "exprFunctional"); }
		return func;

	}
	// $ANTLR end "exprFunctional"

	partial void EnterRule_templateApplicationCompiled();
	partial void LeaveRule_templateApplicationCompiled();
	// $ANTLR start "templateApplicationCompiled"
	// Language\\ActionEvaluator.g3:474:1: templateApplicationCompiled[System.Reflection.Emit.ILGenerator gen] : ( ^( APPLY exprCompiled[$gen] ( templateCompiled[$gen] )+ ) | ^( MULTI_APPLY ( exprCompiled[$gen] )+ COLON ANONYMOUS_TEMPLATE ) );
	[GrammarRule("templateApplicationCompiled")]
	private void templateApplicationCompiled(System.Reflection.Emit.ILGenerator gen)
	{
		EnterRule_templateApplicationCompiled();
		EnterRule("templateApplicationCompiled", 23);
		TraceIn("templateApplicationCompiled", 23);
		StringTemplateAST ANONYMOUS_TEMPLATE25 = default(StringTemplateAST);


		#if COMPILE_EXPRESSIONS
			System.Reflection.Emit.LocalBuilder templates = null;
			System.Reflection.Emit.LocalBuilder attributes = null;
		#endif

		try { DebugEnterRule(GrammarFileName, "templateApplicationCompiled");
		DebugLocation(474, 1);
		try
		{
			// Language\\ActionEvaluator.g3:482:2: ( ^( APPLY exprCompiled[$gen] ( templateCompiled[$gen] )+ ) | ^( MULTI_APPLY ( exprCompiled[$gen] )+ COLON ANONYMOUS_TEMPLATE ) )
			int alt21=2;
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==APPLY))
			{
				alt21 = 1;
			}
			else if ((LA21_1==MULTI_APPLY))
			{
				alt21 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:482:4: ^( APPLY exprCompiled[$gen] ( templateCompiled[$gen] )+ )
				{
				DebugLocation(482, 4);
				DebugLocation(482, 7);
				Match(input,APPLY,Follow._APPLY_in_templateApplicationCompiled1185); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(482, 13);
				PushFollow(Follow._exprCompiled_in_templateApplicationCompiled1187);
				exprCompiled(gen);
				PopFollow();

				DebugLocation(483, 4);

				#if COMPILE_EXPRESSIONS
								templates = EmitCreateList<StringTemplate>(gen);
				#endif
							
				DebugLocation(488, 4);
				// Language\\ActionEvaluator.g3:488:4: ( templateCompiled[$gen] )+
				int cnt19=0;
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_1 = input.LA(1);

					if ((LA19_1==TEMPLATE))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// Language\\ActionEvaluator.g3:488:6: templateCompiled[$gen]
						{
						DebugLocation(488, 6);
						PushFollow(Follow._templateCompiled_in_templateApplicationCompiled1200);
						templateCompiled(gen);
						PopFollow();

						DebugLocation(489, 5);

						#if COMPILE_EXPRESSIONS
											EmitAddValueToList(gen, templates);
						#endif
										

						}
						break;

					default:
						if (cnt19 >= 1)
							goto loop19;

						EarlyExitException eee19 = new EarlyExitException( 19, input );
						DebugRecognitionException(eee19);
						throw eee19;
					}
					cnt19++;
				}
				loop19:
					;

				} finally { DebugExitSubRule(19); }

				DebugLocation(495, 4);

				#if COMPILE_EXPRESSIONS
								EmitApplyAlternatingTemplates( gen, templates );
				#endif
							

				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:501:4: ^( MULTI_APPLY ( exprCompiled[$gen] )+ COLON ANONYMOUS_TEMPLATE )
				{
				DebugLocation(501, 4);
				DebugLocation(501, 7);
				Match(input,MULTI_APPLY,Follow._MULTI_APPLY_in_templateApplicationCompiled1229); 

				DebugLocation(502, 4);

				#if COMPILE_EXPRESSIONS
								attributes = EmitCreateList<object>(gen);
				#endif
							

				Match(input, TokenTypes.Down, null); 
				DebugLocation(507, 4);
				// Language\\ActionEvaluator.g3:507:4: ( exprCompiled[$gen] )+
				int cnt20=0;
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_1 = input.LA(1);

					if (((LA20_1>=ANONYMOUS_TEMPLATE && LA20_1<=APPLY)||LA20_1==DOT||(LA20_1>=FUNCTION && LA20_1<=INT)||LA20_1==LIST||LA20_1==MULTI_APPLY||LA20_1==PLUS||LA20_1==STRING||LA20_1==VALUE))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// Language\\ActionEvaluator.g3:507:6: exprCompiled[$gen]
						{
						DebugLocation(507, 6);
						PushFollow(Follow._exprCompiled_in_templateApplicationCompiled1241);
						exprCompiled(gen);
						PopFollow();

						DebugLocation(508, 5);

						#if COMPILE_EXPRESSIONS
											EmitAddValueToList(gen, attributes);
						#endif
										

						}
						break;

					default:
						if (cnt20 >= 1)
							goto loop20;

						EarlyExitException eee20 = new EarlyExitException( 20, input );
						DebugRecognitionException(eee20);
						throw eee20;
					}
					cnt20++;
				}
				loop20:
					;

				} finally { DebugExitSubRule(20); }

				DebugLocation(514, 4);
				Match(input,COLON,Follow._COLON_in_templateApplicationCompiled1259); 
				DebugLocation(515, 4);
				ANONYMOUS_TEMPLATE25=(StringTemplateAST)Match(input,ANONYMOUS_TEMPLATE,Follow._ANONYMOUS_TEMPLATE_in_templateApplicationCompiled1264); 
				DebugLocation(516, 4);

				#if COMPILE_EXPRESSIONS
								EmitApplyAnonymousTemplate( gen, ANONYMOUS_TEMPLATE25.StringTemplate, attributes );
				#endif
							

				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("templateApplicationCompiled", 23);
			LeaveRule("templateApplicationCompiled", 23);
			LeaveRule_templateApplicationCompiled();
		}
		DebugLocation(522, 1);
		} finally { DebugExitRule(GrammarFileName, "templateApplicationCompiled"); }
		return;

	}
	// $ANTLR end "templateApplicationCompiled"

	partial void EnterRule_templateApplicationFunctional();
	partial void LeaveRule_templateApplicationFunctional();
	// $ANTLR start "templateApplicationFunctional"
	// Language\\ActionEvaluator.g3:524:1: templateApplicationFunctional returns [System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> func] : ( ^( APPLY a= exprFunctional ( templateFunctional[templateApplicators] )+ ) | ^( MULTI_APPLY (a= exprFunctional )+ COLON ANONYMOUS_TEMPLATE ) );
	[GrammarRule("templateApplicationFunctional")]
	private System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> templateApplicationFunctional()
	{
		EnterRule_templateApplicationFunctional();
		EnterRule("templateApplicationFunctional", 24);
		TraceIn("templateApplicationFunctional", 24);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> func = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);


		StringTemplateAST ANONYMOUS_TEMPLATE26 = default(StringTemplateAST);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> a = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);


			var  templateApplicators = new List<System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,StringTemplate>>();
		#if COMPILE_EXPRESSIONS
			List<System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>> attributes = new List<System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>>();
		#endif

		try { DebugEnterRule(GrammarFileName, "templateApplicationFunctional");
		DebugLocation(524, 1);
		try
		{
			// Language\\ActionEvaluator.g3:532:2: ( ^( APPLY a= exprFunctional ( templateFunctional[templateApplicators] )+ ) | ^( MULTI_APPLY (a= exprFunctional )+ COLON ANONYMOUS_TEMPLATE ) )
			int alt24=2;
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==APPLY))
			{
				alt24 = 1;
			}
			else if ((LA24_1==MULTI_APPLY))
			{
				alt24 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:532:4: ^( APPLY a= exprFunctional ( templateFunctional[templateApplicators] )+ )
				{
				DebugLocation(532, 4);
				DebugLocation(532, 7);
				Match(input,APPLY,Follow._APPLY_in_templateApplicationFunctional1295); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(532, 14);
				PushFollow(Follow._exprFunctional_in_templateApplicationFunctional1299);
				a=exprFunctional();
				PopFollow();

				DebugLocation(533, 4);
				// Language\\ActionEvaluator.g3:533:4: ( templateFunctional[templateApplicators] )+
				int cnt22=0;
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_1 = input.LA(1);

					if ((LA22_1==TEMPLATE))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// Language\\ActionEvaluator.g3:533:5: templateFunctional[templateApplicators]
						{
						DebugLocation(533, 5);
						PushFollow(Follow._templateFunctional_in_templateApplicationFunctional1305);
						templateFunctional(templateApplicators);
						PopFollow();


						}
						break;

					default:
						if (cnt22 >= 1)
							goto loop22;

						EarlyExitException eee22 = new EarlyExitException( 22, input );
						DebugRecognitionException(eee22);
						throw eee22;
					}
					cnt22++;
				}
				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(534, 4);

				#if COMPILE_EXPRESSIONS
								func = (chunk,self,writer) =>
									{
										var templatesToApply =	( from applicator in templateApplicators
																  let st = applicator(chunk,self,writer)
																  where st != null
																  select st )
																.ToList();
										return chunk.ApplyListOfAlternatingTemplates( self, a(chunk,self,writer), templatesToApply );
									};
				#endif
							

				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:548:4: ^( MULTI_APPLY (a= exprFunctional )+ COLON ANONYMOUS_TEMPLATE )
				{
				DebugLocation(548, 4);
				DebugLocation(548, 7);
				Match(input,MULTI_APPLY,Follow._MULTI_APPLY_in_templateApplicationFunctional1324); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(549, 4);
				// Language\\ActionEvaluator.g3:549:4: (a= exprFunctional )+
				int cnt23=0;
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_1 = input.LA(1);

					if (((LA23_1>=ANONYMOUS_TEMPLATE && LA23_1<=APPLY)||LA23_1==DOT||(LA23_1>=FUNCTION && LA23_1<=INT)||LA23_1==LIST||LA23_1==MULTI_APPLY||LA23_1==PLUS||LA23_1==STRING||LA23_1==VALUE))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch (alt23)
					{
					case 1:
						DebugEnterAlt(1);
						// Language\\ActionEvaluator.g3:549:6: a= exprFunctional
						{
						DebugLocation(549, 7);
						PushFollow(Follow._exprFunctional_in_templateApplicationFunctional1333);
						a=exprFunctional();
						PopFollow();

						DebugLocation(550, 5);

						#if COMPILE_EXPRESSIONS
											attributes.Add(a);
						#endif
										

						}
						break;

					default:
						if (cnt23 >= 1)
							goto loop23;

						EarlyExitException eee23 = new EarlyExitException( 23, input );
						DebugRecognitionException(eee23);
						throw eee23;
					}
					cnt23++;
				}
				loop23:
					;

				} finally { DebugExitSubRule(23); }

				DebugLocation(556, 4);
				Match(input,COLON,Follow._COLON_in_templateApplicationFunctional1350); 
				DebugLocation(556, 10);
				ANONYMOUS_TEMPLATE26=(StringTemplateAST)Match(input,ANONYMOUS_TEMPLATE,Follow._ANONYMOUS_TEMPLATE_in_templateApplicationFunctional1352); 
				DebugLocation(557, 4);

				#if COMPILE_EXPRESSIONS
								StringTemplate anonymous = ANONYMOUS_TEMPLATE26.StringTemplate;
								func = (chunk,self,writer) =>
									{
										var attr =	from f in attributes
													select f(chunk,self,writer);
										return chunk.ApplyTemplateToListOfAttributes( self, attr.ToList(), anonymous );
									};
				#endif
							

				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("templateApplicationFunctional", 24);
			LeaveRule("templateApplicationFunctional", 24);
			LeaveRule_templateApplicationFunctional();
		}
		DebugLocation(569, 1);
		} finally { DebugExitRule(GrammarFileName, "templateApplicationFunctional"); }
		return func;

	}
	// $ANTLR end "templateApplicationFunctional"

	partial void EnterRule_attributeCompiled();
	partial void LeaveRule_attributeCompiled();
	// $ANTLR start "attributeCompiled"
	// Language\\ActionEvaluator.g3:571:1: attributeCompiled[System.Reflection.Emit.ILGenerator gen] : ( ^( DOT exprCompiled[$gen] (id= ID | ^( VALUE exprCompiled[$gen] ) ) ) |id= ID | INT | STRING | ANONYMOUS_TEMPLATE );
	[GrammarRule("attributeCompiled")]
	private void attributeCompiled(System.Reflection.Emit.ILGenerator gen)
	{
		EnterRule_attributeCompiled();
		EnterRule("attributeCompiled", 25);
		TraceIn("attributeCompiled", 25);
		StringTemplateAST id = default(StringTemplateAST);
		StringTemplateAST INT27 = default(StringTemplateAST);
		StringTemplateAST STRING28 = default(StringTemplateAST);
		StringTemplateAST ANONYMOUS_TEMPLATE29 = default(StringTemplateAST);

		try { DebugEnterRule(GrammarFileName, "attributeCompiled");
		DebugLocation(571, 1);
		try
		{
			// Language\\ActionEvaluator.g3:572:2: ( ^( DOT exprCompiled[$gen] (id= ID | ^( VALUE exprCompiled[$gen] ) ) ) |id= ID | INT | STRING | ANONYMOUS_TEMPLATE )
			int alt26=5;
			try { DebugEnterDecision(26, false);
			switch (input.LA(1))
			{
			case DOT:
				{
				alt26 = 1;
				}
				break;
			case ID:
				{
				alt26 = 2;
				}
				break;
			case INT:
				{
				alt26 = 3;
				}
				break;
			case STRING:
				{
				alt26 = 4;
				}
				break;
			case ANONYMOUS_TEMPLATE:
				{
				alt26 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:572:4: ^( DOT exprCompiled[$gen] (id= ID | ^( VALUE exprCompiled[$gen] ) ) )
				{
				DebugLocation(572, 4);
				DebugLocation(572, 7);
				Match(input,DOT,Follow._DOT_in_attributeCompiled1375); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(572, 11);
				PushFollow(Follow._exprCompiled_in_attributeCompiled1377);
				exprCompiled(gen);
				PopFollow();

				DebugLocation(573, 4);
				// Language\\ActionEvaluator.g3:573:4: (id= ID | ^( VALUE exprCompiled[$gen] ) )
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==ID))
				{
					alt25 = 1;
				}
				else if ((LA25_1==VALUE))
				{
					alt25 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// Language\\ActionEvaluator.g3:573:6: id= ID
					{
					DebugLocation(573, 8);
					id=(StringTemplateAST)Match(input,ID,Follow._ID_in_attributeCompiled1387); 
					DebugLocation(574, 5);

					#if COMPILE_EXPRESSIONS
										EmitLoadString(gen,(id!=null?id.Text:default(string)));
					#endif
									

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Language\\ActionEvaluator.g3:579:6: ^( VALUE exprCompiled[$gen] )
					{
					DebugLocation(579, 6);
					DebugLocation(579, 8);
					Match(input,VALUE,Follow._VALUE_in_attributeCompiled1401); 

					Match(input, TokenTypes.Down, null); 
					DebugLocation(579, 14);
					PushFollow(Follow._exprCompiled_in_attributeCompiled1403);
					exprCompiled(gen);
					PopFollow();


					Match(input, TokenTypes.Up, null); 


					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(581, 4);

				#if COMPILE_EXPRESSIONS
								EmitObjectProperty(gen);
				#endif
							

				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:588:4: id= ID
				{
				DebugLocation(588, 6);
				id=(StringTemplateAST)Match(input,ID,Follow._ID_in_attributeCompiled1427); 
				DebugLocation(589, 3);

				#if COMPILE_EXPRESSIONS
							EmitAttribute(gen,(id!=null?id.Text:default(string)));
				#endif
						

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Language\\ActionEvaluator.g3:595:4: INT
				{
				DebugLocation(595, 4);
				INT27=(StringTemplateAST)Match(input,INT,Follow._INT_in_attributeCompiled1437); 
				DebugLocation(596, 3);

				#if COMPILE_EXPRESSIONS
							EmitLoadIntAsObject(gen,int.Parse((INT27!=null?INT27.Text:default(string))));
				#endif
						

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Language\\ActionEvaluator.g3:602:4: STRING
				{
				DebugLocation(602, 4);
				STRING28=(StringTemplateAST)Match(input,STRING,Follow._STRING_in_attributeCompiled1447); 
				DebugLocation(603, 3);

				#if COMPILE_EXPRESSIONS
							EmitLoadString(gen,(STRING28!=null?STRING28.Text:default(string)));
				#endif
						

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Language\\ActionEvaluator.g3:609:4: ANONYMOUS_TEMPLATE
				{
				DebugLocation(609, 4);
				ANONYMOUS_TEMPLATE29=(StringTemplateAST)Match(input,ANONYMOUS_TEMPLATE,Follow._ANONYMOUS_TEMPLATE_in_attributeCompiled1457); 
				DebugLocation(610, 3);

				#if COMPILE_EXPRESSIONS
							EmitAnonymousTemplate(gen,(ANONYMOUS_TEMPLATE29!=null?ANONYMOUS_TEMPLATE29.Text:default(string)));
				#endif
						

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attributeCompiled", 25);
			LeaveRule("attributeCompiled", 25);
			LeaveRule_attributeCompiled();
		}
		DebugLocation(615, 1);
		} finally { DebugExitRule(GrammarFileName, "attributeCompiled"); }
		return;

	}
	// $ANTLR end "attributeCompiled"

	partial void EnterRule_attributeFunctional();
	partial void LeaveRule_attributeFunctional();
	// $ANTLR start "attributeFunctional"
	// Language\\ActionEvaluator.g3:617:1: attributeFunctional returns [System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> func] : ( ^( DOT a= exprFunctional (id= ID | ^( VALUE b= exprFunctional ) ) ) |id= ID | INT | STRING | ANONYMOUS_TEMPLATE );
	[GrammarRule("attributeFunctional")]
	private System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> attributeFunctional()
	{
		EnterRule_attributeFunctional();
		EnterRule("attributeFunctional", 26);
		TraceIn("attributeFunctional", 26);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> func = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);


		StringTemplateAST id = default(StringTemplateAST);
		StringTemplateAST INT30 = default(StringTemplateAST);
		StringTemplateAST STRING31 = default(StringTemplateAST);
		StringTemplateAST ANONYMOUS_TEMPLATE32 = default(StringTemplateAST);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> a = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> b = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);

		try { DebugEnterRule(GrammarFileName, "attributeFunctional");
		DebugLocation(617, 1);
		try
		{
			// Language\\ActionEvaluator.g3:618:2: ( ^( DOT a= exprFunctional (id= ID | ^( VALUE b= exprFunctional ) ) ) |id= ID | INT | STRING | ANONYMOUS_TEMPLATE )
			int alt28=5;
			try { DebugEnterDecision(28, false);
			switch (input.LA(1))
			{
			case DOT:
				{
				alt28 = 1;
				}
				break;
			case ID:
				{
				alt28 = 2;
				}
				break;
			case INT:
				{
				alt28 = 3;
				}
				break;
			case STRING:
				{
				alt28 = 4;
				}
				break;
			case ANONYMOUS_TEMPLATE:
				{
				alt28 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 28, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:618:4: ^( DOT a= exprFunctional (id= ID | ^( VALUE b= exprFunctional ) ) )
				{
				DebugLocation(618, 4);
				DebugLocation(618, 7);
				Match(input,DOT,Follow._DOT_in_attributeFunctional1478); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(618, 12);
				PushFollow(Follow._exprFunctional_in_attributeFunctional1482);
				a=exprFunctional();
				PopFollow();

				DebugLocation(619, 4);
				// Language\\ActionEvaluator.g3:619:4: (id= ID | ^( VALUE b= exprFunctional ) )
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==ID))
				{
					alt27 = 1;
				}
				else if ((LA27_1==VALUE))
				{
					alt27 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// Language\\ActionEvaluator.g3:619:6: id= ID
					{
					DebugLocation(619, 8);
					id=(StringTemplateAST)Match(input,ID,Follow._ID_in_attributeFunctional1491); 
					DebugLocation(620, 5);

					#if COMPILE_EXPRESSIONS
										string text = (id!=null?id.Text:default(string));
										func = (chunk,self,writer) => chunk.GetObjectProperty( self, a(chunk,self,writer), text );
					#endif
									

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Language\\ActionEvaluator.g3:626:6: ^( VALUE b= exprFunctional )
					{
					DebugLocation(626, 6);
					DebugLocation(626, 8);
					Match(input,VALUE,Follow._VALUE_in_attributeFunctional1505); 

					Match(input, TokenTypes.Down, null); 
					DebugLocation(626, 15);
					PushFollow(Follow._exprFunctional_in_attributeFunctional1509);
					b=exprFunctional();
					PopFollow();


					Match(input, TokenTypes.Up, null); 

					DebugLocation(627, 5);

					#if COMPILE_EXPRESSIONS
										func = (chunk,self,writer) => chunk.GetObjectProperty( self, a(chunk,self,writer), b(chunk,self,writer) );
					#endif
									

					}
					break;

				}
				} finally { DebugExitSubRule(27); }


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:635:4: id= ID
				{
				DebugLocation(635, 6);
				id=(StringTemplateAST)Match(input,ID,Follow._ID_in_attributeFunctional1533); 
				DebugLocation(636, 3);

				#if COMPILE_EXPRESSIONS
							string text = (id!=null?id.Text:default(string));
							func = (chunk,self,writer) => self.GetAttribute( text );
				#endif
						

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Language\\ActionEvaluator.g3:643:4: INT
				{
				DebugLocation(643, 4);
				INT30=(StringTemplateAST)Match(input,INT,Follow._INT_in_attributeFunctional1543); 
				DebugLocation(644, 3);

				#if COMPILE_EXPRESSIONS
							int i = int.Parse((INT30!=null?INT30.Text:default(string)));
							func = (chunk,self,writer) => i;
				#endif
						

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Language\\ActionEvaluator.g3:651:4: STRING
				{
				DebugLocation(651, 4);
				STRING31=(StringTemplateAST)Match(input,STRING,Follow._STRING_in_attributeFunctional1553); 
				DebugLocation(652, 3);

				#if COMPILE_EXPRESSIONS
							string text = (STRING31!=null?STRING31.Text:default(string));
							func = (chunk,self,writer) => text;
				#endif
						

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Language\\ActionEvaluator.g3:659:4: ANONYMOUS_TEMPLATE
				{
				DebugLocation(659, 4);
				ANONYMOUS_TEMPLATE32=(StringTemplateAST)Match(input,ANONYMOUS_TEMPLATE,Follow._ANONYMOUS_TEMPLATE_in_attributeFunctional1563); 
				DebugLocation(660, 3);

				#if COMPILE_EXPRESSIONS
							string text = (ANONYMOUS_TEMPLATE32!=null?ANONYMOUS_TEMPLATE32.Text:default(string));
							if ( text != null )
							{
								func = (chunk,self,writer) =>
									new StringTemplate( self.Group, text )
									{
										EnclosingInstance = self,
										Name = "<anonymous template argument>"
									};
							}
							else
							{
								func = (chunk,self,writer) => null;
							}
				#endif
						

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attributeFunctional", 26);
			LeaveRule("attributeFunctional", 26);
			LeaveRule_attributeFunctional();
		}
		DebugLocation(678, 1);
		} finally { DebugExitRule(GrammarFileName, "attributeFunctional"); }
		return func;

	}
	// $ANTLR end "attributeFunctional"

	partial void EnterRule_templateIncludeCompiled();
	partial void LeaveRule_templateIncludeCompiled();
	// $ANTLR start "templateIncludeCompiled"
	// Language\\ActionEvaluator.g3:680:1: templateIncludeCompiled[System.Reflection.Emit.ILGenerator gen] : ^( INCLUDE ( ID args= . | ^( VALUE exprCompiled[$gen] args= . ) ) ) ;
	[GrammarRule("templateIncludeCompiled")]
	private void templateIncludeCompiled(System.Reflection.Emit.ILGenerator gen)
	{
		EnterRule_templateIncludeCompiled();
		EnterRule("templateIncludeCompiled", 27);
		TraceIn("templateIncludeCompiled", 27);
		StringTemplateAST ID33 = default(StringTemplateAST);
		StringTemplateAST args = default(StringTemplateAST);

		try { DebugEnterRule(GrammarFileName, "templateIncludeCompiled");
		DebugLocation(680, 1);
		try
		{
			// Language\\ActionEvaluator.g3:681:2: ( ^( INCLUDE ( ID args= . | ^( VALUE exprCompiled[$gen] args= . ) ) ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:681:4: ^( INCLUDE ( ID args= . | ^( VALUE exprCompiled[$gen] args= . ) ) )
			{
			DebugLocation(681, 4);
			DebugLocation(681, 7);
			Match(input,INCLUDE,Follow._INCLUDE_in_templateIncludeCompiled1581); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(682, 4);
			// Language\\ActionEvaluator.g3:682:4: ( ID args= . | ^( VALUE exprCompiled[$gen] args= . ) )
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==ID))
			{
				alt29 = 1;
			}
			else if ((LA29_1==VALUE))
			{
				alt29 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 29, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:682:6: ID args= .
				{
				DebugLocation(682, 6);
				ID33=(StringTemplateAST)Match(input,ID,Follow._ID_in_templateIncludeCompiled1588); 
				DebugLocation(682, 13);

				args=(StringTemplateAST)input.LT(1);

				MatchAny(input); 
				DebugLocation(683, 5);

				#if COMPILE_EXPRESSIONS
									EmitLoadString( gen, (ID33!=null?ID33.Text:default(string)) );
				#endif
								

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:688:6: ^( VALUE exprCompiled[$gen] args= . )
				{
				DebugLocation(688, 6);
				DebugLocation(688, 9);
				Match(input,VALUE,Follow._VALUE_in_templateIncludeCompiled1607); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(688, 15);
				PushFollow(Follow._exprCompiled_in_templateIncludeCompiled1609);
				exprCompiled(gen);
				PopFollow();

				DebugLocation(688, 38);

				args=(StringTemplateAST)input.LT(1);

				MatchAny(input); 

				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
			} finally { DebugExitSubRule(29); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(691, 3);

			#if COMPILE_EXPRESSIONS
						EmitTemplateInclude( gen, args );
			#endif
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("templateIncludeCompiled", 27);
			LeaveRule("templateIncludeCompiled", 27);
			LeaveRule_templateIncludeCompiled();
		}
		DebugLocation(696, 1);
		} finally { DebugExitRule(GrammarFileName, "templateIncludeCompiled"); }
		return;

	}
	// $ANTLR end "templateIncludeCompiled"

	partial void EnterRule_templateIncludeFunctional();
	partial void LeaveRule_templateIncludeFunctional();
	// $ANTLR start "templateIncludeFunctional"
	// Language\\ActionEvaluator.g3:698:1: templateIncludeFunctional returns [System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> func] : ^( INCLUDE ( ID args= . | ^( VALUE exprFunctional args= . ) ) ) ;
	[GrammarRule("templateIncludeFunctional")]
	private System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> templateIncludeFunctional()
	{
		EnterRule_templateIncludeFunctional();
		EnterRule("templateIncludeFunctional", 28);
		TraceIn("templateIncludeFunctional", 28);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> func = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);


		StringTemplateAST ID34 = default(StringTemplateAST);
		StringTemplateAST args = default(StringTemplateAST);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> exprFunctional35 = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);

		try { DebugEnterRule(GrammarFileName, "templateIncludeFunctional");
		DebugLocation(698, 1);
		try
		{
			// Language\\ActionEvaluator.g3:699:2: ( ^( INCLUDE ( ID args= . | ^( VALUE exprFunctional args= . ) ) ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:699:4: ^( INCLUDE ( ID args= . | ^( VALUE exprFunctional args= . ) ) )
			{
			DebugLocation(699, 4);
			DebugLocation(699, 7);
			Match(input,INCLUDE,Follow._INCLUDE_in_templateIncludeFunctional1646); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(700, 4);
			// Language\\ActionEvaluator.g3:700:4: ( ID args= . | ^( VALUE exprFunctional args= . ) )
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_1 = input.LA(1);

			if ((LA30_1==ID))
			{
				alt30 = 1;
			}
			else if ((LA30_1==VALUE))
			{
				alt30 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:700:6: ID args= .
				{
				DebugLocation(700, 6);
				ID34=(StringTemplateAST)Match(input,ID,Follow._ID_in_templateIncludeFunctional1653); 
				DebugLocation(700, 13);

				args=(StringTemplateAST)input.LT(1);

				MatchAny(input); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:701:6: ^( VALUE exprFunctional args= . )
				{
				DebugLocation(701, 6);
				DebugLocation(701, 9);
				Match(input,VALUE,Follow._VALUE_in_templateIncludeFunctional1666); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(701, 15);
				PushFollow(Follow._exprFunctional_in_templateIncludeFunctional1668);
				exprFunctional35=exprFunctional();
				PopFollow();

				DebugLocation(701, 34);

				args=(StringTemplateAST)input.LT(1);

				MatchAny(input); 

				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
			} finally { DebugExitSubRule(30); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(704, 3);

			#if COMPILE_EXPRESSIONS
						if ( ID34 != null )
						{
							string name = (ID34!=null?ID34.Text:default(string));
							if ( name != null )
							{
								func = (chunk,self,writer) =>
									{
										return chunk.GetTemplateInclude( self, name, args );
									};
							}
							else
							{
								func = (chunk,self,writer) => null;
							}
						}
						else
						{
							func = (chunk,self,writer) =>
								{
									var value = exprFunctional35(chunk,self,writer);
									if ( value == null )
										return null;
										
									string name = value.ToString();
									if ( name != null )
									{
										return chunk.GetTemplateInclude( self, name, args );
									}
									return null;
								};
						}
			#endif
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("templateIncludeFunctional", 28);
			LeaveRule("templateIncludeFunctional", 28);
			LeaveRule_templateIncludeFunctional();
		}
		DebugLocation(739, 1);
		} finally { DebugExitRule(GrammarFileName, "templateIncludeFunctional"); }
		return func;

	}
	// $ANTLR end "templateIncludeFunctional"

	partial void EnterRule_functionCompiled();
	partial void LeaveRule_functionCompiled();
	// $ANTLR start "functionCompiled"
	// Language\\ActionEvaluator.g3:741:1: functionCompiled[System.Reflection.Emit.ILGenerator gen] : ^( FUNCTION ( 'first' singleFunctionArgCompiled[$gen] | 'rest' singleFunctionArgCompiled[$gen] | 'last' singleFunctionArgCompiled[$gen] | 'length' singleFunctionArgCompiled[$gen] | 'strip' singleFunctionArgCompiled[$gen] | 'trunc' singleFunctionArgCompiled[$gen] ) ) ;
	[GrammarRule("functionCompiled")]
	private void functionCompiled(System.Reflection.Emit.ILGenerator gen)
	{
		EnterRule_functionCompiled();
		EnterRule("functionCompiled", 29);
		TraceIn("functionCompiled", 29);
		try { DebugEnterRule(GrammarFileName, "functionCompiled");
		DebugLocation(741, 1);
		try
		{
			// Language\\ActionEvaluator.g3:742:2: ( ^( FUNCTION ( 'first' singleFunctionArgCompiled[$gen] | 'rest' singleFunctionArgCompiled[$gen] | 'last' singleFunctionArgCompiled[$gen] | 'length' singleFunctionArgCompiled[$gen] | 'strip' singleFunctionArgCompiled[$gen] | 'trunc' singleFunctionArgCompiled[$gen] ) ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:742:4: ^( FUNCTION ( 'first' singleFunctionArgCompiled[$gen] | 'rest' singleFunctionArgCompiled[$gen] | 'last' singleFunctionArgCompiled[$gen] | 'length' singleFunctionArgCompiled[$gen] | 'strip' singleFunctionArgCompiled[$gen] | 'trunc' singleFunctionArgCompiled[$gen] ) )
			{
			DebugLocation(742, 4);
			DebugLocation(742, 7);
			Match(input,FUNCTION,Follow._FUNCTION_in_functionCompiled1701); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(743, 4);
			// Language\\ActionEvaluator.g3:743:4: ( 'first' singleFunctionArgCompiled[$gen] | 'rest' singleFunctionArgCompiled[$gen] | 'last' singleFunctionArgCompiled[$gen] | 'length' singleFunctionArgCompiled[$gen] | 'strip' singleFunctionArgCompiled[$gen] | 'trunc' singleFunctionArgCompiled[$gen] )
			int alt31=6;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			switch (input.LA(1))
			{
			case FIRST:
				{
				alt31 = 1;
				}
				break;
			case REST:
				{
				alt31 = 2;
				}
				break;
			case LAST:
				{
				alt31 = 3;
				}
				break;
			case LENGTH:
				{
				alt31 = 4;
				}
				break;
			case STRIP:
				{
				alt31 = 5;
				}
				break;
			case TRUNC:
				{
				alt31 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:743:6: 'first' singleFunctionArgCompiled[$gen]
				{
				DebugLocation(743, 6);
				Match(input,FIRST,Follow._FIRST_in_functionCompiled1708); 
				DebugLocation(743, 15);
				PushFollow(Follow._singleFunctionArgCompiled_in_functionCompiled1711);
				singleFunctionArgCompiled(gen);
				PopFollow();

				DebugLocation(744, 5);

				#if COMPILE_EXPRESSIONS
									EmitFunctionFirst(gen);
				#endif
								

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:749:6: 'rest' singleFunctionArgCompiled[$gen]
				{
				DebugLocation(749, 6);
				Match(input,REST,Follow._REST_in_functionCompiled1725); 
				DebugLocation(749, 14);
				PushFollow(Follow._singleFunctionArgCompiled_in_functionCompiled1728);
				singleFunctionArgCompiled(gen);
				PopFollow();

				DebugLocation(750, 5);

				#if COMPILE_EXPRESSIONS
									EmitFunctionRest(gen);
				#endif
								

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Language\\ActionEvaluator.g3:755:6: 'last' singleFunctionArgCompiled[$gen]
				{
				DebugLocation(755, 6);
				Match(input,LAST,Follow._LAST_in_functionCompiled1742); 
				DebugLocation(755, 14);
				PushFollow(Follow._singleFunctionArgCompiled_in_functionCompiled1745);
				singleFunctionArgCompiled(gen);
				PopFollow();

				DebugLocation(756, 5);

				#if COMPILE_EXPRESSIONS
									EmitFunctionLast(gen);
				#endif
								

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Language\\ActionEvaluator.g3:761:6: 'length' singleFunctionArgCompiled[$gen]
				{
				DebugLocation(761, 6);
				Match(input,LENGTH,Follow._LENGTH_in_functionCompiled1759); 
				DebugLocation(761, 15);
				PushFollow(Follow._singleFunctionArgCompiled_in_functionCompiled1761);
				singleFunctionArgCompiled(gen);
				PopFollow();

				DebugLocation(762, 5);

				#if COMPILE_EXPRESSIONS
									EmitFunctionLength(gen);
				#endif
								

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Language\\ActionEvaluator.g3:767:6: 'strip' singleFunctionArgCompiled[$gen]
				{
				DebugLocation(767, 6);
				Match(input,STRIP,Follow._STRIP_in_functionCompiled1775); 
				DebugLocation(767, 15);
				PushFollow(Follow._singleFunctionArgCompiled_in_functionCompiled1778);
				singleFunctionArgCompiled(gen);
				PopFollow();

				DebugLocation(768, 5);

				#if COMPILE_EXPRESSIONS
									EmitFunctionStrip(gen);
				#endif
								

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Language\\ActionEvaluator.g3:773:6: 'trunc' singleFunctionArgCompiled[$gen]
				{
				DebugLocation(773, 6);
				Match(input,TRUNC,Follow._TRUNC_in_functionCompiled1792); 
				DebugLocation(773, 15);
				PushFollow(Follow._singleFunctionArgCompiled_in_functionCompiled1795);
				singleFunctionArgCompiled(gen);
				PopFollow();

				DebugLocation(774, 5);

				#if COMPILE_EXPRESSIONS
									EmitFunctionTrunc(gen);
				#endif
								

				}
				break;

			}
			} finally { DebugExitSubRule(31); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionCompiled", 29);
			LeaveRule("functionCompiled", 29);
			LeaveRule_functionCompiled();
		}
		DebugLocation(781, 1);
		} finally { DebugExitRule(GrammarFileName, "functionCompiled"); }
		return;

	}
	// $ANTLR end "functionCompiled"

	partial void EnterRule_functionFunctional();
	partial void LeaveRule_functionFunctional();
	// $ANTLR start "functionFunctional"
	// Language\\ActionEvaluator.g3:783:1: functionFunctional returns [System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> func] : ^( FUNCTION ( 'first' a= singleFunctionArgFunctional | 'rest' a= singleFunctionArgFunctional | 'last' a= singleFunctionArgFunctional | 'length' a= singleFunctionArgFunctional | 'strip' a= singleFunctionArgFunctional | 'trunc' a= singleFunctionArgFunctional ) ) ;
	[GrammarRule("functionFunctional")]
	private System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> functionFunctional()
	{
		EnterRule_functionFunctional();
		EnterRule("functionFunctional", 30);
		TraceIn("functionFunctional", 30);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> func = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);


		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> a = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);

		try { DebugEnterRule(GrammarFileName, "functionFunctional");
		DebugLocation(783, 1);
		try
		{
			// Language\\ActionEvaluator.g3:784:2: ( ^( FUNCTION ( 'first' a= singleFunctionArgFunctional | 'rest' a= singleFunctionArgFunctional | 'last' a= singleFunctionArgFunctional | 'length' a= singleFunctionArgFunctional | 'strip' a= singleFunctionArgFunctional | 'trunc' a= singleFunctionArgFunctional ) ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:784:4: ^( FUNCTION ( 'first' a= singleFunctionArgFunctional | 'rest' a= singleFunctionArgFunctional | 'last' a= singleFunctionArgFunctional | 'length' a= singleFunctionArgFunctional | 'strip' a= singleFunctionArgFunctional | 'trunc' a= singleFunctionArgFunctional ) )
			{
			DebugLocation(784, 4);
			DebugLocation(784, 7);
			Match(input,FUNCTION,Follow._FUNCTION_in_functionFunctional1828); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(785, 4);
			// Language\\ActionEvaluator.g3:785:4: ( 'first' a= singleFunctionArgFunctional | 'rest' a= singleFunctionArgFunctional | 'last' a= singleFunctionArgFunctional | 'length' a= singleFunctionArgFunctional | 'strip' a= singleFunctionArgFunctional | 'trunc' a= singleFunctionArgFunctional )
			int alt32=6;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			switch (input.LA(1))
			{
			case FIRST:
				{
				alt32 = 1;
				}
				break;
			case REST:
				{
				alt32 = 2;
				}
				break;
			case LAST:
				{
				alt32 = 3;
				}
				break;
			case LENGTH:
				{
				alt32 = 4;
				}
				break;
			case STRIP:
				{
				alt32 = 5;
				}
				break;
			case TRUNC:
				{
				alt32 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 32, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:785:6: 'first' a= singleFunctionArgFunctional
				{
				DebugLocation(785, 6);
				Match(input,FIRST,Follow._FIRST_in_functionFunctional1835); 
				DebugLocation(785, 16);
				PushFollow(Follow._singleFunctionArgFunctional_in_functionFunctional1840);
				a=singleFunctionArgFunctional();
				PopFollow();

				DebugLocation(786, 5);

				#if COMPILE_EXPRESSIONS
									func = (chunk,self,writer) => chunk.First( a(chunk,self,writer) );
				#endif
								

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:791:6: 'rest' a= singleFunctionArgFunctional
				{
				DebugLocation(791, 6);
				Match(input,REST,Follow._REST_in_functionFunctional1853); 
				DebugLocation(791, 15);
				PushFollow(Follow._singleFunctionArgFunctional_in_functionFunctional1858);
				a=singleFunctionArgFunctional();
				PopFollow();

				DebugLocation(792, 5);

				#if COMPILE_EXPRESSIONS
									func = (chunk,self,writer) => chunk.Rest( a(chunk,self,writer) );
				#endif
								

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Language\\ActionEvaluator.g3:797:6: 'last' a= singleFunctionArgFunctional
				{
				DebugLocation(797, 6);
				Match(input,LAST,Follow._LAST_in_functionFunctional1871); 
				DebugLocation(797, 15);
				PushFollow(Follow._singleFunctionArgFunctional_in_functionFunctional1876);
				a=singleFunctionArgFunctional();
				PopFollow();

				DebugLocation(798, 5);

				#if COMPILE_EXPRESSIONS
									func = (chunk,self,writer) => chunk.Last( a(chunk,self,writer) );
				#endif
								

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Language\\ActionEvaluator.g3:803:6: 'length' a= singleFunctionArgFunctional
				{
				DebugLocation(803, 6);
				Match(input,LENGTH,Follow._LENGTH_in_functionFunctional1889); 
				DebugLocation(803, 16);
				PushFollow(Follow._singleFunctionArgFunctional_in_functionFunctional1893);
				a=singleFunctionArgFunctional();
				PopFollow();

				DebugLocation(804, 5);

				#if COMPILE_EXPRESSIONS
									func = (chunk,self,writer) => chunk.Length( a(chunk,self,writer) );
				#endif
								

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Language\\ActionEvaluator.g3:809:6: 'strip' a= singleFunctionArgFunctional
				{
				DebugLocation(809, 6);
				Match(input,STRIP,Follow._STRIP_in_functionFunctional1906); 
				DebugLocation(809, 16);
				PushFollow(Follow._singleFunctionArgFunctional_in_functionFunctional1911);
				a=singleFunctionArgFunctional();
				PopFollow();

				DebugLocation(810, 5);

				#if COMPILE_EXPRESSIONS
									func = (chunk,self,writer) => chunk.Strip( a(chunk,self,writer) );
				#endif
								

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Language\\ActionEvaluator.g3:815:6: 'trunc' a= singleFunctionArgFunctional
				{
				DebugLocation(815, 6);
				Match(input,TRUNC,Follow._TRUNC_in_functionFunctional1924); 
				DebugLocation(815, 16);
				PushFollow(Follow._singleFunctionArgFunctional_in_functionFunctional1929);
				a=singleFunctionArgFunctional();
				PopFollow();

				DebugLocation(816, 5);

				#if COMPILE_EXPRESSIONS
									func = (chunk,self,writer) => chunk.Trunc( a(chunk,self,writer) );
				#endif
								

				}
				break;

			}
			} finally { DebugExitSubRule(32); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionFunctional", 30);
			LeaveRule("functionFunctional", 30);
			LeaveRule_functionFunctional();
		}
		DebugLocation(823, 1);
		} finally { DebugExitRule(GrammarFileName, "functionFunctional"); }
		return func;

	}
	// $ANTLR end "functionFunctional"

	partial void EnterRule_listCompiled();
	partial void LeaveRule_listCompiled();
	// $ANTLR start "listCompiled"
	// Language\\ActionEvaluator.g3:825:1: listCompiled[System.Reflection.Emit.ILGenerator gen] : ^( LIST ( exprCompiled[$gen] | NOTHING )+ ) ;
	[GrammarRule("listCompiled")]
	private void listCompiled(System.Reflection.Emit.ILGenerator gen)
	{
		EnterRule_listCompiled();
		EnterRule("listCompiled", 31);
		TraceIn("listCompiled", 31);

		#if COMPILE_EXPRESSIONS
			var elements = EmitCreateList<object>(gen);
		#endif

		try { DebugEnterRule(GrammarFileName, "listCompiled");
		DebugLocation(825, 1);
		try
		{
			// Language\\ActionEvaluator.g3:832:2: ( ^( LIST ( exprCompiled[$gen] | NOTHING )+ ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:832:4: ^( LIST ( exprCompiled[$gen] | NOTHING )+ )
			{
			DebugLocation(832, 4);
			DebugLocation(832, 7);
			Match(input,LIST,Follow._LIST_in_listCompiled1963); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(833, 4);
			// Language\\ActionEvaluator.g3:833:4: ( exprCompiled[$gen] | NOTHING )+
			int cnt33=0;
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=3;
				try { DebugEnterDecision(33, false);
				int LA33_1 = input.LA(1);

				if (((LA33_1>=ANONYMOUS_TEMPLATE && LA33_1<=APPLY)||LA33_1==DOT||(LA33_1>=FUNCTION && LA33_1<=INT)||LA33_1==LIST||LA33_1==MULTI_APPLY||LA33_1==PLUS||LA33_1==STRING||LA33_1==VALUE))
				{
					alt33 = 1;
				}
				else if ((LA33_1==NOTHING))
				{
					alt33 = 2;
				}


				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// Language\\ActionEvaluator.g3:833:6: exprCompiled[$gen]
					{
					DebugLocation(833, 6);
					PushFollow(Follow._exprCompiled_in_listCompiled1970);
					exprCompiled(gen);
					PopFollow();

					DebugLocation(834, 5);

					#if COMPILE_EXPRESSIONS
										EmitAddValueToList(gen, elements);
					#endif
									

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Language\\ActionEvaluator.g3:839:6: NOTHING
					{
					DebugLocation(839, 6);
					Match(input,NOTHING,Follow._NOTHING_in_listCompiled1984); 
					DebugLocation(840, 5);

					#if COMPILE_EXPRESSIONS
										EmitAddNothingToList(gen, elements);
					#endif
									

					}
					break;

				default:
					if (cnt33 >= 1)
						goto loop33;

					EarlyExitException eee33 = new EarlyExitException( 33, input );
					DebugRecognitionException(eee33);
					throw eee33;
				}
				cnt33++;
			}
			loop33:
				;

			} finally { DebugExitSubRule(33); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(847, 3);

			#if COMPILE_EXPRESSIONS
						EmitCatList(gen,elements);
			#endif
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("listCompiled", 31);
			LeaveRule("listCompiled", 31);
			LeaveRule_listCompiled();
		}
		DebugLocation(852, 1);
		} finally { DebugExitRule(GrammarFileName, "listCompiled"); }
		return;

	}
	// $ANTLR end "listCompiled"

	partial void EnterRule_listFunctional();
	partial void LeaveRule_listFunctional();
	// $ANTLR start "listFunctional"
	// Language\\ActionEvaluator.g3:854:1: listFunctional returns [System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> func] : ^( LIST ( exprFunctional | NOTHING )+ ) ;
	[GrammarRule("listFunctional")]
	private System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> listFunctional()
	{
		EnterRule_listFunctional();
		EnterRule("listFunctional", 32);
		TraceIn("listFunctional", 32);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> func = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);


		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> exprFunctional36 = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);


			List<System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>> elements = new List<System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>>();

		try { DebugEnterRule(GrammarFileName, "listFunctional");
		DebugLocation(854, 1);
		try
		{
			// Language\\ActionEvaluator.g3:859:2: ( ^( LIST ( exprFunctional | NOTHING )+ ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:859:4: ^( LIST ( exprFunctional | NOTHING )+ )
			{
			DebugLocation(859, 4);
			DebugLocation(859, 7);
			Match(input,LIST,Follow._LIST_in_listFunctional2026); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(860, 4);
			// Language\\ActionEvaluator.g3:860:4: ( exprFunctional | NOTHING )+
			int cnt34=0;
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=3;
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if (((LA34_1>=ANONYMOUS_TEMPLATE && LA34_1<=APPLY)||LA34_1==DOT||(LA34_1>=FUNCTION && LA34_1<=INT)||LA34_1==LIST||LA34_1==MULTI_APPLY||LA34_1==PLUS||LA34_1==STRING||LA34_1==VALUE))
				{
					alt34 = 1;
				}
				else if ((LA34_1==NOTHING))
				{
					alt34 = 2;
				}


				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// Language\\ActionEvaluator.g3:860:6: exprFunctional
					{
					DebugLocation(860, 6);
					PushFollow(Follow._exprFunctional_in_listFunctional2033);
					exprFunctional36=exprFunctional();
					PopFollow();

					DebugLocation(861, 5);

					#if COMPILE_EXPRESSIONS
										if ( exprFunctional36 != null )
											elements.Add(exprFunctional36);
					#endif
									

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Language\\ActionEvaluator.g3:867:6: NOTHING
					{
					DebugLocation(867, 6);
					Match(input,NOTHING,Follow._NOTHING_in_listFunctional2046); 
					DebugLocation(868, 5);

					#if COMPILE_EXPRESSIONS
										elements.Add( (chunk,self,writer) => new List<object>( new object[] { null } ).GetEnumerator() );
					#endif
									

					}
					break;

				default:
					if (cnt34 >= 1)
						goto loop34;

					EarlyExitException eee34 = new EarlyExitException( 34, input );
					DebugRecognitionException(eee34);
					throw eee34;
				}
				cnt34++;
			}
			loop34:
				;

			} finally { DebugExitSubRule(34); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(875, 3);

			#if COMPILE_EXPRESSIONS
						func = (chunk,self,writer) =>
							new Cat(from f in elements
									let value = f(chunk,self,writer)
									where value != null
									select value
									);
			#endif
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("listFunctional", 32);
			LeaveRule("listFunctional", 32);
			LeaveRule_listFunctional();
		}
		DebugLocation(885, 1);
		} finally { DebugExitRule(GrammarFileName, "listFunctional"); }
		return func;

	}
	// $ANTLR end "listFunctional"

	partial void EnterRule_singleFunctionArgCompiled();
	partial void LeaveRule_singleFunctionArgCompiled();
	// $ANTLR start "singleFunctionArgCompiled"
	// Language\\ActionEvaluator.g3:887:1: singleFunctionArgCompiled[System.Reflection.Emit.ILGenerator gen] : ^( SINGLEVALUEARG exprCompiled[$gen] ) ;
	[GrammarRule("singleFunctionArgCompiled")]
	private void singleFunctionArgCompiled(System.Reflection.Emit.ILGenerator gen)
	{
		EnterRule_singleFunctionArgCompiled();
		EnterRule("singleFunctionArgCompiled", 33);
		TraceIn("singleFunctionArgCompiled", 33);
		try { DebugEnterRule(GrammarFileName, "singleFunctionArgCompiled");
		DebugLocation(887, 1);
		try
		{
			// Language\\ActionEvaluator.g3:888:2: ( ^( SINGLEVALUEARG exprCompiled[$gen] ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:888:4: ^( SINGLEVALUEARG exprCompiled[$gen] )
			{
			DebugLocation(888, 4);
			DebugLocation(888, 7);
			Match(input,SINGLEVALUEARG,Follow._SINGLEVALUEARG_in_singleFunctionArgCompiled2080); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(888, 22);
			PushFollow(Follow._exprCompiled_in_singleFunctionArgCompiled2082);
			exprCompiled(gen);
			PopFollow();


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("singleFunctionArgCompiled", 33);
			LeaveRule("singleFunctionArgCompiled", 33);
			LeaveRule_singleFunctionArgCompiled();
		}
		DebugLocation(889, 1);
		} finally { DebugExitRule(GrammarFileName, "singleFunctionArgCompiled"); }
		return;

	}
	// $ANTLR end "singleFunctionArgCompiled"

	partial void EnterRule_singleFunctionArgFunctional();
	partial void LeaveRule_singleFunctionArgFunctional();
	// $ANTLR start "singleFunctionArgFunctional"
	// Language\\ActionEvaluator.g3:891:1: singleFunctionArgFunctional returns [System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> func] : ^( SINGLEVALUEARG exprFunctional ) ;
	[GrammarRule("singleFunctionArgFunctional")]
	private System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> singleFunctionArgFunctional()
	{
		EnterRule_singleFunctionArgFunctional();
		EnterRule("singleFunctionArgFunctional", 34);
		TraceIn("singleFunctionArgFunctional", 34);
		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> func = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);


		System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object> exprFunctional37 = default(System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,object>);

		try { DebugEnterRule(GrammarFileName, "singleFunctionArgFunctional");
		DebugLocation(891, 1);
		try
		{
			// Language\\ActionEvaluator.g3:892:2: ( ^( SINGLEVALUEARG exprFunctional ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:892:4: ^( SINGLEVALUEARG exprFunctional )
			{
			DebugLocation(892, 4);
			DebugLocation(892, 7);
			Match(input,SINGLEVALUEARG,Follow._SINGLEVALUEARG_in_singleFunctionArgFunctional2102); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(892, 22);
			PushFollow(Follow._exprFunctional_in_singleFunctionArgFunctional2104);
			exprFunctional37=exprFunctional();
			PopFollow();

			DebugLocation(892, 37);
			func = exprFunctional37;

			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("singleFunctionArgFunctional", 34);
			LeaveRule("singleFunctionArgFunctional", 34);
			LeaveRule_singleFunctionArgFunctional();
		}
		DebugLocation(893, 1);
		} finally { DebugExitRule(GrammarFileName, "singleFunctionArgFunctional"); }
		return func;

	}
	// $ANTLR end "singleFunctionArgFunctional"

	partial void EnterRule_templateCompiled();
	partial void LeaveRule_templateCompiled();
	// $ANTLR start "templateCompiled"
	// Language\\ActionEvaluator.g3:895:1: templateCompiled[System.Reflection.Emit.ILGenerator gen] : ^( TEMPLATE ( ID . | ANONYMOUS_TEMPLATE | ^( VALUE exprCompiled[$gen] . ) ) ) ;
	[GrammarRule("templateCompiled")]
	private void templateCompiled(System.Reflection.Emit.ILGenerator gen)
	{
		EnterRule_templateCompiled();
		EnterRule("templateCompiled", 35);
		TraceIn("templateCompiled", 35);
		try { DebugEnterRule(GrammarFileName, "templateCompiled");
		DebugLocation(895, 1);
		try
		{
			// Language\\ActionEvaluator.g3:896:2: ( ^( TEMPLATE ( ID . | ANONYMOUS_TEMPLATE | ^( VALUE exprCompiled[$gen] . ) ) ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:896:4: ^( TEMPLATE ( ID . | ANONYMOUS_TEMPLATE | ^( VALUE exprCompiled[$gen] . ) ) )
			{
			DebugLocation(896, 4);
			DebugLocation(896, 7);
			Match(input,TEMPLATE,Follow._TEMPLATE_in_templateCompiled2122); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(897, 4);
			// Language\\ActionEvaluator.g3:897:4: ( ID . | ANONYMOUS_TEMPLATE | ^( VALUE exprCompiled[$gen] . ) )
			int alt35=3;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt35 = 1;
				}
				break;
			case ANONYMOUS_TEMPLATE:
				{
				alt35 = 2;
				}
				break;
			case VALUE:
				{
				alt35 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:897:6: ID .
				{
				DebugLocation(897, 6);
				Match(input,ID,Follow._ID_in_templateCompiled2129); 
				DebugLocation(897, 9);
				MatchAny(input); 
				DebugLocation(898, 5);

				#if COMPILE_EXPRESSIONS
									throw new System.NotImplementedException();
				#endif
								

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:904:6: ANONYMOUS_TEMPLATE
				{
				DebugLocation(904, 6);
				Match(input,ANONYMOUS_TEMPLATE,Follow._ANONYMOUS_TEMPLATE_in_templateCompiled2146); 
				DebugLocation(905, 5);

				#if COMPILE_EXPRESSIONS
									throw new System.NotImplementedException();
				#endif
								

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Language\\ActionEvaluator.g3:911:6: ^( VALUE exprCompiled[$gen] . )
				{
				DebugLocation(911, 6);
				DebugLocation(911, 9);
				Match(input,VALUE,Follow._VALUE_in_templateCompiled2162); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(911, 15);
				PushFollow(Follow._exprCompiled_in_templateCompiled2164);
				exprCompiled(gen);
				PopFollow();

				DebugLocation(911, 34);
				MatchAny(input); 
				DebugLocation(912, 6);

				#if COMPILE_EXPRESSIONS
										throw new System.NotImplementedException();
				#endif
									

				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
			} finally { DebugExitSubRule(35); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("templateCompiled", 35);
			LeaveRule("templateCompiled", 35);
			LeaveRule_templateCompiled();
		}
		DebugLocation(920, 1);
		} finally { DebugExitRule(GrammarFileName, "templateCompiled"); }
		return;

	}
	// $ANTLR end "templateCompiled"

	partial void EnterRule_templateFunctional();
	partial void LeaveRule_templateFunctional();
	// $ANTLR start "templateFunctional"
	// Language\\ActionEvaluator.g3:922:1: templateFunctional[List<System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,StringTemplate>> templateApplicators] : ^( TEMPLATE ( ID args= . |anon= ANONYMOUS_TEMPLATE | ^( VALUE n= expr args= . ) ) ) ;
	[GrammarRule("templateFunctional")]
	private void templateFunctional(List<System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,StringTemplate>> templateApplicators)
	{
		EnterRule_templateFunctional();
		EnterRule("templateFunctional", 36);
		TraceIn("templateFunctional", 36);
		StringTemplateAST anon = default(StringTemplateAST);
		StringTemplateAST ID38 = default(StringTemplateAST);
		StringTemplateAST args = default(StringTemplateAST);
		object n = default(object);


			IDictionary<string, object> argumentContext = null;

		try { DebugEnterRule(GrammarFileName, "templateFunctional");
		DebugLocation(922, 1);
		try
		{
			// Language\\ActionEvaluator.g3:927:2: ( ^( TEMPLATE ( ID args= . |anon= ANONYMOUS_TEMPLATE | ^( VALUE n= expr args= . ) ) ) )
			DebugEnterAlt(1);
			// Language\\ActionEvaluator.g3:927:4: ^( TEMPLATE ( ID args= . |anon= ANONYMOUS_TEMPLATE | ^( VALUE n= expr args= . ) ) )
			{
			DebugLocation(927, 4);
			DebugLocation(927, 7);
			Match(input,TEMPLATE,Follow._TEMPLATE_in_templateFunctional2208); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(928, 4);
			// Language\\ActionEvaluator.g3:928:4: ( ID args= . |anon= ANONYMOUS_TEMPLATE | ^( VALUE n= expr args= . ) )
			int alt36=3;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt36 = 1;
				}
				break;
			case ANONYMOUS_TEMPLATE:
				{
				alt36 = 2;
				}
				break;
			case VALUE:
				{
				alt36 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\ActionEvaluator.g3:928:6: ID args= .
				{
				DebugLocation(928, 6);
				ID38=(StringTemplateAST)Match(input,ID,Follow._ID_in_templateFunctional2215); 
				DebugLocation(928, 13);

				args=(StringTemplateAST)input.LT(1);

				MatchAny(input); 
				DebugLocation(929, 5);

				#if COMPILE_EXPRESSIONS
									System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,StringTemplate> func =
										(chunk,self,writer) =>
										{
											string templateName = (ID38!=null?ID38.Text:default(string));
											StringTemplateGroup group = self.Group;
											StringTemplate embedded = group.GetEmbeddedInstanceOf(self, templateName);
											if ( embedded!=null )
											{
												embedded.ArgumentsAST = args;
											}
											return embedded;
										};
									templateApplicators.Add( func );
				#endif
								

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Language\\ActionEvaluator.g3:947:6: anon= ANONYMOUS_TEMPLATE
				{
				DebugLocation(947, 10);
				anon=(StringTemplateAST)Match(input,ANONYMOUS_TEMPLATE,Follow._ANONYMOUS_TEMPLATE_in_templateFunctional2236); 
				DebugLocation(948, 5);

				#if COMPILE_EXPRESSIONS
									System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,StringTemplate> func =
										(chunk,self,writer) =>
										{
											StringTemplate anonymous = anon.StringTemplate;
											// to properly see overridden templates, always set
											// anonymous' group to be self's group
											anonymous.Group = self.Group;
											return anonymous;
										};
									templateApplicators.Add( func );
				#endif
								

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Language\\ActionEvaluator.g3:963:6: ^( VALUE n= expr args= . )
				{
				DebugLocation(963, 6);
				DebugLocation(963, 9);
				Match(input,VALUE,Follow._VALUE_in_templateFunctional2252); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(963, 16);
				PushFollow(Follow._expr_in_templateFunctional2256);
				n=expr();
				PopFollow();

				DebugLocation(963, 26);

				args=(StringTemplateAST)input.LT(1);

				MatchAny(input); 
				DebugLocation(964, 6);

				#if COMPILE_EXPRESSIONS
										System.Func<ASTExpr,StringTemplate,IStringTemplateWriter,StringTemplate> func =
											(chunk,self,writer) =>
											{
												StringTemplate embedded = null;
												if ( n!=null )
												{
													string templateName = n.ToString();
													StringTemplateGroup group = self.Group;
													embedded = group.GetEmbeddedInstanceOf(self, templateName);
													if ( embedded!=null )
													{
														embedded.ArgumentsAST = args;
													}
												}
												return embedded;
											};
										templateApplicators.Add( func );
				#endif
									

				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
			} finally { DebugExitSubRule(36); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("templateFunctional", 36);
			LeaveRule("templateFunctional", 36);
			LeaveRule_templateFunctional();
		}
		DebugLocation(988, 1);
		} finally { DebugExitRule(GrammarFileName, "templateFunctional"); }
		return;

	}
	// $ANTLR end "templateFunctional"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _expr_in_action60 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_expr78 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr82 = new BitSet(new ulong[]{0x410428F0830UL});
		public static readonly BitSet _expr_in_expr86 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _templateApplication_in_expr94 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_expr101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _templateInclude_in_expr108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _function_in_expr115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_in_expr122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VALUE_in_expr130 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr134 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LIST_in_list166 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_list173 = new BitSet(new ulong[]{0x410628F0838UL});
		public static readonly BitSet _NOTHING_in_list186 = new BitSet(new ulong[]{0x410628F0838UL});
		public static readonly BitSet _INCLUDE_in_templateInclude228 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_templateInclude241 = new BitSet(new ulong[]{0x1FFFFFFFFFF0UL});
		public static readonly BitSet _VALUE_in_templateInclude261 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_templateInclude265 = new BitSet(new ulong[]{0x1FFFFFFFFFF0UL});
		public static readonly BitSet _APPLY_in_templateApplication315 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_templateApplication319 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _template_in_templateApplication325 = new BitSet(new ulong[]{0x8000000008UL});
		public static readonly BitSet _MULTI_APPLY_in_templateApplication344 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_templateApplication349 = new BitSet(new ulong[]{0x410428F0930UL});
		public static readonly BitSet _COLON_in_templateApplication356 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ANONYMOUS_TEMPLATE_in_templateApplication363 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FUNCTION_in_function389 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _FIRST_in_function396 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArg_in_function401 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _REST_in_function410 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArg_in_function415 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LAST_in_function424 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArg_in_function429 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LENGTH_in_function438 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArg_in_function442 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STRIP_in_function451 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArg_in_function456 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TRUNC_in_function465 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArg_in_function470 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SINGLEVALUEARG_in_singleFunctionArg498 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_singleFunctionArg500 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TEMPLATE_in_template523 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_template530 = new BitSet(new ulong[]{0x1FFFFFFFFFF0UL});
		public static readonly BitSet _ANONYMOUS_TEMPLATE_in_template551 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VALUE_in_template567 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_template571 = new BitSet(new ulong[]{0x1FFFFFFFFFF0UL});
		public static readonly BitSet _ifAtom_in_ifCondition616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_ifCondition624 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ifAtom_in_ifCondition628 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_ifAtom646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_attribute670 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_attribute674 = new BitSet(new ulong[]{0x40000020000UL});
		public static readonly BitSet _ID_in_attribute683 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VALUE_in_attribute713 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_attribute717 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_attribute739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_attribute749 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ANONYMOUS_TEMPLATE_in_attribute767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ARGS_in_argList799 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _argumentAssignment_in_argList802 = new BitSet(new ulong[]{0x1088UL});
		public static readonly BitSet _singleTemplateArg_in_argList812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SINGLEVALUEARG_in_singleTemplateArg827 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_singleTemplateArg831 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASSIGN_in_argumentAssignment851 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_argumentAssignment855 = new BitSet(new ulong[]{0x410428F0830UL});
		public static readonly BitSet _expr_in_argumentAssignment857 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DOTDOTDOT_in_argumentAssignment868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exprCompiled_in_actionCompiled884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exprFunctional_in_actionFunctional906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifAtomCompiled_in_ifConditionCompiled924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_ifConditionCompiled931 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ifAtomCompiled_in_ifConditionCompiled933 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ifAtomFunctional_in_ifConditionFunctional956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_ifConditionFunctional966 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ifAtomFunctional_in_ifConditionFunctional968 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _exprCompiled_in_ifAtomCompiled985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exprFunctional_in_ifAtomFunctional1005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_exprCompiled1022 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprCompiled_in_exprCompiled1024 = new BitSet(new ulong[]{0x410428F0830UL});
		public static readonly BitSet _exprCompiled_in_exprCompiled1027 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _templateApplicationCompiled_in_exprCompiled1038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributeCompiled_in_exprCompiled1044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _templateIncludeCompiled_in_exprCompiled1050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCompiled_in_exprCompiled1056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listCompiled_in_exprCompiled1062 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VALUE_in_exprCompiled1069 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprCompiled_in_exprCompiled1071 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PLUS_in_exprFunctional1093 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprFunctional_in_exprFunctional1097 = new BitSet(new ulong[]{0x410428F0830UL});
		public static readonly BitSet _exprFunctional_in_exprFunctional1101 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _templateApplicationFunctional_in_exprFunctional1111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributeFunctional_in_exprFunctional1120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _templateIncludeFunctional_in_exprFunctional1129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionFunctional_in_exprFunctional1138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listFunctional_in_exprFunctional1147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VALUE_in_exprFunctional1157 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprFunctional_in_exprFunctional1161 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _APPLY_in_templateApplicationCompiled1185 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprCompiled_in_templateApplicationCompiled1187 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _templateCompiled_in_templateApplicationCompiled1200 = new BitSet(new ulong[]{0x8000000008UL});
		public static readonly BitSet _MULTI_APPLY_in_templateApplicationCompiled1229 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprCompiled_in_templateApplicationCompiled1241 = new BitSet(new ulong[]{0x410428F0930UL});
		public static readonly BitSet _COLON_in_templateApplicationCompiled1259 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ANONYMOUS_TEMPLATE_in_templateApplicationCompiled1264 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _APPLY_in_templateApplicationFunctional1295 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprFunctional_in_templateApplicationFunctional1299 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _templateFunctional_in_templateApplicationFunctional1305 = new BitSet(new ulong[]{0x8000000008UL});
		public static readonly BitSet _MULTI_APPLY_in_templateApplicationFunctional1324 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprFunctional_in_templateApplicationFunctional1333 = new BitSet(new ulong[]{0x410428F0930UL});
		public static readonly BitSet _COLON_in_templateApplicationFunctional1350 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ANONYMOUS_TEMPLATE_in_templateApplicationFunctional1352 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DOT_in_attributeCompiled1375 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprCompiled_in_attributeCompiled1377 = new BitSet(new ulong[]{0x40000020000UL});
		public static readonly BitSet _ID_in_attributeCompiled1387 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VALUE_in_attributeCompiled1401 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprCompiled_in_attributeCompiled1403 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_attributeCompiled1427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_attributeCompiled1437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attributeCompiled1447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ANONYMOUS_TEMPLATE_in_attributeCompiled1457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_attributeFunctional1478 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprFunctional_in_attributeFunctional1482 = new BitSet(new ulong[]{0x40000020000UL});
		public static readonly BitSet _ID_in_attributeFunctional1491 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VALUE_in_attributeFunctional1505 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprFunctional_in_attributeFunctional1509 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_attributeFunctional1533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_attributeFunctional1543 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attributeFunctional1553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ANONYMOUS_TEMPLATE_in_attributeFunctional1563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INCLUDE_in_templateIncludeCompiled1581 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_templateIncludeCompiled1588 = new BitSet(new ulong[]{0x1FFFFFFFFFF0UL});
		public static readonly BitSet _VALUE_in_templateIncludeCompiled1607 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprCompiled_in_templateIncludeCompiled1609 = new BitSet(new ulong[]{0x1FFFFFFFFFF0UL});
		public static readonly BitSet _INCLUDE_in_templateIncludeFunctional1646 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_templateIncludeFunctional1653 = new BitSet(new ulong[]{0x1FFFFFFFFFF0UL});
		public static readonly BitSet _VALUE_in_templateIncludeFunctional1666 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprFunctional_in_templateIncludeFunctional1668 = new BitSet(new ulong[]{0x1FFFFFFFFFF0UL});
		public static readonly BitSet _FUNCTION_in_functionCompiled1701 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _FIRST_in_functionCompiled1708 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArgCompiled_in_functionCompiled1711 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _REST_in_functionCompiled1725 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArgCompiled_in_functionCompiled1728 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LAST_in_functionCompiled1742 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArgCompiled_in_functionCompiled1745 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LENGTH_in_functionCompiled1759 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArgCompiled_in_functionCompiled1761 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STRIP_in_functionCompiled1775 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArgCompiled_in_functionCompiled1778 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TRUNC_in_functionCompiled1792 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArgCompiled_in_functionCompiled1795 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FUNCTION_in_functionFunctional1828 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _FIRST_in_functionFunctional1835 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArgFunctional_in_functionFunctional1840 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _REST_in_functionFunctional1853 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArgFunctional_in_functionFunctional1858 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LAST_in_functionFunctional1871 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArgFunctional_in_functionFunctional1876 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LENGTH_in_functionFunctional1889 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArgFunctional_in_functionFunctional1893 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STRIP_in_functionFunctional1906 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArgFunctional_in_functionFunctional1911 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TRUNC_in_functionFunctional1924 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _singleFunctionArgFunctional_in_functionFunctional1929 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LIST_in_listCompiled1963 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprCompiled_in_listCompiled1970 = new BitSet(new ulong[]{0x410628F0838UL});
		public static readonly BitSet _NOTHING_in_listCompiled1984 = new BitSet(new ulong[]{0x410628F0838UL});
		public static readonly BitSet _LIST_in_listFunctional2026 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprFunctional_in_listFunctional2033 = new BitSet(new ulong[]{0x410628F0838UL});
		public static readonly BitSet _NOTHING_in_listFunctional2046 = new BitSet(new ulong[]{0x410628F0838UL});
		public static readonly BitSet _SINGLEVALUEARG_in_singleFunctionArgCompiled2080 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprCompiled_in_singleFunctionArgCompiled2082 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SINGLEVALUEARG_in_singleFunctionArgFunctional2102 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprFunctional_in_singleFunctionArgFunctional2104 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TEMPLATE_in_templateCompiled2122 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_templateCompiled2129 = new BitSet(new ulong[]{0x1FFFFFFFFFF0UL});
		public static readonly BitSet _ANONYMOUS_TEMPLATE_in_templateCompiled2146 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VALUE_in_templateCompiled2162 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprCompiled_in_templateCompiled2164 = new BitSet(new ulong[]{0x1FFFFFFFFFF0UL});
		public static readonly BitSet _TEMPLATE_in_templateFunctional2208 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_templateFunctional2215 = new BitSet(new ulong[]{0x1FFFFFFFFFF0UL});
		public static readonly BitSet _ANONYMOUS_TEMPLATE_in_templateFunctional2236 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _VALUE_in_templateFunctional2252 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_templateFunctional2256 = new BitSet(new ulong[]{0x1FFFFFFFFFF0UL});
	}
	#endregion Follow sets
}

} // namespace Antlr3.ST.Language
