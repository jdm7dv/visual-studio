//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.1 Language\\Interface.g3 2013-06-14 09:39:34

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace Antlr3.ST.Language
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.1")]
[System.CLSCompliant(false)]
public partial class InterfaceParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "COLON", "COMMA", "ID", "INTERFACE", "LPAREN", "ML_COMMENT", "OPTIONAL", "RPAREN", "SEMI", "SL_COMMENT", "WS"
	};
	public const int EOF=-1;
	public const int COLON=4;
	public const int COMMA=5;
	public const int ID=6;
	public const int INTERFACE=7;
	public const int LPAREN=8;
	public const int ML_COMMENT=9;
	public const int OPTIONAL=10;
	public const int RPAREN=11;
	public const int SEMI=12;
	public const int SL_COMMENT=13;
	public const int WS=14;

	public InterfaceParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public InterfaceParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return InterfaceParser.tokenNames; } }
	public override string GrammarFileName { get { return "Language\\Interface.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_groupInterface();
	partial void LeaveRule_groupInterface();
	// $ANTLR start "groupInterface"
	// Language\\Interface.g3:49:1: public groupInterface[StringTemplateGroupInterface groupI] : 'interface' name= ID SEMI ( template[groupI] )+ EOF ;
	[GrammarRule("groupInterface")]
	public void groupInterface(StringTemplateGroupInterface groupI)
	{
		EnterRule_groupInterface();
		EnterRule("groupInterface", 1);
		TraceIn("groupInterface", 1);
		IToken name = default(IToken);


			this.groupI = groupI;

		try { DebugEnterRule(GrammarFileName, "groupInterface");
		DebugLocation(49, 1);
		try
		{
			// Language\\Interface.g3:54:2: ( 'interface' name= ID SEMI ( template[groupI] )+ EOF )
			DebugEnterAlt(1);
			// Language\\Interface.g3:54:4: 'interface' name= ID SEMI ( template[groupI] )+ EOF
			{
			DebugLocation(54, 4);
			Match(input,INTERFACE,Follow._INTERFACE_in_groupInterface70); 
			DebugLocation(54, 20);
			name=(IToken)Match(input,ID,Follow._ID_in_groupInterface74); 
			DebugLocation(54, 24);
			groupI.Name = (name!=null?name.Text:default(string));
			DebugLocation(54, 52);
			Match(input,SEMI,Follow._SEMI_in_groupInterface78); 
			DebugLocation(55, 3);
			// Language\\Interface.g3:55:3: ( template[groupI] )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==ID||LA1_1==OPTIONAL))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// Language\\Interface.g3:55:5: template[groupI]
					{
					DebugLocation(55, 5);
					PushFollow(Follow._template_in_groupInterface84);
					template(groupI);
					PopFollow();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(56, 3);
			Match(input,EOF,Follow._EOF_in_groupInterface92); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("groupInterface", 1);
			LeaveRule("groupInterface", 1);
			LeaveRule_groupInterface();
		}
		DebugLocation(57, 1);
		} finally { DebugExitRule(GrammarFileName, "groupInterface"); }
		return;

	}
	// $ANTLR end "groupInterface"

	partial void EnterRule_template();
	partial void LeaveRule_template();
	// $ANTLR start "template"
	// Language\\Interface.g3:60:1: template[StringTemplateGroupInterface groupI] : (opt= 'optional' )? name= ID LPAREN (formalArgs= args )? RPAREN SEMI ;
	[GrammarRule("template")]
	private void template(StringTemplateGroupInterface groupI)
	{
		EnterRule_template();
		EnterRule("template", 2);
		TraceIn("template", 2);
		IToken opt = default(IToken);
		IToken name = default(IToken);
		System.Collections.Generic.SortedList<string, FormalArgument> formalArgs = default(System.Collections.Generic.SortedList<string, FormalArgument>);


			string templateName = null;

		try { DebugEnterRule(GrammarFileName, "template");
		DebugLocation(60, 1);
		try
		{
			// Language\\Interface.g3:65:2: ( (opt= 'optional' )? name= ID LPAREN (formalArgs= args )? RPAREN SEMI )
			DebugEnterAlt(1);
			// Language\\Interface.g3:65:4: (opt= 'optional' )? name= ID LPAREN (formalArgs= args )? RPAREN SEMI
			{
			DebugLocation(65, 4);
			// Language\\Interface.g3:65:4: (opt= 'optional' )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==OPTIONAL))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\Interface.g3:65:5: opt= 'optional'
				{
				DebugLocation(65, 8);
				opt=(IToken)Match(input,OPTIONAL,Follow._OPTIONAL_in_template113); 

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(65, 26);
			name=(IToken)Match(input,ID,Follow._ID_in_template119); 
			DebugLocation(65, 30);
			Match(input,LPAREN,Follow._LPAREN_in_template121); 
			DebugLocation(65, 37);
			// Language\\Interface.g3:65:37: (formalArgs= args )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==ID))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Language\\Interface.g3:65:38: formalArgs= args
				{
				DebugLocation(65, 48);
				PushFollow(Follow._args_in_template126);
				formalArgs=args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(65, 56);
			Match(input,RPAREN,Follow._RPAREN_in_template130); 
			DebugLocation(65, 63);
			Match(input,SEMI,Follow._SEMI_in_template132); 
			DebugLocation(66, 3);

						templateName = (name!=null?name.Text:default(string));
						groupI.DefineTemplate( templateName, formalArgs ?? new System.Collections.Generic.SortedList<string, FormalArgument>(System.StringComparer.Ordinal), opt!=null );
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("template", 2);
			LeaveRule("template", 2);
			LeaveRule_template();
		}
		DebugLocation(70, 1);
		} finally { DebugExitRule(GrammarFileName, "template"); }
		return;

	}
	// $ANTLR end "template"

	partial void EnterRule_args();
	partial void LeaveRule_args();
	// $ANTLR start "args"
	// Language\\Interface.g3:72:1: args returns [System.Collections.Generic.SortedList<string, FormalArgument> args] : a= ID ( COMMA b= ID )* ;
	[GrammarRule("args")]
	private System.Collections.Generic.SortedList<string, FormalArgument> args()
	{
		EnterRule_args();
		EnterRule("args", 3);
		TraceIn("args", 3);
		System.Collections.Generic.SortedList<string, FormalArgument> args = default(System.Collections.Generic.SortedList<string, FormalArgument>);


		IToken a = default(IToken);
		IToken b = default(IToken);


			args = new System.Collections.Generic.SortedList<string, FormalArgument>(System.StringComparer.Ordinal);

		try { DebugEnterRule(GrammarFileName, "args");
		DebugLocation(72, 1);
		try
		{
			// Language\\Interface.g3:77:2: (a= ID ( COMMA b= ID )* )
			DebugEnterAlt(1);
			// Language\\Interface.g3:77:4: a= ID ( COMMA b= ID )*
			{
			DebugLocation(77, 5);
			a=(IToken)Match(input,ID,Follow._ID_in_args157); 
			DebugLocation(77, 9);
			args[(a!=null?a.Text:default(string))] = new FormalArgument((a!=null?a.Text:default(string)));
			DebugLocation(78, 3);
			// Language\\Interface.g3:78:3: ( COMMA b= ID )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==COMMA))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Language\\Interface.g3:78:5: COMMA b= ID
					{
					DebugLocation(78, 5);
					Match(input,COMMA,Follow._COMMA_in_args165); 
					DebugLocation(78, 12);
					b=(IToken)Match(input,ID,Follow._ID_in_args169); 
					DebugLocation(78, 16);
					args[(b!=null?b.Text:default(string))] = new FormalArgument((b!=null?b.Text:default(string)));

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("args", 3);
			LeaveRule("args", 3);
			LeaveRule_args();
		}
		DebugLocation(79, 1);
		} finally { DebugExitRule(GrammarFileName, "args"); }
		return args;

	}
	// $ANTLR end "args"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _INTERFACE_in_groupInterface70 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ID_in_groupInterface74 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _SEMI_in_groupInterface78 = new BitSet(new ulong[]{0x440UL});
		public static readonly BitSet _template_in_groupInterface84 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_groupInterface92 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPTIONAL_in_template113 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ID_in_template119 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _LPAREN_in_template121 = new BitSet(new ulong[]{0x840UL});
		public static readonly BitSet _args_in_template126 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _RPAREN_in_template130 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _SEMI_in_template132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_args157 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _COMMA_in_args165 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ID_in_args169 = new BitSet(new ulong[]{0x22UL});
	}
	#endregion Follow sets
}

} // namespace Antlr3.ST.Language
