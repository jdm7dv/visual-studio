//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.1 Grammars\\ANTLRTreePrinter.g3 2013-06-14 09:39:33

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using Antlr3.Tool;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace Antlr3.Grammars
{
/** Print out a grammar (no pretty printing).
 *
 *  Terence Parr
 *  University of San Francisco
 *  August 19, 2003
 */
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.1")]
[System.CLSCompliant(false)]
public partial class ANTLRTreePrinter : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACTION", "ACTION_CHAR_LITERAL", "ACTION_ESC", "ACTION_STRING_LITERAL", "ALT", "AMPERSAND", "ARG", "ARGLIST", "ARG_ACTION", "ASSIGN", "BACKTRACK_SEMPRED", "BANG", "BLOCK", "CATCH", "CHAR_LITERAL", "CHAR_RANGE", "CLOSE_ELEMENT_OPTION", "CLOSURE", "COLON", "COMBINED_GRAMMAR", "COMMA", "COMMENT", "DIGIT", "DOC_COMMENT", "DOLLAR", "DOT", "DOUBLE_ANGLE_STRING_LITERAL", "DOUBLE_QUOTE_STRING_LITERAL", "EOA", "EOB", "EOR", "EPSILON", "ESC", "ETC", "FINALLY", "FORCED_ACTION", "FRAGMENT", "GATED_SEMPRED", "GRAMMAR", "ID", "IMPLIES", "IMPORT", "INITACTION", "INT", "LABEL", "LEXER", "LEXER_GRAMMAR", "LPAREN", "ML_COMMENT", "NESTED_ACTION", "NESTED_ARG_ACTION", "NOT", "OPEN_ELEMENT_OPTION", "OPTIONAL", "OPTIONS", "OR", "PARSER", "PARSER_GRAMMAR", "PLUS", "PLUS_ASSIGN", "POSITIVE_CLOSURE", "PREC_RULE", "PRIVATE", "PROTECTED", "PUBLIC", "QUESTION", "RANGE", "RCURLY", "RECURSIVE_RULE_REF", "RET", "RETURNS", "REWRITE", "REWRITES", "ROOT", "RPAREN", "RULE", "RULE_REF", "SCOPE", "SEMI", "SEMPRED", "SL_COMMENT", "SRC", "STAR", "STRAY_BRACKET", "STRING_LITERAL", "SYNPRED", "SYN_SEMPRED", "TEMPLATE", "THROWS", "TOKENS", "TOKEN_REF", "TREE", "TREE_BEGIN", "TREE_GRAMMAR", "WILDCARD", "WS", "WS_LOOP", "WS_OPT", "XDIGIT"
	};
	public const int EOF=-1;
	public const int ACTION=4;
	public const int ACTION_CHAR_LITERAL=5;
	public const int ACTION_ESC=6;
	public const int ACTION_STRING_LITERAL=7;
	public const int ALT=8;
	public const int AMPERSAND=9;
	public const int ARG=10;
	public const int ARGLIST=11;
	public const int ARG_ACTION=12;
	public const int ASSIGN=13;
	public const int BACKTRACK_SEMPRED=14;
	public const int BANG=15;
	public const int BLOCK=16;
	public const int CATCH=17;
	public const int CHAR_LITERAL=18;
	public const int CHAR_RANGE=19;
	public const int CLOSE_ELEMENT_OPTION=20;
	public const int CLOSURE=21;
	public const int COLON=22;
	public const int COMBINED_GRAMMAR=23;
	public const int COMMA=24;
	public const int COMMENT=25;
	public const int DIGIT=26;
	public const int DOC_COMMENT=27;
	public const int DOLLAR=28;
	public const int DOT=29;
	public const int DOUBLE_ANGLE_STRING_LITERAL=30;
	public const int DOUBLE_QUOTE_STRING_LITERAL=31;
	public const int EOA=32;
	public const int EOB=33;
	public const int EOR=34;
	public const int EPSILON=35;
	public const int ESC=36;
	public const int ETC=37;
	public const int FINALLY=38;
	public const int FORCED_ACTION=39;
	public const int FRAGMENT=40;
	public const int GATED_SEMPRED=41;
	public const int GRAMMAR=42;
	public const int ID=43;
	public const int IMPLIES=44;
	public const int IMPORT=45;
	public const int INITACTION=46;
	public const int INT=47;
	public const int LABEL=48;
	public const int LEXER=49;
	public const int LEXER_GRAMMAR=50;
	public const int LPAREN=51;
	public const int ML_COMMENT=52;
	public const int NESTED_ACTION=53;
	public const int NESTED_ARG_ACTION=54;
	public const int NOT=55;
	public const int OPEN_ELEMENT_OPTION=56;
	public const int OPTIONAL=57;
	public const int OPTIONS=58;
	public const int OR=59;
	public const int PARSER=60;
	public const int PARSER_GRAMMAR=61;
	public const int PLUS=62;
	public const int PLUS_ASSIGN=63;
	public const int POSITIVE_CLOSURE=64;
	public const int PREC_RULE=65;
	public const int PRIVATE=66;
	public const int PROTECTED=67;
	public const int PUBLIC=68;
	public const int QUESTION=69;
	public const int RANGE=70;
	public const int RCURLY=71;
	public const int RECURSIVE_RULE_REF=72;
	public const int RET=73;
	public const int RETURNS=74;
	public const int REWRITE=75;
	public const int REWRITES=76;
	public const int ROOT=77;
	public const int RPAREN=78;
	public const int RULE=79;
	public const int RULE_REF=80;
	public const int SCOPE=81;
	public const int SEMI=82;
	public const int SEMPRED=83;
	public const int SL_COMMENT=84;
	public const int SRC=85;
	public const int STAR=86;
	public const int STRAY_BRACKET=87;
	public const int STRING_LITERAL=88;
	public const int SYNPRED=89;
	public const int SYN_SEMPRED=90;
	public const int TEMPLATE=91;
	public const int THROWS=92;
	public const int TOKENS=93;
	public const int TOKEN_REF=94;
	public const int TREE=95;
	public const int TREE_BEGIN=96;
	public const int TREE_GRAMMAR=97;
	public const int WILDCARD=98;
	public const int WS=99;
	public const int WS_LOOP=100;
	public const int WS_OPT=101;
	public const int XDIGIT=102;

	public ANTLRTreePrinter(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ANTLRTreePrinter(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return ANTLRTreePrinter.tokenNames; } }
	public override string GrammarFileName { get { return "Grammars\\ANTLRTreePrinter.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_toString();
	partial void LeaveRule_toString();
	// $ANTLR start "toString"
	// Grammars\\ANTLRTreePrinter.g3:57:1: public toString[Grammar g, bool showActions] returns [string s=null] : ( grammar_ | rule | alternative | element | single_rewrite | rewrite | EOR ) ;
	[GrammarRule("toString")]
	public string toString(Grammar g, bool showActions)
	{
		EnterRule_toString();
		EnterRule("toString", 1);
		TraceIn("toString", 1);
		string s = null;



			grammar = g;
			this.showActions = showActions;

		try { DebugEnterRule(GrammarFileName, "toString");
		DebugLocation(57, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:63:2: ( ( grammar_ | rule | alternative | element | single_rewrite | rewrite | EOR ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:63:4: ( grammar_ | rule | alternative | element | single_rewrite | rewrite | EOR )
			{
			DebugLocation(63, 4);
			// Grammars\\ANTLRTreePrinter.g3:63:4: ( grammar_ | rule | alternative | element | single_rewrite | rewrite | EOR )
			int alt1=7;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case COMBINED_GRAMMAR:
			case LEXER_GRAMMAR:
			case PARSER_GRAMMAR:
			case TREE_GRAMMAR:
				{
				alt1 = 1;
				}
				break;
			case RULE:
				{
				alt1 = 2;
				}
				break;
			case ALT:
				{
				alt1 = 3;
				}
				break;
			case ACTION:
			case ASSIGN:
			case BACKTRACK_SEMPRED:
			case BANG:
			case BLOCK:
			case CHAR_LITERAL:
			case CHAR_RANGE:
			case CLOSURE:
			case DOT:
			case EPSILON:
			case FORCED_ACTION:
			case GATED_SEMPRED:
			case LABEL:
			case NOT:
			case OPTIONAL:
			case PLUS_ASSIGN:
			case POSITIVE_CLOSURE:
			case RANGE:
			case ROOT:
			case RULE_REF:
			case SEMPRED:
			case STRING_LITERAL:
			case SYNPRED:
			case SYN_SEMPRED:
			case TOKEN_REF:
			case TREE_BEGIN:
			case WILDCARD:
				{
				alt1 = 4;
				}
				break;
			case REWRITE:
				{
				alt1 = 5;
				}
				break;
			case EOF:
			case REWRITES:
				{
				alt1 = 6;
				}
				break;
			case EOR:
				{
				alt1 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:63:6: grammar_
				{
				DebugLocation(63, 6);
				PushFollow(Follow._grammar__in_toString72);
				grammar_();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\ANTLRTreePrinter.g3:64:5: rule
				{
				DebugLocation(64, 5);
				PushFollow(Follow._rule_in_toString78);
				rule();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\ANTLRTreePrinter.g3:65:5: alternative
				{
				DebugLocation(65, 5);
				PushFollow(Follow._alternative_in_toString84);
				alternative();
				PopFollow();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Grammars\\ANTLRTreePrinter.g3:66:5: element
				{
				DebugLocation(66, 5);
				PushFollow(Follow._element_in_toString90);
				element();
				PopFollow();


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Grammars\\ANTLRTreePrinter.g3:67:5: single_rewrite
				{
				DebugLocation(67, 5);
				PushFollow(Follow._single_rewrite_in_toString96);
				single_rewrite();
				PopFollow();


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Grammars\\ANTLRTreePrinter.g3:68:5: rewrite
				{
				DebugLocation(68, 5);
				PushFollow(Follow._rewrite_in_toString102);
				rewrite();
				PopFollow();


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Grammars\\ANTLRTreePrinter.g3:69:5: EOR
				{
				DebugLocation(69, 5);
				Match(input,EOR,Follow._EOR_in_toString108); 

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(71, 3);
			return Normalize(buf.ToString());

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("toString", 1);
			LeaveRule("toString", 1);
			LeaveRule_toString();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "toString"); }
		return s;

	}
	// $ANTLR end "toString"

	partial void EnterRule_grammar_();
	partial void LeaveRule_grammar_();
	// $ANTLR start "grammar_"
	// Grammars\\ANTLRTreePrinter.g3:76:1: grammar_ : ( ^( LEXER_GRAMMAR grammarSpec[\"lexer \" ] ) | ^( PARSER_GRAMMAR grammarSpec[\"parser \"] ) | ^( TREE_GRAMMAR grammarSpec[\"tree \"] ) | ^( COMBINED_GRAMMAR grammarSpec[\"\"] ) );
	[GrammarRule("grammar_")]
	private void grammar_()
	{
		EnterRule_grammar_();
		EnterRule("grammar_", 2);
		TraceIn("grammar_", 2);
		try { DebugEnterRule(GrammarFileName, "grammar_");
		DebugLocation(76, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:77:2: ( ^( LEXER_GRAMMAR grammarSpec[\"lexer \" ] ) | ^( PARSER_GRAMMAR grammarSpec[\"parser \"] ) | ^( TREE_GRAMMAR grammarSpec[\"tree \"] ) | ^( COMBINED_GRAMMAR grammarSpec[\"\"] ) )
			int alt2=4;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case LEXER_GRAMMAR:
				{
				alt2 = 1;
				}
				break;
			case PARSER_GRAMMAR:
				{
				alt2 = 2;
				}
				break;
			case TREE_GRAMMAR:
				{
				alt2 = 3;
				}
				break;
			case COMBINED_GRAMMAR:
				{
				alt2 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:77:4: ^( LEXER_GRAMMAR grammarSpec[\"lexer \" ] )
				{
				DebugLocation(77, 4);
				DebugLocation(77, 7);
				Match(input,LEXER_GRAMMAR,Follow._LEXER_GRAMMAR_in_grammar_132); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(77, 21);
				PushFollow(Follow._grammarSpec_in_grammar_134);
				grammarSpec("lexer ");
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\ANTLRTreePrinter.g3:78:4: ^( PARSER_GRAMMAR grammarSpec[\"parser \"] )
				{
				DebugLocation(78, 4);
				DebugLocation(78, 7);
				Match(input,PARSER_GRAMMAR,Follow._PARSER_GRAMMAR_in_grammar_144); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(78, 22);
				PushFollow(Follow._grammarSpec_in_grammar_146);
				grammarSpec("parser ");
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\ANTLRTreePrinter.g3:79:4: ^( TREE_GRAMMAR grammarSpec[\"tree \"] )
				{
				DebugLocation(79, 4);
				DebugLocation(79, 7);
				Match(input,TREE_GRAMMAR,Follow._TREE_GRAMMAR_in_grammar_156); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(79, 20);
				PushFollow(Follow._grammarSpec_in_grammar_158);
				grammarSpec("tree ");
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Grammars\\ANTLRTreePrinter.g3:80:4: ^( COMBINED_GRAMMAR grammarSpec[\"\"] )
				{
				DebugLocation(80, 4);
				DebugLocation(80, 7);
				Match(input,COMBINED_GRAMMAR,Follow._COMBINED_GRAMMAR_in_grammar_168); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(80, 24);
				PushFollow(Follow._grammarSpec_in_grammar_170);
				grammarSpec("");
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("grammar_", 2);
			LeaveRule("grammar_", 2);
			LeaveRule_grammar_();
		}
		DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "grammar_"); }
		return;

	}
	// $ANTLR end "grammar_"

	partial void EnterRule_attrScope();
	partial void LeaveRule_attrScope();
	// $ANTLR start "attrScope"
	// Grammars\\ANTLRTreePrinter.g3:83:1: attrScope : ^( 'scope' ID ( ruleAction )* ACTION ) ;
	[GrammarRule("attrScope")]
	private void attrScope()
	{
		EnterRule_attrScope();
		EnterRule("attrScope", 3);
		TraceIn("attrScope", 3);
		try { DebugEnterRule(GrammarFileName, "attrScope");
		DebugLocation(83, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:84:2: ( ^( 'scope' ID ( ruleAction )* ACTION ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:84:4: ^( 'scope' ID ( ruleAction )* ACTION )
			{
			DebugLocation(84, 4);
			DebugLocation(84, 7);
			Match(input,SCOPE,Follow._SCOPE_in_attrScope186); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(84, 15);
			Match(input,ID,Follow._ID_in_attrScope188); 
			DebugLocation(84, 18);
			// Grammars\\ANTLRTreePrinter.g3:84:18: ( ruleAction )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==AMPERSAND))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:84:18: ruleAction
					{
					DebugLocation(84, 18);
					PushFollow(Follow._ruleAction_in_attrScope190);
					ruleAction();
					PopFollow();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(84, 30);
			Match(input,ACTION,Follow._ACTION_in_attrScope193); 

			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attrScope", 3);
			LeaveRule("attrScope", 3);
			LeaveRule_attrScope();
		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "attrScope"); }
		return;

	}
	// $ANTLR end "attrScope"

	partial void EnterRule_grammarSpec();
	partial void LeaveRule_grammarSpec();
	// $ANTLR start "grammarSpec"
	// Grammars\\ANTLRTreePrinter.g3:87:1: grammarSpec[string gtype] : id= ID (cmt= DOC_COMMENT )? ( optionsSpec )? ( delegateGrammars )? ( tokensSpec )? ( attrScope )* ( actions )? rules ;
	[GrammarRule("grammarSpec")]
	private void grammarSpec(string gtype)
	{
		EnterRule_grammarSpec();
		EnterRule("grammarSpec", 4);
		TraceIn("grammarSpec", 4);
		GrammarAST id = default(GrammarAST);
		GrammarAST cmt = default(GrammarAST);

		try { DebugEnterRule(GrammarFileName, "grammarSpec");
		DebugLocation(87, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:88:2: (id= ID (cmt= DOC_COMMENT )? ( optionsSpec )? ( delegateGrammars )? ( tokensSpec )? ( attrScope )* ( actions )? rules )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:88:4: id= ID (cmt= DOC_COMMENT )? ( optionsSpec )? ( delegateGrammars )? ( tokensSpec )? ( attrScope )* ( actions )? rules
			{
			DebugLocation(88, 6);
			id=(GrammarAST)Match(input,ID,Follow._ID_in_grammarSpec209); 
			DebugLocation(88, 10);
			@out(gtype+"grammar "+(id!=null?id.Text:default(string)));
			DebugLocation(89, 3);
			// Grammars\\ANTLRTreePrinter.g3:89:3: (cmt= DOC_COMMENT )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==DOC_COMMENT))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:89:4: cmt= DOC_COMMENT
				{
				DebugLocation(89, 7);
				cmt=(GrammarAST)Match(input,DOC_COMMENT,Follow._DOC_COMMENT_in_grammarSpec218); 
				DebugLocation(89, 20);
				@out((cmt!=null?cmt.Text:default(string))+"\n");

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(90, 3);
			// Grammars\\ANTLRTreePrinter.g3:90:3: ( optionsSpec )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==OPTIONS))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:90:4: optionsSpec
				{
				DebugLocation(90, 4);
				PushFollow(Follow._optionsSpec_in_grammarSpec228);
				optionsSpec();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(90, 18);
			@out(";\n");
			DebugLocation(91, 3);
			// Grammars\\ANTLRTreePrinter.g3:91:3: ( delegateGrammars )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==IMPORT))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:91:4: delegateGrammars
				{
				DebugLocation(91, 4);
				PushFollow(Follow._delegateGrammars_in_grammarSpec237);
				delegateGrammars();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(92, 3);
			// Grammars\\ANTLRTreePrinter.g3:92:3: ( tokensSpec )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1==TOKENS))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:92:4: tokensSpec
				{
				DebugLocation(92, 4);
				PushFollow(Follow._tokensSpec_in_grammarSpec244);
				tokensSpec();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(93, 3);
			// Grammars\\ANTLRTreePrinter.g3:93:3: ( attrScope )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==SCOPE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:93:4: attrScope
					{
					DebugLocation(93, 4);
					PushFollow(Follow._attrScope_in_grammarSpec251);
					attrScope();
					PopFollow();


					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(94, 3);
			// Grammars\\ANTLRTreePrinter.g3:94:3: ( actions )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==AMPERSAND))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:94:4: actions
				{
				DebugLocation(94, 4);
				PushFollow(Follow._actions_in_grammarSpec258);
				actions();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(95, 3);
			PushFollow(Follow._rules_in_grammarSpec264);
			rules();
			PopFollow();


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("grammarSpec", 4);
			LeaveRule("grammarSpec", 4);
			LeaveRule_grammarSpec();
		}
		DebugLocation(96, 1);
		} finally { DebugExitRule(GrammarFileName, "grammarSpec"); }
		return;

	}
	// $ANTLR end "grammarSpec"

	partial void EnterRule_actions();
	partial void LeaveRule_actions();
	// $ANTLR start "actions"
	// Grammars\\ANTLRTreePrinter.g3:98:1: actions : ( action )+ ;
	[GrammarRule("actions")]
	private void actions()
	{
		EnterRule_actions();
		EnterRule("actions", 5);
		TraceIn("actions", 5);
		try { DebugEnterRule(GrammarFileName, "actions");
		DebugLocation(98, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:99:2: ( ( action )+ )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:99:4: ( action )+
			{
			DebugLocation(99, 4);
			// Grammars\\ANTLRTreePrinter.g3:99:4: ( action )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==AMPERSAND))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:99:6: action
					{
					DebugLocation(99, 6);
					PushFollow(Follow._action_in_actions277);
					action();
					PopFollow();


					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("actions", 5);
			LeaveRule("actions", 5);
			LeaveRule_actions();
		}
		DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "actions"); }
		return;

	}
	// $ANTLR end "actions"

	partial void EnterRule_action();
	partial void LeaveRule_action();
	// $ANTLR start "action"
	// Grammars\\ANTLRTreePrinter.g3:102:1: action : ^( AMPERSAND id1= ID (id2= ID a1= ACTION |a2= ACTION ) ) ;
	[GrammarRule("action")]
	private void action()
	{
		EnterRule_action();
		EnterRule("action", 6);
		TraceIn("action", 6);
		GrammarAST id1 = default(GrammarAST);
		GrammarAST id2 = default(GrammarAST);
		GrammarAST a1 = default(GrammarAST);
		GrammarAST a2 = default(GrammarAST);


			string scope=null, name=null;
			string action=null;

		try { DebugEnterRule(GrammarFileName, "action");
		DebugLocation(102, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:108:2: ( ^( AMPERSAND id1= ID (id2= ID a1= ACTION |a2= ACTION ) ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:108:4: ^( AMPERSAND id1= ID (id2= ID a1= ACTION |a2= ACTION ) )
			{
			DebugLocation(108, 4);
			DebugLocation(108, 7);
			Match(input,AMPERSAND,Follow._AMPERSAND_in_action298); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(108, 20);
			id1=(GrammarAST)Match(input,ID,Follow._ID_in_action302); 
			DebugLocation(109, 4);
			// Grammars\\ANTLRTreePrinter.g3:109:4: (id2= ID a1= ACTION |a2= ACTION )
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==ID))
			{
				alt11 = 1;
			}
			else if ((LA11_1==ACTION))
			{
				alt11 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:109:6: id2= ID a1= ACTION
				{
				DebugLocation(109, 9);
				id2=(GrammarAST)Match(input,ID,Follow._ID_in_action311); 
				DebugLocation(109, 15);
				a1=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_action315); 
				DebugLocation(110, 5);
				scope=(id1!=null?id1.Text:default(string)); name=(a1!=null?a1.Text:default(string)); action=(a1!=null?a1.Text:default(string));

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\ANTLRTreePrinter.g3:111:6: a2= ACTION
				{
				DebugLocation(111, 8);
				a2=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_action330); 
				DebugLocation(112, 5);
				scope=null; name=(id1!=null?id1.Text:default(string)); action=(a2!=null?a2.Text:default(string));

				}
				break;

			}
			} finally { DebugExitSubRule(11); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(115, 3);

						if ( showActions )
						{
							@out("@"+(scope!=null?scope+"::":"")+name+action);
						}
					

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("action", 6);
			LeaveRule("action", 6);
			LeaveRule_action();
		}
		DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "action"); }
		return;

	}
	// $ANTLR end "action"

	partial void EnterRule_optionsSpec();
	partial void LeaveRule_optionsSpec();
	// $ANTLR start "optionsSpec"
	// Grammars\\ANTLRTreePrinter.g3:123:1: optionsSpec : ^( OPTIONS ( option )* ) ;
	[GrammarRule("optionsSpec")]
	private void optionsSpec()
	{
		EnterRule_optionsSpec();
		EnterRule("optionsSpec", 7);
		TraceIn("optionsSpec", 7);
		try { DebugEnterRule(GrammarFileName, "optionsSpec");
		DebugLocation(123, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:124:2: ( ^( OPTIONS ( option )* ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:124:4: ^( OPTIONS ( option )* )
			{
			DebugLocation(124, 4);
			DebugLocation(124, 7);
			Match(input,OPTIONS,Follow._OPTIONS_in_optionsSpec362); 

			DebugLocation(124, 15);
			@out(" options {");

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(125, 4);
				// Grammars\\ANTLRTreePrinter.g3:125:4: ( option )*
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, false);
					int LA12_1 = input.LA(1);

					if ((LA12_1==ASSIGN))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch ( alt12 )
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\ANTLRTreePrinter.g3:125:5: option
						{
						DebugLocation(125, 5);
						PushFollow(Follow._option_in_optionsSpec370);
						option();
						PopFollow();

						DebugLocation(125, 12);
						@out("; ");

						}
						break;

					default:
						goto loop12;
					}
				}

				loop12:
					;

				} finally { DebugExitSubRule(12); }

				DebugLocation(126, 4);
				@out("} ");

				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("optionsSpec", 7);
			LeaveRule("optionsSpec", 7);
			LeaveRule_optionsSpec();
		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "optionsSpec"); }
		return;

	}
	// $ANTLR end "optionsSpec"

	partial void EnterRule_option();
	partial void LeaveRule_option();
	// $ANTLR start "option"
	// Grammars\\ANTLRTreePrinter.g3:130:1: option : ^( ASSIGN id= ID optionValue ) ;
	[GrammarRule("option")]
	private void option()
	{
		EnterRule_option();
		EnterRule("option", 8);
		TraceIn("option", 8);
		GrammarAST id = default(GrammarAST);

		try { DebugEnterRule(GrammarFileName, "option");
		DebugLocation(130, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:131:2: ( ^( ASSIGN id= ID optionValue ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:131:4: ^( ASSIGN id= ID optionValue )
			{
			DebugLocation(131, 4);
			DebugLocation(131, 7);
			Match(input,ASSIGN,Follow._ASSIGN_in_option396); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(131, 16);
			id=(GrammarAST)Match(input,ID,Follow._ID_in_option400); 
			DebugLocation(131, 20);
			@out((id!=null?id.Text:default(string))+"=");
			DebugLocation(131, 42);
			PushFollow(Follow._optionValue_in_option404);
			optionValue();
			PopFollow();


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("option", 8);
			LeaveRule("option", 8);
			LeaveRule_option();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "option"); }
		return;

	}
	// $ANTLR end "option"

	partial void EnterRule_optionValue();
	partial void LeaveRule_optionValue();
	// $ANTLR start "optionValue"
	// Grammars\\ANTLRTreePrinter.g3:134:1: optionValue : (id= ID |s= STRING_LITERAL |c= CHAR_LITERAL |i= INT );
	[GrammarRule("optionValue")]
	private void optionValue()
	{
		EnterRule_optionValue();
		EnterRule("optionValue", 9);
		TraceIn("optionValue", 9);
		GrammarAST id = default(GrammarAST);
		GrammarAST s = default(GrammarAST);
		GrammarAST c = default(GrammarAST);
		GrammarAST i = default(GrammarAST);

		try { DebugEnterRule(GrammarFileName, "optionValue");
		DebugLocation(134, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:135:2: (id= ID |s= STRING_LITERAL |c= CHAR_LITERAL |i= INT )
			int alt13=4;
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt13 = 1;
				}
				break;
			case STRING_LITERAL:
				{
				alt13 = 2;
				}
				break;
			case CHAR_LITERAL:
				{
				alt13 = 3;
				}
				break;
			case INT:
				{
				alt13 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:135:4: id= ID
				{
				DebugLocation(135, 6);
				id=(GrammarAST)Match(input,ID,Follow._ID_in_optionValue419); 
				DebugLocation(135, 21);
				@out((id!=null?id.Text:default(string)));

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\ANTLRTreePrinter.g3:136:4: s= STRING_LITERAL
				{
				DebugLocation(136, 5);
				s=(GrammarAST)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_optionValue439); 
				DebugLocation(136, 21);
				@out((s!=null?s.Text:default(string)));

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\ANTLRTreePrinter.g3:137:4: c= CHAR_LITERAL
				{
				DebugLocation(137, 5);
				c=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_optionValue448); 
				DebugLocation(137, 21);
				@out((c!=null?c.Text:default(string)));

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Grammars\\ANTLRTreePrinter.g3:138:4: i= INT
				{
				DebugLocation(138, 5);
				i=(GrammarAST)Match(input,INT,Follow._INT_in_optionValue459); 
				DebugLocation(138, 21);
				@out((i!=null?i.Text:default(string)));

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("optionValue", 9);
			LeaveRule("optionValue", 9);
			LeaveRule_optionValue();
		}
		DebugLocation(140, 1);
		} finally { DebugExitRule(GrammarFileName, "optionValue"); }
		return;

	}
	// $ANTLR end "optionValue"

	partial void EnterRule_delegateGrammars();
	partial void LeaveRule_delegateGrammars();
	// $ANTLR start "delegateGrammars"
	// Grammars\\ANTLRTreePrinter.g3:154:1: delegateGrammars : ^( 'import' ( ^( ASSIGN ID ID ) | ID )+ ) ;
	[GrammarRule("delegateGrammars")]
	private void delegateGrammars()
	{
		EnterRule_delegateGrammars();
		EnterRule("delegateGrammars", 10);
		TraceIn("delegateGrammars", 10);
		try { DebugEnterRule(GrammarFileName, "delegateGrammars");
		DebugLocation(154, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:155:2: ( ^( 'import' ( ^( ASSIGN ID ID ) | ID )+ ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:155:4: ^( 'import' ( ^( ASSIGN ID ID ) | ID )+ )
			{
			DebugLocation(155, 4);
			DebugLocation(155, 7);
			Match(input,IMPORT,Follow._IMPORT_in_delegateGrammars489); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(155, 16);
			// Grammars\\ANTLRTreePrinter.g3:155:16: ( ^( ASSIGN ID ID ) | ID )+
			int cnt14=0;
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=3;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==ASSIGN))
				{
					alt14 = 1;
				}
				else if ((LA14_1==ID))
				{
					alt14 = 2;
				}


				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:155:18: ^( ASSIGN ID ID )
					{
					DebugLocation(155, 18);
					DebugLocation(155, 20);
					Match(input,ASSIGN,Follow._ASSIGN_in_delegateGrammars494); 

					Match(input, TokenTypes.Down, null); 
					DebugLocation(155, 27);
					Match(input,ID,Follow._ID_in_delegateGrammars496); 
					DebugLocation(155, 30);
					Match(input,ID,Follow._ID_in_delegateGrammars498); 

					Match(input, TokenTypes.Up, null); 


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Grammars\\ANTLRTreePrinter.g3:155:36: ID
					{
					DebugLocation(155, 36);
					Match(input,ID,Follow._ID_in_delegateGrammars503); 

					}
					break;

				default:
					if (cnt14 >= 1)
						goto loop14;

					EarlyExitException eee14 = new EarlyExitException( 14, input );
					DebugRecognitionException(eee14);
					throw eee14;
				}
				cnt14++;
			}
			loop14:
				;

			} finally { DebugExitSubRule(14); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("delegateGrammars", 10);
			LeaveRule("delegateGrammars", 10);
			LeaveRule_delegateGrammars();
		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "delegateGrammars"); }
		return;

	}
	// $ANTLR end "delegateGrammars"

	partial void EnterRule_tokensSpec();
	partial void LeaveRule_tokensSpec();
	// $ANTLR start "tokensSpec"
	// Grammars\\ANTLRTreePrinter.g3:158:1: tokensSpec : ^( TOKENS ( tokenSpec )* ) ;
	[GrammarRule("tokensSpec")]
	private void tokensSpec()
	{
		EnterRule_tokensSpec();
		EnterRule("tokensSpec", 11);
		TraceIn("tokensSpec", 11);
		try { DebugEnterRule(GrammarFileName, "tokensSpec");
		DebugLocation(158, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:159:2: ( ^( TOKENS ( tokenSpec )* ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:159:4: ^( TOKENS ( tokenSpec )* )
			{
			DebugLocation(159, 4);
			DebugLocation(159, 6);
			Match(input,TOKENS,Follow._TOKENS_in_tokensSpec520); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(159, 13);
				// Grammars\\ANTLRTreePrinter.g3:159:13: ( tokenSpec )*
				try { DebugEnterSubRule(15);
				while (true)
				{
					int alt15=2;
					try { DebugEnterDecision(15, false);
					int LA15_1 = input.LA(1);

					if ((LA15_1==ASSIGN||LA15_1==TOKEN_REF))
					{
						alt15 = 1;
					}


					} finally { DebugExitDecision(15); }
					switch ( alt15 )
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\ANTLRTreePrinter.g3:159:13: tokenSpec
						{
						DebugLocation(159, 13);
						PushFollow(Follow._tokenSpec_in_tokensSpec522);
						tokenSpec();
						PopFollow();


						}
						break;

					default:
						goto loop15;
					}
				}

				loop15:
					;

				} finally { DebugExitSubRule(15); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tokensSpec", 11);
			LeaveRule("tokensSpec", 11);
			LeaveRule_tokensSpec();
		}
		DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "tokensSpec"); }
		return;

	}
	// $ANTLR end "tokensSpec"

	partial void EnterRule_tokenSpec();
	partial void LeaveRule_tokenSpec();
	// $ANTLR start "tokenSpec"
	// Grammars\\ANTLRTreePrinter.g3:162:1: tokenSpec : ( TOKEN_REF | ^( ASSIGN TOKEN_REF ( STRING_LITERAL | CHAR_LITERAL ) ) );
	[GrammarRule("tokenSpec")]
	private void tokenSpec()
	{
		EnterRule_tokenSpec();
		EnterRule("tokenSpec", 12);
		TraceIn("tokenSpec", 12);
		try { DebugEnterRule(GrammarFileName, "tokenSpec");
		DebugLocation(162, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:163:2: ( TOKEN_REF | ^( ASSIGN TOKEN_REF ( STRING_LITERAL | CHAR_LITERAL ) ) )
			int alt16=2;
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==TOKEN_REF))
			{
				alt16 = 1;
			}
			else if ((LA16_1==ASSIGN))
			{
				alt16 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:163:4: TOKEN_REF
				{
				DebugLocation(163, 4);
				Match(input,TOKEN_REF,Follow._TOKEN_REF_in_tokenSpec535); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\ANTLRTreePrinter.g3:164:4: ^( ASSIGN TOKEN_REF ( STRING_LITERAL | CHAR_LITERAL ) )
				{
				DebugLocation(164, 4);
				DebugLocation(164, 7);
				Match(input,ASSIGN,Follow._ASSIGN_in_tokenSpec542); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(164, 14);
				Match(input,TOKEN_REF,Follow._TOKEN_REF_in_tokenSpec544); 
				DebugLocation(164, 24);
				if (input.LA(1)==CHAR_LITERAL||input.LA(1)==STRING_LITERAL)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tokenSpec", 12);
			LeaveRule("tokenSpec", 12);
			LeaveRule_tokenSpec();
		}
		DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "tokenSpec"); }
		return;

	}
	// $ANTLR end "tokenSpec"

	partial void EnterRule_rules();
	partial void LeaveRule_rules();
	// $ANTLR start "rules"
	// Grammars\\ANTLRTreePrinter.g3:167:1: rules : ( rule | precRule )+ ;
	[GrammarRule("rules")]
	private void rules()
	{
		EnterRule_rules();
		EnterRule("rules", 13);
		TraceIn("rules", 13);
		try { DebugEnterRule(GrammarFileName, "rules");
		DebugLocation(167, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:168:2: ( ( rule | precRule )+ )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:168:4: ( rule | precRule )+
			{
			DebugLocation(168, 4);
			// Grammars\\ANTLRTreePrinter.g3:168:4: ( rule | precRule )+
			int cnt17=0;
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=3;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==RULE))
				{
					alt17 = 1;
				}
				else if ((LA17_1==PREC_RULE))
				{
					alt17 = 2;
				}


				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:168:6: rule
					{
					DebugLocation(168, 6);
					PushFollow(Follow._rule_in_rules565);
					rule();
					PopFollow();


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Grammars\\ANTLRTreePrinter.g3:168:13: precRule
					{
					DebugLocation(168, 13);
					PushFollow(Follow._precRule_in_rules569);
					precRule();
					PopFollow();


					}
					break;

				default:
					if (cnt17 >= 1)
						goto loop17;

					EarlyExitException eee17 = new EarlyExitException( 17, input );
					DebugRecognitionException(eee17);
					throw eee17;
				}
				cnt17++;
			}
			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rules", 13);
			LeaveRule("rules", 13);
			LeaveRule_rules();
		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "rules"); }
		return;

	}
	// $ANTLR end "rules"

	partial void EnterRule_rule();
	partial void LeaveRule_rule();
	// $ANTLR start "rule"
	// Grammars\\ANTLRTreePrinter.g3:171:1: rule : ^( RULE id= ID ( modifier )? ^( ARG (arg= ARG_ACTION )? ) ^( RET (ret= ARG_ACTION )? ) ( throwsSpec )? ( optionsSpec )? ( ruleScopeSpec )? ( ruleAction )* b= block[false] ( exceptionGroup )? EOR ) ;
	[GrammarRule("rule")]
	private void rule()
	{
		EnterRule_rule();
		EnterRule("rule", 14);
		TraceIn("rule", 14);
		GrammarAST id = default(GrammarAST);
		GrammarAST arg = default(GrammarAST);
		GrammarAST ret = default(GrammarAST);
		TreeRuleReturnScope<GrammarAST> b = default(TreeRuleReturnScope<GrammarAST>);

		try { DebugEnterRule(GrammarFileName, "rule");
		DebugLocation(171, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:172:2: ( ^( RULE id= ID ( modifier )? ^( ARG (arg= ARG_ACTION )? ) ^( RET (ret= ARG_ACTION )? ) ( throwsSpec )? ( optionsSpec )? ( ruleScopeSpec )? ( ruleAction )* b= block[false] ( exceptionGroup )? EOR ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:172:4: ^( RULE id= ID ( modifier )? ^( ARG (arg= ARG_ACTION )? ) ^( RET (ret= ARG_ACTION )? ) ( throwsSpec )? ( optionsSpec )? ( ruleScopeSpec )? ( ruleAction )* b= block[false] ( exceptionGroup )? EOR )
			{
			DebugLocation(172, 4);
			DebugLocation(172, 7);
			Match(input,RULE,Follow._RULE_in_rule585); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(172, 14);
			id=(GrammarAST)Match(input,ID,Follow._ID_in_rule589); 
			DebugLocation(173, 4);
			// Grammars\\ANTLRTreePrinter.g3:173:4: ( modifier )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==FRAGMENT||(LA18_1>=PRIVATE && LA18_1<=PUBLIC)))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:173:5: modifier
				{
				DebugLocation(173, 5);
				PushFollow(Follow._modifier_in_rule595);
				modifier();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(174, 4);
			@out((id!=null?id.Text:default(string)));
			DebugLocation(175, 4);
			DebugLocation(175, 6);
			Match(input,ARG,Follow._ARG_in_rule608); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(175, 10);
				// Grammars\\ANTLRTreePrinter.g3:175:10: (arg= ARG_ACTION )?
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==ARG_ACTION))
				{
					alt19 = 1;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:175:11: arg= ARG_ACTION
					{
					DebugLocation(175, 14);
					arg=(GrammarAST)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_rule613); 
					DebugLocation(175, 26);
					@out("["+(arg!=null?arg.Text:default(string))+"]");

					}
					break;

				}
				} finally { DebugExitSubRule(19); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(176, 4);
			DebugLocation(176, 6);
			Match(input,RET,Follow._RET_in_rule626); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(176, 10);
				// Grammars\\ANTLRTreePrinter.g3:176:10: (ret= ARG_ACTION )?
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==ARG_ACTION))
				{
					alt20 = 1;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:176:11: ret= ARG_ACTION
					{
					DebugLocation(176, 14);
					ret=(GrammarAST)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_rule631); 
					DebugLocation(176, 26);
					@out(" returns ["+(ret!=null?ret.Text:default(string))+"]");

					}
					break;

				}
				} finally { DebugExitSubRule(20); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(177, 4);
			// Grammars\\ANTLRTreePrinter.g3:177:4: ( throwsSpec )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==THROWS))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:177:5: throwsSpec
				{
				DebugLocation(177, 5);
				PushFollow(Follow._throwsSpec_in_rule644);
				throwsSpec();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(178, 4);
			// Grammars\\ANTLRTreePrinter.g3:178:4: ( optionsSpec )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==OPTIONS))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:178:5: optionsSpec
				{
				DebugLocation(178, 5);
				PushFollow(Follow._optionsSpec_in_rule652);
				optionsSpec();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(179, 4);
			// Grammars\\ANTLRTreePrinter.g3:179:4: ( ruleScopeSpec )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==SCOPE))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:179:5: ruleScopeSpec
				{
				DebugLocation(179, 5);
				PushFollow(Follow._ruleScopeSpec_in_rule660);
				ruleScopeSpec();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(180, 4);
			// Grammars\\ANTLRTreePrinter.g3:180:4: ( ruleAction )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_1 = input.LA(1);

				if ((LA24_1==AMPERSAND))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:180:5: ruleAction
					{
					DebugLocation(180, 5);
					PushFollow(Follow._ruleAction_in_rule668);
					ruleAction();
					PopFollow();


					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }

			DebugLocation(181, 4);
			@out(" :");
			DebugLocation(182, 4);

							if ( input.LA(5) == NOT || input.LA(5) == ASSIGN )
								@out(" ");
						
			DebugLocation(186, 5);
			PushFollow(Follow._block_in_rule687);
			b=block(false);
			PopFollow();

			DebugLocation(187, 4);
			// Grammars\\ANTLRTreePrinter.g3:187:4: ( exceptionGroup )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==CATCH||LA25_1==FINALLY))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:187:5: exceptionGroup
				{
				DebugLocation(187, 5);
				PushFollow(Follow._exceptionGroup_in_rule694);
				exceptionGroup();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(188, 4);
			Match(input,EOR,Follow._EOR_in_rule701); 
			DebugLocation(188, 8);
			@out(";\n");

			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rule", 14);
			LeaveRule("rule", 14);
			LeaveRule_rule();
		}
		DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "rule"); }
		return;

	}
	// $ANTLR end "rule"

	partial void EnterRule_precRule();
	partial void LeaveRule_precRule();
	// $ANTLR start "precRule"
	// Grammars\\ANTLRTreePrinter.g3:192:1: precRule : ^( PREC_RULE id= ID ( modifier )? ^( ARG (arg= ARG_ACTION )? ) ^( RET (ret= ARG_ACTION )? ) ( throwsSpec )? ( optionsSpec )? ( ruleScopeSpec )? ( ruleAction )* b= block[false] ( exceptionGroup )? EOR ) ;
	[GrammarRule("precRule")]
	private void precRule()
	{
		EnterRule_precRule();
		EnterRule("precRule", 15);
		TraceIn("precRule", 15);
		GrammarAST id = default(GrammarAST);
		GrammarAST arg = default(GrammarAST);
		GrammarAST ret = default(GrammarAST);
		TreeRuleReturnScope<GrammarAST> b = default(TreeRuleReturnScope<GrammarAST>);

		try { DebugEnterRule(GrammarFileName, "precRule");
		DebugLocation(192, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:193:2: ( ^( PREC_RULE id= ID ( modifier )? ^( ARG (arg= ARG_ACTION )? ) ^( RET (ret= ARG_ACTION )? ) ( throwsSpec )? ( optionsSpec )? ( ruleScopeSpec )? ( ruleAction )* b= block[false] ( exceptionGroup )? EOR ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:193:4: ^( PREC_RULE id= ID ( modifier )? ^( ARG (arg= ARG_ACTION )? ) ^( RET (ret= ARG_ACTION )? ) ( throwsSpec )? ( optionsSpec )? ( ruleScopeSpec )? ( ruleAction )* b= block[false] ( exceptionGroup )? EOR )
			{
			DebugLocation(193, 4);
			DebugLocation(193, 7);
			Match(input,PREC_RULE,Follow._PREC_RULE_in_precRule720); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(193, 19);
			id=(GrammarAST)Match(input,ID,Follow._ID_in_precRule724); 
			DebugLocation(194, 4);
			// Grammars\\ANTLRTreePrinter.g3:194:4: ( modifier )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==FRAGMENT||(LA26_1>=PRIVATE && LA26_1<=PUBLIC)))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:194:5: modifier
				{
				DebugLocation(194, 5);
				PushFollow(Follow._modifier_in_precRule730);
				modifier();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(195, 4);
			@out((id!=null?id.Text:default(string)));
			DebugLocation(196, 4);
			DebugLocation(196, 6);
			Match(input,ARG,Follow._ARG_in_precRule743); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(196, 10);
				// Grammars\\ANTLRTreePrinter.g3:196:10: (arg= ARG_ACTION )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==ARG_ACTION))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:196:11: arg= ARG_ACTION
					{
					DebugLocation(196, 14);
					arg=(GrammarAST)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_precRule748); 
					DebugLocation(196, 26);
					@out("["+(arg!=null?arg.Text:default(string))+"]");

					}
					break;

				}
				} finally { DebugExitSubRule(27); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(197, 4);
			DebugLocation(197, 6);
			Match(input,RET,Follow._RET_in_precRule761); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(197, 10);
				// Grammars\\ANTLRTreePrinter.g3:197:10: (ret= ARG_ACTION )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==ARG_ACTION))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:197:11: ret= ARG_ACTION
					{
					DebugLocation(197, 14);
					ret=(GrammarAST)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_precRule766); 
					DebugLocation(197, 26);
					@out(" returns ["+(ret!=null?ret.Text:default(string))+"]");

					}
					break;

				}
				} finally { DebugExitSubRule(28); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(198, 4);
			// Grammars\\ANTLRTreePrinter.g3:198:4: ( throwsSpec )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==THROWS))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:198:5: throwsSpec
				{
				DebugLocation(198, 5);
				PushFollow(Follow._throwsSpec_in_precRule779);
				throwsSpec();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(199, 4);
			// Grammars\\ANTLRTreePrinter.g3:199:4: ( optionsSpec )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_1 = input.LA(1);

			if ((LA30_1==OPTIONS))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:199:5: optionsSpec
				{
				DebugLocation(199, 5);
				PushFollow(Follow._optionsSpec_in_precRule787);
				optionsSpec();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(200, 4);
			// Grammars\\ANTLRTreePrinter.g3:200:4: ( ruleScopeSpec )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_1 = input.LA(1);

			if ((LA31_1==SCOPE))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:200:5: ruleScopeSpec
				{
				DebugLocation(200, 5);
				PushFollow(Follow._ruleScopeSpec_in_precRule795);
				ruleScopeSpec();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(201, 4);
			// Grammars\\ANTLRTreePrinter.g3:201:4: ( ruleAction )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_1 = input.LA(1);

				if ((LA32_1==AMPERSAND))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:201:5: ruleAction
					{
					DebugLocation(201, 5);
					PushFollow(Follow._ruleAction_in_precRule803);
					ruleAction();
					PopFollow();


					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }

			DebugLocation(202, 4);
			@out(" :");
			DebugLocation(203, 4);

							if ( input.LA(5) == NOT || input.LA(5) == ASSIGN )
								@out(" ");
						
			DebugLocation(207, 5);
			PushFollow(Follow._block_in_precRule822);
			b=block(false);
			PopFollow();

			DebugLocation(208, 4);
			// Grammars\\ANTLRTreePrinter.g3:208:4: ( exceptionGroup )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_1 = input.LA(1);

			if ((LA33_1==CATCH||LA33_1==FINALLY))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:208:5: exceptionGroup
				{
				DebugLocation(208, 5);
				PushFollow(Follow._exceptionGroup_in_precRule829);
				exceptionGroup();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(209, 4);
			Match(input,EOR,Follow._EOR_in_precRule836); 
			DebugLocation(209, 8);
			@out(";\n");

			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("precRule", 15);
			LeaveRule("precRule", 15);
			LeaveRule_precRule();
		}
		DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "precRule"); }
		return;

	}
	// $ANTLR end "precRule"

	partial void EnterRule_ruleAction();
	partial void LeaveRule_ruleAction();
	// $ANTLR start "ruleAction"
	// Grammars\\ANTLRTreePrinter.g3:213:1: ruleAction : ^( AMPERSAND id= ID a= ACTION ) ;
	[GrammarRule("ruleAction")]
	private void ruleAction()
	{
		EnterRule_ruleAction();
		EnterRule("ruleAction", 16);
		TraceIn("ruleAction", 16);
		GrammarAST id = default(GrammarAST);
		GrammarAST a = default(GrammarAST);

		try { DebugEnterRule(GrammarFileName, "ruleAction");
		DebugLocation(213, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:214:2: ( ^( AMPERSAND id= ID a= ACTION ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:214:4: ^( AMPERSAND id= ID a= ACTION )
			{
			DebugLocation(214, 4);
			DebugLocation(214, 6);
			Match(input,AMPERSAND,Follow._AMPERSAND_in_ruleAction854); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(214, 18);
			id=(GrammarAST)Match(input,ID,Follow._ID_in_ruleAction858); 
			DebugLocation(214, 23);
			a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_ruleAction862); 

			Match(input, TokenTypes.Up, null); 

			DebugLocation(215, 3);
			if ( showActions ) @out("@"+(id!=null?id.Text:default(string))+"{"+(a!=null?a.Text:default(string))+"}");

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ruleAction", 16);
			LeaveRule("ruleAction", 16);
			LeaveRule_ruleAction();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "ruleAction"); }
		return;

	}
	// $ANTLR end "ruleAction"

	partial void EnterRule_modifier();
	partial void LeaveRule_modifier();
	// $ANTLR start "modifier"
	// Grammars\\ANTLRTreePrinter.g3:218:1: modifier : ( 'protected' | 'public' | 'private' | 'fragment' );
	[GrammarRule("modifier")]
	private TreeRuleReturnScope<GrammarAST> modifier()
	{
		EnterRule_modifier();
		EnterRule("modifier", 17);
		TraceIn("modifier", 17);
		TreeRuleReturnScope<GrammarAST> retval = new TreeRuleReturnScope<GrammarAST>();
		retval.Start = (GrammarAST)input.LT(1);

		@out(retval.Start.Text); @out(" ");
		try { DebugEnterRule(GrammarFileName, "modifier");
		DebugLocation(218, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:221:2: ( 'protected' | 'public' | 'private' | 'fragment' )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:
			{
			DebugLocation(221, 2);
			if (input.LA(1)==FRAGMENT||(input.LA(1)>=PRIVATE && input.LA(1)<=PUBLIC))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("modifier", 17);
			LeaveRule("modifier", 17);
			LeaveRule_modifier();
		}
		DebugLocation(225, 1);
		} finally { DebugExitRule(GrammarFileName, "modifier"); }
		return retval;

	}
	// $ANTLR end "modifier"

	partial void EnterRule_throwsSpec();
	partial void LeaveRule_throwsSpec();
	// $ANTLR start "throwsSpec"
	// Grammars\\ANTLRTreePrinter.g3:227:1: throwsSpec : ^( 'throws' ( ID )+ ) ;
	[GrammarRule("throwsSpec")]
	private void throwsSpec()
	{
		EnterRule_throwsSpec();
		EnterRule("throwsSpec", 18);
		TraceIn("throwsSpec", 18);
		try { DebugEnterRule(GrammarFileName, "throwsSpec");
		DebugLocation(227, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:228:2: ( ^( 'throws' ( ID )+ ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:228:4: ^( 'throws' ( ID )+ )
			{
			DebugLocation(228, 4);
			DebugLocation(228, 6);
			Match(input,THROWS,Follow._THROWS_in_throwsSpec911); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(228, 15);
			// Grammars\\ANTLRTreePrinter.g3:228:15: ( ID )+
			int cnt34=0;
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if ((LA34_1==ID))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:228:15: ID
					{
					DebugLocation(228, 15);
					Match(input,ID,Follow._ID_in_throwsSpec913); 

					}
					break;

				default:
					if (cnt34 >= 1)
						goto loop34;

					EarlyExitException eee34 = new EarlyExitException( 34, input );
					DebugRecognitionException(eee34);
					throw eee34;
				}
				cnt34++;
			}
			loop34:
				;

			} finally { DebugExitSubRule(34); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("throwsSpec", 18);
			LeaveRule("throwsSpec", 18);
			LeaveRule_throwsSpec();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "throwsSpec"); }
		return;

	}
	// $ANTLR end "throwsSpec"

	partial void EnterRule_ruleScopeSpec();
	partial void LeaveRule_ruleScopeSpec();
	// $ANTLR start "ruleScopeSpec"
	// Grammars\\ANTLRTreePrinter.g3:231:1: ruleScopeSpec : ^( 'scope' ( ruleAction )* ( ACTION )? ( ID )* ) ;
	[GrammarRule("ruleScopeSpec")]
	private void ruleScopeSpec()
	{
		EnterRule_ruleScopeSpec();
		EnterRule("ruleScopeSpec", 19);
		TraceIn("ruleScopeSpec", 19);
		try { DebugEnterRule(GrammarFileName, "ruleScopeSpec");
		DebugLocation(231, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:232:2: ( ^( 'scope' ( ruleAction )* ( ACTION )? ( ID )* ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:232:4: ^( 'scope' ( ruleAction )* ( ACTION )? ( ID )* )
			{
			DebugLocation(232, 4);
			DebugLocation(232, 7);
			Match(input,SCOPE,Follow._SCOPE_in_ruleScopeSpec928); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(232, 15);
				// Grammars\\ANTLRTreePrinter.g3:232:15: ( ruleAction )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_1 = input.LA(1);

					if ((LA35_1==AMPERSAND))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\ANTLRTreePrinter.g3:232:15: ruleAction
						{
						DebugLocation(232, 15);
						PushFollow(Follow._ruleAction_in_ruleScopeSpec930);
						ruleAction();
						PopFollow();


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(232, 27);
				// Grammars\\ANTLRTreePrinter.g3:232:27: ( ACTION )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, false);
				int LA36_1 = input.LA(1);

				if ((LA36_1==ACTION))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:232:28: ACTION
					{
					DebugLocation(232, 28);
					Match(input,ACTION,Follow._ACTION_in_ruleScopeSpec934); 

					}
					break;

				}
				} finally { DebugExitSubRule(36); }

				DebugLocation(232, 37);
				// Grammars\\ANTLRTreePrinter.g3:232:37: ( ID )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_1 = input.LA(1);

					if ((LA37_1==ID))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\ANTLRTreePrinter.g3:232:39: ID
						{
						DebugLocation(232, 39);
						Match(input,ID,Follow._ID_in_ruleScopeSpec940); 

						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ruleScopeSpec", 19);
			LeaveRule("ruleScopeSpec", 19);
			LeaveRule_ruleScopeSpec();
		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "ruleScopeSpec"); }
		return;

	}
	// $ANTLR end "ruleScopeSpec"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Grammars\\ANTLRTreePrinter.g3:235:1: block[bool forceParens] : ^( BLOCK ( optionsSpec )? alternative rewrite ( alternative rewrite )* EOB ) ;
	[GrammarRule("block")]
	private TreeRuleReturnScope<GrammarAST> block(bool forceParens)
	{
		EnterRule_block();
		EnterRule("block", 20);
		TraceIn("block", 20);
		TreeRuleReturnScope<GrammarAST> retval = new TreeRuleReturnScope<GrammarAST>();
		retval.Start = (GrammarAST)input.LT(1);


		int numAlts = CountAltsForBlock(retval.Start);

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(235, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:240:2: ( ^( BLOCK ( optionsSpec )? alternative rewrite ( alternative rewrite )* EOB ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:240:4: ^( BLOCK ( optionsSpec )? alternative rewrite ( alternative rewrite )* EOB )
			{
			DebugLocation(240, 4);
			DebugLocation(240, 7);
			Match(input,BLOCK,Follow._BLOCK_in_block964); 

			DebugLocation(241, 4);

							if ( forceParens||numAlts>1 )
							{
								//for ( Antlr.Runtime.Tree.Tree parent = retval.Start.getParent(); parent != null && parent.getType() != RULE; parent = parent.getParent() )
								//{
								//	if ( parent.getType() == BLOCK && countAltsForBlock((GrammarAST)parent) > 1 )
								//	{
								//		@out(" ");
								//		break;
								//	}
								//}
								@out(" (");
							}
						

			Match(input, TokenTypes.Down, null); 
			DebugLocation(255, 4);
			// Grammars\\ANTLRTreePrinter.g3:255:4: ( optionsSpec )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_1 = input.LA(1);

			if ((LA38_1==OPTIONS))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:255:5: optionsSpec
				{
				DebugLocation(255, 5);
				PushFollow(Follow._optionsSpec_in_block975);
				optionsSpec();
				PopFollow();

				DebugLocation(255, 17);
				@out(" :");

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(256, 4);
			PushFollow(Follow._alternative_in_block985);
			alternative();
			PopFollow();

			DebugLocation(256, 16);
			PushFollow(Follow._rewrite_in_block987);
			rewrite();
			PopFollow();

			DebugLocation(256, 24);
			// Grammars\\ANTLRTreePrinter.g3:256:24: ( alternative rewrite )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_1 = input.LA(1);

				if ((LA39_1==ALT))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:256:26: alternative rewrite
					{
					DebugLocation(256, 26);
					@out("|");
					DebugLocation(256, 39);
					PushFollow(Follow._alternative_in_block993);
					alternative();
					PopFollow();

					DebugLocation(256, 51);
					PushFollow(Follow._rewrite_in_block995);
					rewrite();
					PopFollow();


					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }

			DebugLocation(257, 4);
			Match(input,EOB,Follow._EOB_in_block1003); 
			DebugLocation(257, 10);
			if ( forceParens||numAlts>1 ) @out(")");

			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block", 20);
			LeaveRule("block", 20);
			LeaveRule_block();
		}
		DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_alternative();
	partial void LeaveRule_alternative();
	// $ANTLR start "alternative"
	// Grammars\\ANTLRTreePrinter.g3:261:1: alternative : ^( ALT ( element )* EOA ) ;
	[GrammarRule("alternative")]
	private void alternative()
	{
		EnterRule_alternative();
		EnterRule("alternative", 21);
		TraceIn("alternative", 21);
		try { DebugEnterRule(GrammarFileName, "alternative");
		DebugLocation(261, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:262:2: ( ^( ALT ( element )* EOA ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:262:4: ^( ALT ( element )* EOA )
			{
			DebugLocation(262, 4);
			DebugLocation(262, 7);
			Match(input,ALT,Follow._ALT_in_alternative1025); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(262, 11);
			// Grammars\\ANTLRTreePrinter.g3:262:11: ( element )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==ACTION||(LA40_1>=ASSIGN && LA40_1<=BLOCK)||(LA40_1>=CHAR_LITERAL && LA40_1<=CHAR_RANGE)||LA40_1==CLOSURE||LA40_1==DOT||LA40_1==EPSILON||LA40_1==FORCED_ACTION||LA40_1==GATED_SEMPRED||LA40_1==LABEL||LA40_1==NOT||LA40_1==OPTIONAL||(LA40_1>=PLUS_ASSIGN && LA40_1<=POSITIVE_CLOSURE)||LA40_1==RANGE||LA40_1==ROOT||LA40_1==RULE_REF||LA40_1==SEMPRED||(LA40_1>=STRING_LITERAL && LA40_1<=SYN_SEMPRED)||LA40_1==TOKEN_REF||LA40_1==TREE_BEGIN||LA40_1==WILDCARD))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:262:11: element
					{
					DebugLocation(262, 11);
					PushFollow(Follow._element_in_alternative1027);
					element();
					PopFollow();


					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }

			DebugLocation(262, 20);
			Match(input,EOA,Follow._EOA_in_alternative1030); 

			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alternative", 21);
			LeaveRule("alternative", 21);
			LeaveRule_alternative();
		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "alternative"); }
		return;

	}
	// $ANTLR end "alternative"

	partial void EnterRule_exceptionGroup();
	partial void LeaveRule_exceptionGroup();
	// $ANTLR start "exceptionGroup"
	// Grammars\\ANTLRTreePrinter.g3:265:1: exceptionGroup : ( ( exceptionHandler )+ ( finallyClause )? | finallyClause );
	[GrammarRule("exceptionGroup")]
	private void exceptionGroup()
	{
		EnterRule_exceptionGroup();
		EnterRule("exceptionGroup", 22);
		TraceIn("exceptionGroup", 22);
		try { DebugEnterRule(GrammarFileName, "exceptionGroup");
		DebugLocation(265, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:266:2: ( ( exceptionHandler )+ ( finallyClause )? | finallyClause )
			int alt43=2;
			try { DebugEnterDecision(43, false);
			int LA43_1 = input.LA(1);

			if ((LA43_1==CATCH))
			{
				alt43 = 1;
			}
			else if ((LA43_1==FINALLY))
			{
				alt43 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:266:4: ( exceptionHandler )+ ( finallyClause )?
				{
				DebugLocation(266, 4);
				// Grammars\\ANTLRTreePrinter.g3:266:4: ( exceptionHandler )+
				int cnt41=0;
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=2;
					try { DebugEnterDecision(41, false);
					int LA41_1 = input.LA(1);

					if ((LA41_1==CATCH))
					{
						alt41 = 1;
					}


					} finally { DebugExitDecision(41); }
					switch (alt41)
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\ANTLRTreePrinter.g3:266:6: exceptionHandler
						{
						DebugLocation(266, 6);
						PushFollow(Follow._exceptionHandler_in_exceptionGroup1045);
						exceptionHandler();
						PopFollow();


						}
						break;

					default:
						if (cnt41 >= 1)
							goto loop41;

						EarlyExitException eee41 = new EarlyExitException( 41, input );
						DebugRecognitionException(eee41);
						throw eee41;
					}
					cnt41++;
				}
				loop41:
					;

				} finally { DebugExitSubRule(41); }

				DebugLocation(266, 26);
				// Grammars\\ANTLRTreePrinter.g3:266:26: ( finallyClause )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				int LA42_1 = input.LA(1);

				if ((LA42_1==FINALLY))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:266:27: finallyClause
					{
					DebugLocation(266, 27);
					PushFollow(Follow._finallyClause_in_exceptionGroup1051);
					finallyClause();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(42); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\ANTLRTreePrinter.g3:267:4: finallyClause
				{
				DebugLocation(267, 4);
				PushFollow(Follow._finallyClause_in_exceptionGroup1058);
				finallyClause();
				PopFollow();


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exceptionGroup", 22);
			LeaveRule("exceptionGroup", 22);
			LeaveRule_exceptionGroup();
		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "exceptionGroup"); }
		return;

	}
	// $ANTLR end "exceptionGroup"

	partial void EnterRule_exceptionHandler();
	partial void LeaveRule_exceptionHandler();
	// $ANTLR start "exceptionHandler"
	// Grammars\\ANTLRTreePrinter.g3:270:1: exceptionHandler : ^( 'catch' ARG_ACTION ACTION ) ;
	[GrammarRule("exceptionHandler")]
	private void exceptionHandler()
	{
		EnterRule_exceptionHandler();
		EnterRule("exceptionHandler", 23);
		TraceIn("exceptionHandler", 23);
		try { DebugEnterRule(GrammarFileName, "exceptionHandler");
		DebugLocation(270, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:271:2: ( ^( 'catch' ARG_ACTION ACTION ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:271:4: ^( 'catch' ARG_ACTION ACTION )
			{
			DebugLocation(271, 4);
			DebugLocation(271, 6);
			Match(input,CATCH,Follow._CATCH_in_exceptionHandler1070); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(271, 14);
			Match(input,ARG_ACTION,Follow._ARG_ACTION_in_exceptionHandler1072); 
			DebugLocation(271, 25);
			Match(input,ACTION,Follow._ACTION_in_exceptionHandler1074); 

			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exceptionHandler", 23);
			LeaveRule("exceptionHandler", 23);
			LeaveRule_exceptionHandler();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "exceptionHandler"); }
		return;

	}
	// $ANTLR end "exceptionHandler"

	partial void EnterRule_finallyClause();
	partial void LeaveRule_finallyClause();
	// $ANTLR start "finallyClause"
	// Grammars\\ANTLRTreePrinter.g3:274:1: finallyClause : ^( 'finally' ACTION ) ;
	[GrammarRule("finallyClause")]
	private void finallyClause()
	{
		EnterRule_finallyClause();
		EnterRule("finallyClause", 24);
		TraceIn("finallyClause", 24);
		try { DebugEnterRule(GrammarFileName, "finallyClause");
		DebugLocation(274, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:275:2: ( ^( 'finally' ACTION ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:275:4: ^( 'finally' ACTION )
			{
			DebugLocation(275, 4);
			DebugLocation(275, 6);
			Match(input,FINALLY,Follow._FINALLY_in_finallyClause1087); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(275, 16);
			Match(input,ACTION,Follow._ACTION_in_finallyClause1089); 

			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("finallyClause", 24);
			LeaveRule("finallyClause", 24);
			LeaveRule_finallyClause();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "finallyClause"); }
		return;

	}
	// $ANTLR end "finallyClause"

	partial void EnterRule_rewrite();
	partial void LeaveRule_rewrite();
	// $ANTLR start "rewrite"
	// Grammars\\ANTLRTreePrinter.g3:278:1: rewrite : ( ^( REWRITES ( single_rewrite )+ ) |);
	[GrammarRule("rewrite")]
	private void rewrite()
	{
		EnterRule_rewrite();
		EnterRule("rewrite", 25);
		TraceIn("rewrite", 25);
		try { DebugEnterRule(GrammarFileName, "rewrite");
		DebugLocation(278, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:279:2: ( ^( REWRITES ( single_rewrite )+ ) |)
			int alt45=2;
			try { DebugEnterDecision(45, false);
			int LA45_1 = input.LA(1);

			if ((LA45_1==REWRITES))
			{
				alt45 = 1;
			}
			else if ((LA45_1==EOF||LA45_1==ALT||LA45_1==EOB))
			{
				alt45 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:279:4: ^( REWRITES ( single_rewrite )+ )
				{
				DebugLocation(279, 4);
				DebugLocation(279, 6);
				Match(input,REWRITES,Follow._REWRITES_in_rewrite1102); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(279, 15);
				// Grammars\\ANTLRTreePrinter.g3:279:15: ( single_rewrite )+
				int cnt44=0;
				try { DebugEnterSubRule(44);
				while (true)
				{
					int alt44=2;
					try { DebugEnterDecision(44, false);
					int LA44_1 = input.LA(1);

					if ((LA44_1==REWRITE))
					{
						alt44 = 1;
					}


					} finally { DebugExitDecision(44); }
					switch (alt44)
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\ANTLRTreePrinter.g3:279:15: single_rewrite
						{
						DebugLocation(279, 15);
						PushFollow(Follow._single_rewrite_in_rewrite1104);
						single_rewrite();
						PopFollow();


						}
						break;

					default:
						if (cnt44 >= 1)
							goto loop44;

						EarlyExitException eee44 = new EarlyExitException( 44, input );
						DebugRecognitionException(eee44);
						throw eee44;
					}
					cnt44++;
				}
				loop44:
					;

				} finally { DebugExitSubRule(44); }


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\ANTLRTreePrinter.g3:281:2: 
				{
				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rewrite", 25);
			LeaveRule("rewrite", 25);
			LeaveRule_rewrite();
		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "rewrite"); }
		return;

	}
	// $ANTLR end "rewrite"

	partial void EnterRule_single_rewrite();
	partial void LeaveRule_single_rewrite();
	// $ANTLR start "single_rewrite"
	// Grammars\\ANTLRTreePrinter.g3:283:1: single_rewrite : ^( REWRITE ( SEMPRED )? ( alternative | rewrite_template | ETC | ACTION ) ) ;
	[GrammarRule("single_rewrite")]
	private void single_rewrite()
	{
		EnterRule_single_rewrite();
		EnterRule("single_rewrite", 26);
		TraceIn("single_rewrite", 26);
		GrammarAST SEMPRED1 = default(GrammarAST);
		GrammarAST ACTION2 = default(GrammarAST);

		try { DebugEnterRule(GrammarFileName, "single_rewrite");
		DebugLocation(283, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:284:2: ( ^( REWRITE ( SEMPRED )? ( alternative | rewrite_template | ETC | ACTION ) ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:284:4: ^( REWRITE ( SEMPRED )? ( alternative | rewrite_template | ETC | ACTION ) )
			{
			DebugLocation(284, 4);
			DebugLocation(284, 7);
			Match(input,REWRITE,Follow._REWRITE_in_single_rewrite1122); 

			DebugLocation(284, 15);
			@out(" ->");

			Match(input, TokenTypes.Down, null); 
			DebugLocation(285, 4);
			// Grammars\\ANTLRTreePrinter.g3:285:4: ( SEMPRED )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_1 = input.LA(1);

			if ((LA46_1==SEMPRED))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:285:6: SEMPRED
				{
				DebugLocation(285, 6);
				SEMPRED1=(GrammarAST)Match(input,SEMPRED,Follow._SEMPRED_in_single_rewrite1131); 
				DebugLocation(285, 14);
				@out(" {"+(SEMPRED1!=null?SEMPRED1.Text:default(string))+"}?");

				}
				break;

			}
			} finally { DebugExitSubRule(46); }

			DebugLocation(287, 4);
			// Grammars\\ANTLRTreePrinter.g3:287:4: ( alternative | rewrite_template | ETC | ACTION )
			int alt47=4;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			switch (input.LA(1))
			{
			case ALT:
				{
				alt47 = 1;
				}
				break;
			case TEMPLATE:
				{
				alt47 = 2;
				}
				break;
			case ETC:
				{
				alt47 = 3;
				}
				break;
			case ACTION:
				{
				alt47 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:287:6: alternative
				{
				DebugLocation(287, 6);
				PushFollow(Follow._alternative_in_single_rewrite1146);
				alternative();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\ANTLRTreePrinter.g3:288:6: rewrite_template
				{
				DebugLocation(288, 6);
				PushFollow(Follow._rewrite_template_in_single_rewrite1153);
				rewrite_template();
				PopFollow();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\ANTLRTreePrinter.g3:289:6: ETC
				{
				DebugLocation(289, 6);
				Match(input,ETC,Follow._ETC_in_single_rewrite1160); 
				DebugLocation(289, 10);
				@out("...");

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Grammars\\ANTLRTreePrinter.g3:290:6: ACTION
				{
				DebugLocation(290, 6);
				ACTION2=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_single_rewrite1169); 
				DebugLocation(290, 13);
				@out(" {"+(ACTION2!=null?ACTION2.Text:default(string))+"}");

				}
				break;

			}
			} finally { DebugExitSubRule(47); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("single_rewrite", 26);
			LeaveRule("single_rewrite", 26);
			LeaveRule_single_rewrite();
		}
		DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "single_rewrite"); }
		return;

	}
	// $ANTLR end "single_rewrite"

	partial void EnterRule_rewrite_template();
	partial void LeaveRule_rewrite_template();
	// $ANTLR start "rewrite_template"
	// Grammars\\ANTLRTreePrinter.g3:295:1: rewrite_template : ^( TEMPLATE (id= ID |ind= ACTION ) ^( ARGLIST ( ^( ARG arg= ID a= ACTION ) )* ) ( DOUBLE_QUOTE_STRING_LITERAL | DOUBLE_ANGLE_STRING_LITERAL )? ) ;
	[GrammarRule("rewrite_template")]
	private void rewrite_template()
	{
		EnterRule_rewrite_template();
		EnterRule("rewrite_template", 27);
		TraceIn("rewrite_template", 27);
		GrammarAST id = default(GrammarAST);
		GrammarAST ind = default(GrammarAST);
		GrammarAST arg = default(GrammarAST);
		GrammarAST a = default(GrammarAST);
		GrammarAST DOUBLE_QUOTE_STRING_LITERAL3 = default(GrammarAST);
		GrammarAST DOUBLE_ANGLE_STRING_LITERAL4 = default(GrammarAST);

		try { DebugEnterRule(GrammarFileName, "rewrite_template");
		DebugLocation(295, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:296:2: ( ^( TEMPLATE (id= ID |ind= ACTION ) ^( ARGLIST ( ^( ARG arg= ID a= ACTION ) )* ) ( DOUBLE_QUOTE_STRING_LITERAL | DOUBLE_ANGLE_STRING_LITERAL )? ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:296:4: ^( TEMPLATE (id= ID |ind= ACTION ) ^( ARGLIST ( ^( ARG arg= ID a= ACTION ) )* ) ( DOUBLE_QUOTE_STRING_LITERAL | DOUBLE_ANGLE_STRING_LITERAL )? )
			{
			DebugLocation(296, 4);
			DebugLocation(296, 7);
			Match(input,TEMPLATE,Follow._TEMPLATE_in_rewrite_template1193); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(297, 4);
			// Grammars\\ANTLRTreePrinter.g3:297:4: (id= ID |ind= ACTION )
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_1 = input.LA(1);

			if ((LA48_1==ID))
			{
				alt48 = 1;
			}
			else if ((LA48_1==ACTION))
			{
				alt48 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:297:6: id= ID
				{
				DebugLocation(297, 8);
				id=(GrammarAST)Match(input,ID,Follow._ID_in_rewrite_template1202); 
				DebugLocation(297, 12);
				@out(" "+(id!=null?id.Text:default(string)));

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\ANTLRTreePrinter.g3:298:6: ind= ACTION
				{
				DebugLocation(298, 9);
				ind=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_rewrite_template1213); 
				DebugLocation(298, 17);
				@out(" ({"+(ind!=null?ind.Text:default(string))+"})");

				}
				break;

			}
			} finally { DebugExitSubRule(48); }

			DebugLocation(300, 4);
			DebugLocation(300, 7);
			Match(input,ARGLIST,Follow._ARGLIST_in_rewrite_template1227); 

			DebugLocation(301, 5);
			@out("(");

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(302, 5);
				// Grammars\\ANTLRTreePrinter.g3:302:5: ( ^( ARG arg= ID a= ACTION ) )*
				try { DebugEnterSubRule(49);
				while (true)
				{
					int alt49=2;
					try { DebugEnterDecision(49, false);
					int LA49_1 = input.LA(1);

					if ((LA49_1==ARG))
					{
						alt49 = 1;
					}


					} finally { DebugExitDecision(49); }
					switch ( alt49 )
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\ANTLRTreePrinter.g3:302:7: ^( ARG arg= ID a= ACTION )
						{
						DebugLocation(302, 7);
						DebugLocation(302, 10);
						Match(input,ARG,Follow._ARG_in_rewrite_template1243); 

						Match(input, TokenTypes.Down, null); 
						DebugLocation(302, 17);
						arg=(GrammarAST)Match(input,ID,Follow._ID_in_rewrite_template1247); 
						DebugLocation(302, 21);
						@out((arg!=null?arg.Text:default(string))+"=");
						DebugLocation(303, 8);
						a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_rewrite_template1259); 
						DebugLocation(303, 18);
						@out((a!=null?a.Text:default(string)));

						Match(input, TokenTypes.Up, null); 


						}
						break;

					default:
						goto loop49;
					}
				}

				loop49:
					;

				} finally { DebugExitSubRule(49); }

				DebugLocation(306, 5);
				@out(")");

				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(308, 4);
			// Grammars\\ANTLRTreePrinter.g3:308:4: ( DOUBLE_QUOTE_STRING_LITERAL | DOUBLE_ANGLE_STRING_LITERAL )?
			int alt50=3;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_1 = input.LA(1);

			if ((LA50_1==DOUBLE_QUOTE_STRING_LITERAL))
			{
				alt50 = 1;
			}
			else if ((LA50_1==DOUBLE_ANGLE_STRING_LITERAL))
			{
				alt50 = 2;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:308:6: DOUBLE_QUOTE_STRING_LITERAL
				{
				DebugLocation(308, 6);
				DOUBLE_QUOTE_STRING_LITERAL3=(GrammarAST)Match(input,DOUBLE_QUOTE_STRING_LITERAL,Follow._DOUBLE_QUOTE_STRING_LITERAL_in_rewrite_template1295); 
				DebugLocation(308, 34);
				@out(" "+(DOUBLE_QUOTE_STRING_LITERAL3!=null?DOUBLE_QUOTE_STRING_LITERAL3.Text:default(string)));

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\ANTLRTreePrinter.g3:309:6: DOUBLE_ANGLE_STRING_LITERAL
				{
				DebugLocation(309, 6);
				DOUBLE_ANGLE_STRING_LITERAL4=(GrammarAST)Match(input,DOUBLE_ANGLE_STRING_LITERAL,Follow._DOUBLE_ANGLE_STRING_LITERAL_in_rewrite_template1304); 
				DebugLocation(309, 34);
				@out(" "+(DOUBLE_ANGLE_STRING_LITERAL4!=null?DOUBLE_ANGLE_STRING_LITERAL4.Text:default(string)));

				}
				break;

			}
			} finally { DebugExitSubRule(50); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rewrite_template", 27);
			LeaveRule("rewrite_template", 27);
			LeaveRule_rewrite_template();
		}
		DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "rewrite_template"); }
		return;

	}
	// $ANTLR end "rewrite_template"

	partial void EnterRule_element();
	partial void LeaveRule_element();
	// $ANTLR start "element"
	// Grammars\\ANTLRTreePrinter.g3:314:1: element : ( ^( ROOT element ) | ^( BANG element ) | atom | ^( NOT element ) | ^( RANGE atom atom ) | ^( CHAR_RANGE atom atom ) | ^( ASSIGN id= ID element ) | ^( PLUS_ASSIGN id2= ID element ) | ebnf | tree_ | ^( SYNPRED block[true] ) |a= ACTION |a2= FORCED_ACTION |pred= SEMPRED |spred= SYN_SEMPRED | ^( BACKTRACK_SEMPRED ( . )* ) |gpred= GATED_SEMPRED | EPSILON );
	[GrammarRule("element")]
	private void element()
	{
		EnterRule_element();
		EnterRule("element", 28);
		TraceIn("element", 28);
		GrammarAST id = default(GrammarAST);
		GrammarAST id2 = default(GrammarAST);
		GrammarAST a = default(GrammarAST);
		GrammarAST a2 = default(GrammarAST);
		GrammarAST pred = default(GrammarAST);
		GrammarAST spred = default(GrammarAST);
		GrammarAST gpred = default(GrammarAST);

		try { DebugEnterRule(GrammarFileName, "element");
		DebugLocation(314, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:315:2: ( ^( ROOT element ) | ^( BANG element ) | atom | ^( NOT element ) | ^( RANGE atom atom ) | ^( CHAR_RANGE atom atom ) | ^( ASSIGN id= ID element ) | ^( PLUS_ASSIGN id2= ID element ) | ebnf | tree_ | ^( SYNPRED block[true] ) |a= ACTION |a2= FORCED_ACTION |pred= SEMPRED |spred= SYN_SEMPRED | ^( BACKTRACK_SEMPRED ( . )* ) |gpred= GATED_SEMPRED | EPSILON )
			int alt52=18;
			try { DebugEnterDecision(52, false);
			switch (input.LA(1))
			{
			case ROOT:
				{
				alt52 = 1;
				}
				break;
			case BANG:
				{
				alt52 = 2;
				}
				break;
			case CHAR_LITERAL:
			case DOT:
			case LABEL:
			case RULE_REF:
			case STRING_LITERAL:
			case TOKEN_REF:
			case WILDCARD:
				{
				alt52 = 3;
				}
				break;
			case NOT:
				{
				alt52 = 4;
				}
				break;
			case RANGE:
				{
				alt52 = 5;
				}
				break;
			case CHAR_RANGE:
				{
				alt52 = 6;
				}
				break;
			case ASSIGN:
				{
				alt52 = 7;
				}
				break;
			case PLUS_ASSIGN:
				{
				alt52 = 8;
				}
				break;
			case BLOCK:
			case CLOSURE:
			case OPTIONAL:
			case POSITIVE_CLOSURE:
				{
				alt52 = 9;
				}
				break;
			case TREE_BEGIN:
				{
				alt52 = 10;
				}
				break;
			case SYNPRED:
				{
				alt52 = 11;
				}
				break;
			case ACTION:
				{
				alt52 = 12;
				}
				break;
			case FORCED_ACTION:
				{
				alt52 = 13;
				}
				break;
			case SEMPRED:
				{
				alt52 = 14;
				}
				break;
			case SYN_SEMPRED:
				{
				alt52 = 15;
				}
				break;
			case BACKTRACK_SEMPRED:
				{
				alt52 = 16;
				}
				break;
			case GATED_SEMPRED:
				{
				alt52 = 17;
				}
				break;
			case EPSILON:
				{
				alt52 = 18;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 52, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:315:4: ^( ROOT element )
				{
				DebugLocation(315, 4);
				DebugLocation(315, 6);
				Match(input,ROOT,Follow._ROOT_in_element1328); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(315, 11);
				PushFollow(Follow._element_in_element1330);
				element();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(315, 20);
				@out("^");

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\ANTLRTreePrinter.g3:316:4: ^( BANG element )
				{
				DebugLocation(316, 4);
				DebugLocation(316, 6);
				Match(input,BANG,Follow._BANG_in_element1339); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(316, 11);
				PushFollow(Follow._element_in_element1341);
				element();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(316, 20);
				@out("!");

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\ANTLRTreePrinter.g3:317:4: atom
				{
				DebugLocation(317, 4);
				PushFollow(Follow._atom_in_element1349);
				atom();
				PopFollow();


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Grammars\\ANTLRTreePrinter.g3:318:4: ^( NOT element )
				{
				DebugLocation(318, 4);
				DebugLocation(318, 6);
				Match(input,NOT,Follow._NOT_in_element1355); 

				DebugLocation(318, 10);
				@out("~");

				Match(input, TokenTypes.Down, null); 
				DebugLocation(318, 23);
				PushFollow(Follow._element_in_element1359);
				element();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Grammars\\ANTLRTreePrinter.g3:319:4: ^( RANGE atom atom )
				{
				DebugLocation(319, 4);
				DebugLocation(319, 6);
				Match(input,RANGE,Follow._RANGE_in_element1366); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(319, 12);
				PushFollow(Follow._atom_in_element1368);
				atom();
				PopFollow();

				DebugLocation(319, 17);
				@out("..");
				DebugLocation(319, 31);
				PushFollow(Follow._atom_in_element1372);
				atom();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Grammars\\ANTLRTreePrinter.g3:320:4: ^( CHAR_RANGE atom atom )
				{
				DebugLocation(320, 4);
				DebugLocation(320, 6);
				Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_element1379); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(320, 17);
				PushFollow(Follow._atom_in_element1381);
				atom();
				PopFollow();

				DebugLocation(320, 22);
				@out("..");
				DebugLocation(320, 36);
				PushFollow(Follow._atom_in_element1385);
				atom();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Grammars\\ANTLRTreePrinter.g3:321:4: ^( ASSIGN id= ID element )
				{
				DebugLocation(321, 4);
				DebugLocation(321, 6);
				Match(input,ASSIGN,Follow._ASSIGN_in_element1392); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(321, 15);
				id=(GrammarAST)Match(input,ID,Follow._ID_in_element1396); 
				DebugLocation(321, 19);
				@out((id!=null?id.Text:default(string))+"=");
				DebugLocation(321, 41);
				PushFollow(Follow._element_in_element1400);
				element();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Grammars\\ANTLRTreePrinter.g3:322:4: ^( PLUS_ASSIGN id2= ID element )
				{
				DebugLocation(322, 4);
				DebugLocation(322, 6);
				Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_element1407); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(322, 21);
				id2=(GrammarAST)Match(input,ID,Follow._ID_in_element1411); 
				DebugLocation(322, 25);
				@out((id2!=null?id2.Text:default(string))+"+=");
				DebugLocation(322, 49);
				PushFollow(Follow._element_in_element1415);
				element();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Grammars\\ANTLRTreePrinter.g3:323:4: ebnf
				{
				DebugLocation(323, 4);
				PushFollow(Follow._ebnf_in_element1421);
				ebnf();
				PopFollow();


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Grammars\\ANTLRTreePrinter.g3:324:4: tree_
				{
				DebugLocation(324, 4);
				PushFollow(Follow._tree__in_element1426);
				tree_();
				PopFollow();


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Grammars\\ANTLRTreePrinter.g3:325:4: ^( SYNPRED block[true] )
				{
				DebugLocation(325, 4);
				DebugLocation(325, 7);
				Match(input,SYNPRED,Follow._SYNPRED_in_element1433); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(325, 15);
				PushFollow(Follow._block_in_element1435);
				block(true);
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(325, 29);
				@out("=>");

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Grammars\\ANTLRTreePrinter.g3:326:4: a= ACTION
				{
				DebugLocation(326, 5);
				a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_element1447); 
				DebugLocation(326, 14);
				if ( showActions ) {@out("{"); @out((a!=null?a.Text:default(string))); @out("}");}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Grammars\\ANTLRTreePrinter.g3:327:4: a2= FORCED_ACTION
				{
				DebugLocation(327, 6);
				a2=(GrammarAST)Match(input,FORCED_ACTION,Follow._FORCED_ACTION_in_element1457); 
				DebugLocation(327, 22);
				if ( showActions ) {@out("{{"); @out((a2!=null?a2.Text:default(string))); @out("}}");}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Grammars\\ANTLRTreePrinter.g3:328:4: pred= SEMPRED
				{
				DebugLocation(328, 8);
				pred=(GrammarAST)Match(input,SEMPRED,Follow._SEMPRED_in_element1467); 
				DebugLocation(329, 3);

							if ( showActions )
							{
								@out("{");
								@out((pred!=null?pred.Text:default(string)));
								@out("}?");
							}
							else
							{
								@out("{...}?");
							}
						

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Grammars\\ANTLRTreePrinter.g3:341:4: spred= SYN_SEMPRED
				{
				DebugLocation(341, 9);
				spred=(GrammarAST)Match(input,SYN_SEMPRED,Follow._SYN_SEMPRED_in_element1478); 
				DebugLocation(342, 3);

							string name = (spred!=null?spred.Text:default(string));
							GrammarAST predAST=grammar.GetSyntacticPredicate(name);
							Block(predAST, true);
							@out("=>");
						

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Grammars\\ANTLRTreePrinter.g3:348:4: ^( BACKTRACK_SEMPRED ( . )* )
				{
				DebugLocation(348, 4);
				DebugLocation(348, 6);
				Match(input,BACKTRACK_SEMPRED,Follow._BACKTRACK_SEMPRED_in_element1488); 

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); 
					DebugLocation(348, 24);
					// Grammars\\ANTLRTreePrinter.g3:348:24: ( . )*
					try { DebugEnterSubRule(51);
					while (true)
					{
						int alt51=2;
						try { DebugEnterDecision(51, false);
						int LA51_1 = input.LA(1);

						if (((LA51_1>=ACTION && LA51_1<=XDIGIT)))
						{
							alt51 = 1;
						}
						else if ((LA51_1==UP))
						{
							alt51 = 2;
						}


						} finally { DebugExitDecision(51); }
						switch ( alt51 )
						{
						case 1:
							DebugEnterAlt(1);
							// Grammars\\ANTLRTreePrinter.g3:348:24: .
							{
							DebugLocation(348, 24);
							MatchAny(input); 

							}
							break;

						default:
							goto loop51;
						}
					}

					loop51:
						;

					} finally { DebugExitSubRule(51); }


					Match(input, TokenTypes.Up, null); 
				}


				}
				break;
			case 17:
				DebugEnterAlt(17);
				// Grammars\\ANTLRTreePrinter.g3:349:4: gpred= GATED_SEMPRED
				{
				DebugLocation(349, 9);
				gpred=(GrammarAST)Match(input,GATED_SEMPRED,Follow._GATED_SEMPRED_in_element1500); 
				DebugLocation(350, 3);

						if ( showActions ) {@out("{"); @out((gpred!=null?gpred.Text:default(string))); @out("}? =>");}
						else {@out("{...}? =>");}
						

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// Grammars\\ANTLRTreePrinter.g3:354:4: EPSILON
				{
				DebugLocation(354, 4);
				Match(input,EPSILON,Follow._EPSILON_in_element1509); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("element", 28);
			LeaveRule("element", 28);
			LeaveRule_element();
		}
		DebugLocation(355, 1);
		} finally { DebugExitRule(GrammarFileName, "element"); }
		return;

	}
	// $ANTLR end "element"

	partial void EnterRule_ebnf();
	partial void LeaveRule_ebnf();
	// $ANTLR start "ebnf"
	// Grammars\\ANTLRTreePrinter.g3:357:1: ebnf : ( block[true] | ^( OPTIONAL block[true] ) | ^( CLOSURE block[true] ) | ^( POSITIVE_CLOSURE block[true] ) );
	[GrammarRule("ebnf")]
	private void ebnf()
	{
		EnterRule_ebnf();
		EnterRule("ebnf", 29);
		TraceIn("ebnf", 29);
		try { DebugEnterRule(GrammarFileName, "ebnf");
		DebugLocation(357, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:358:2: ( block[true] | ^( OPTIONAL block[true] ) | ^( CLOSURE block[true] ) | ^( POSITIVE_CLOSURE block[true] ) )
			int alt53=4;
			try { DebugEnterDecision(53, false);
			switch (input.LA(1))
			{
			case BLOCK:
				{
				alt53 = 1;
				}
				break;
			case OPTIONAL:
				{
				alt53 = 2;
				}
				break;
			case CLOSURE:
				{
				alt53 = 3;
				}
				break;
			case POSITIVE_CLOSURE:
				{
				alt53 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:358:4: block[true]
				{
				DebugLocation(358, 4);
				PushFollow(Follow._block_in_ebnf1520);
				block(true);
				PopFollow();

				DebugLocation(358, 16);
				@out(" ");

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\ANTLRTreePrinter.g3:359:4: ^( OPTIONAL block[true] )
				{
				DebugLocation(359, 4);
				DebugLocation(359, 7);
				Match(input,OPTIONAL,Follow._OPTIONAL_in_ebnf1530); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(359, 16);
				PushFollow(Follow._block_in_ebnf1532);
				block(true);
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(359, 30);
				@out("? ");

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\ANTLRTreePrinter.g3:360:4: ^( CLOSURE block[true] )
				{
				DebugLocation(360, 4);
				DebugLocation(360, 7);
				Match(input,CLOSURE,Follow._CLOSURE_in_ebnf1544); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(360, 15);
				PushFollow(Follow._block_in_ebnf1546);
				block(true);
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(360, 30);
				@out("* ");

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Grammars\\ANTLRTreePrinter.g3:361:4: ^( POSITIVE_CLOSURE block[true] )
				{
				DebugLocation(361, 4);
				DebugLocation(361, 7);
				Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_ebnf1559); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(361, 24);
				PushFollow(Follow._block_in_ebnf1561);
				block(true);
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(361, 38);
				@out("+ ");

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ebnf", 29);
			LeaveRule("ebnf", 29);
			LeaveRule_ebnf();
		}
		DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "ebnf"); }
		return;

	}
	// $ANTLR end "ebnf"

	partial void EnterRule_tree_();
	partial void LeaveRule_tree_();
	// $ANTLR start "tree_"
	// Grammars\\ANTLRTreePrinter.g3:364:1: tree_ : ^( TREE_BEGIN element ( element )* ) ;
	[GrammarRule("tree_")]
	private void tree_()
	{
		EnterRule_tree_();
		EnterRule("tree_", 30);
		TraceIn("tree_", 30);
		try { DebugEnterRule(GrammarFileName, "tree_");
		DebugLocation(364, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:365:2: ( ^( TREE_BEGIN element ( element )* ) )
			DebugEnterAlt(1);
			// Grammars\\ANTLRTreePrinter.g3:365:4: ^( TREE_BEGIN element ( element )* )
			{
			DebugLocation(365, 4);
			DebugLocation(365, 6);
			Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_tree_1578); 

			DebugLocation(365, 17);
			@out(" ^(");

			Match(input, TokenTypes.Down, null); 
			DebugLocation(365, 32);
			PushFollow(Follow._element_in_tree_1582);
			element();
			PopFollow();

			DebugLocation(365, 40);
			// Grammars\\ANTLRTreePrinter.g3:365:40: ( element )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=2;
				try { DebugEnterDecision(54, false);
				int LA54_1 = input.LA(1);

				if ((LA54_1==ACTION||(LA54_1>=ASSIGN && LA54_1<=BLOCK)||(LA54_1>=CHAR_LITERAL && LA54_1<=CHAR_RANGE)||LA54_1==CLOSURE||LA54_1==DOT||LA54_1==EPSILON||LA54_1==FORCED_ACTION||LA54_1==GATED_SEMPRED||LA54_1==LABEL||LA54_1==NOT||LA54_1==OPTIONAL||(LA54_1>=PLUS_ASSIGN && LA54_1<=POSITIVE_CLOSURE)||LA54_1==RANGE||LA54_1==ROOT||LA54_1==RULE_REF||LA54_1==SEMPRED||(LA54_1>=STRING_LITERAL && LA54_1<=SYN_SEMPRED)||LA54_1==TOKEN_REF||LA54_1==TREE_BEGIN||LA54_1==WILDCARD))
				{
					alt54 = 1;
				}


				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:365:41: element
					{
					DebugLocation(365, 41);
					PushFollow(Follow._element_in_tree_1585);
					element();
					PopFollow();


					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }

			DebugLocation(365, 51);
			@out(") ");

			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tree_", 30);
			LeaveRule("tree_", 30);
			LeaveRule_tree_();
		}
		DebugLocation(366, 1);
		} finally { DebugExitRule(GrammarFileName, "tree_"); }
		return;

	}
	// $ANTLR end "tree_"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Grammars\\ANTLRTreePrinter.g3:368:1: atom : ( ( ^( RULE_REF (rarg= ARG_ACTION )? ( ast_suffix )? ) | ^( TOKEN_REF (targ= ARG_ACTION )? ( ast_suffix )? ) | ^( CHAR_LITERAL ( ast_suffix )? ) | ^( STRING_LITERAL ( ast_suffix )? ) | ^( WILDCARD ( ast_suffix )? ) ) | LABEL | ^( DOT ID atom ) );
	[GrammarRule("atom")]
	private TreeRuleReturnScope<GrammarAST> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 31);
		TraceIn("atom", 31);
		TreeRuleReturnScope<GrammarAST> retval = new TreeRuleReturnScope<GrammarAST>();
		retval.Start = (GrammarAST)input.LT(1);

		GrammarAST rarg = default(GrammarAST);
		GrammarAST targ = default(GrammarAST);
		GrammarAST LABEL5 = default(GrammarAST);
		GrammarAST ID6 = default(GrammarAST);

		@out(" ");
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(368, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:371:2: ( ( ^( RULE_REF (rarg= ARG_ACTION )? ( ast_suffix )? ) | ^( TOKEN_REF (targ= ARG_ACTION )? ( ast_suffix )? ) | ^( CHAR_LITERAL ( ast_suffix )? ) | ^( STRING_LITERAL ( ast_suffix )? ) | ^( WILDCARD ( ast_suffix )? ) ) | LABEL | ^( DOT ID atom ) )
			int alt63=3;
			try { DebugEnterDecision(63, false);
			switch (input.LA(1))
			{
			case CHAR_LITERAL:
			case RULE_REF:
			case STRING_LITERAL:
			case TOKEN_REF:
			case WILDCARD:
				{
				alt63 = 1;
				}
				break;
			case LABEL:
				{
				alt63 = 2;
				}
				break;
			case DOT:
				{
				alt63 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 63, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:371:4: ( ^( RULE_REF (rarg= ARG_ACTION )? ( ast_suffix )? ) | ^( TOKEN_REF (targ= ARG_ACTION )? ( ast_suffix )? ) | ^( CHAR_LITERAL ( ast_suffix )? ) | ^( STRING_LITERAL ( ast_suffix )? ) | ^( WILDCARD ( ast_suffix )? ) )
				{
				DebugLocation(371, 4);
				// Grammars\\ANTLRTreePrinter.g3:371:4: ( ^( RULE_REF (rarg= ARG_ACTION )? ( ast_suffix )? ) | ^( TOKEN_REF (targ= ARG_ACTION )? ( ast_suffix )? ) | ^( CHAR_LITERAL ( ast_suffix )? ) | ^( STRING_LITERAL ( ast_suffix )? ) | ^( WILDCARD ( ast_suffix )? ) )
				int alt62=5;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, false);
				switch (input.LA(1))
				{
				case RULE_REF:
					{
					alt62 = 1;
					}
					break;
				case TOKEN_REF:
					{
					alt62 = 2;
					}
					break;
				case CHAR_LITERAL:
					{
					alt62 = 3;
					}
					break;
				case STRING_LITERAL:
					{
					alt62 = 4;
					}
					break;
				case WILDCARD:
					{
					alt62 = 5;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 62, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\ANTLRTreePrinter.g3:371:6: ^( RULE_REF (rarg= ARG_ACTION )? ( ast_suffix )? )
					{
					DebugLocation(371, 6);
					DebugLocation(371, 9);
					Match(input,RULE_REF,Follow._RULE_REF_in_atom1611); 

					DebugLocation(371, 19);
					@out(retval.Start.ToString());

					if (input.LA(1) == TokenTypes.Down)
					{
						Match(input, TokenTypes.Down, null); 
						DebugLocation(372, 5);
						// Grammars\\ANTLRTreePrinter.g3:372:5: (rarg= ARG_ACTION )?
						int alt55=2;
						try { DebugEnterSubRule(55);
						try { DebugEnterDecision(55, false);
						int LA55_1 = input.LA(1);

						if ((LA55_1==ARG_ACTION))
						{
							alt55 = 1;
						}
						} finally { DebugExitDecision(55); }
						switch (alt55)
						{
						case 1:
							DebugEnterAlt(1);
							// Grammars\\ANTLRTreePrinter.g3:372:6: rarg= ARG_ACTION
							{
							DebugLocation(372, 10);
							rarg=(GrammarAST)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_atom1623); 
							DebugLocation(372, 22);
							@out("["+rarg.ToString()+"]");

							}
							break;

						}
						} finally { DebugExitSubRule(55); }

						DebugLocation(373, 5);
						// Grammars\\ANTLRTreePrinter.g3:373:5: ( ast_suffix )?
						int alt56=2;
						try { DebugEnterSubRule(56);
						try { DebugEnterDecision(56, false);
						int LA56_1 = input.LA(1);

						if ((LA56_1==BANG||LA56_1==ROOT))
						{
							alt56 = 1;
						}
						} finally { DebugExitDecision(56); }
						switch (alt56)
						{
						case 1:
							DebugEnterAlt(1);
							// Grammars\\ANTLRTreePrinter.g3:373:6: ast_suffix
							{
							DebugLocation(373, 6);
							PushFollow(Follow._ast_suffix_in_atom1634);
							ast_suffix();
							PopFollow();


							}
							break;

						}
						} finally { DebugExitSubRule(56); }


						Match(input, TokenTypes.Up, null); 
					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Grammars\\ANTLRTreePrinter.g3:375:5: ^( TOKEN_REF (targ= ARG_ACTION )? ( ast_suffix )? )
					{
					DebugLocation(375, 5);
					DebugLocation(375, 8);
					Match(input,TOKEN_REF,Follow._TOKEN_REF_in_atom1649); 

					DebugLocation(375, 19);
					@out(retval.Start.ToString());

					if (input.LA(1) == TokenTypes.Down)
					{
						Match(input, TokenTypes.Down, null); 
						DebugLocation(376, 5);
						// Grammars\\ANTLRTreePrinter.g3:376:5: (targ= ARG_ACTION )?
						int alt57=2;
						try { DebugEnterSubRule(57);
						try { DebugEnterDecision(57, false);
						int LA57_1 = input.LA(1);

						if ((LA57_1==ARG_ACTION))
						{
							alt57 = 1;
						}
						} finally { DebugExitDecision(57); }
						switch (alt57)
						{
						case 1:
							DebugEnterAlt(1);
							// Grammars\\ANTLRTreePrinter.g3:376:6: targ= ARG_ACTION
							{
							DebugLocation(376, 10);
							targ=(GrammarAST)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_atom1662); 
							DebugLocation(376, 22);
							@out("["+targ.ToString()+"]");

							}
							break;

						}
						} finally { DebugExitSubRule(57); }

						DebugLocation(377, 5);
						// Grammars\\ANTLRTreePrinter.g3:377:5: ( ast_suffix )?
						int alt58=2;
						try { DebugEnterSubRule(58);
						try { DebugEnterDecision(58, false);
						int LA58_1 = input.LA(1);

						if ((LA58_1==BANG||LA58_1==ROOT))
						{
							alt58 = 1;
						}
						} finally { DebugExitDecision(58); }
						switch (alt58)
						{
						case 1:
							DebugEnterAlt(1);
							// Grammars\\ANTLRTreePrinter.g3:377:6: ast_suffix
							{
							DebugLocation(377, 6);
							PushFollow(Follow._ast_suffix_in_atom1674);
							ast_suffix();
							PopFollow();


							}
							break;

						}
						} finally { DebugExitSubRule(58); }


						Match(input, TokenTypes.Up, null); 
					}


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Grammars\\ANTLRTreePrinter.g3:379:5: ^( CHAR_LITERAL ( ast_suffix )? )
					{
					DebugLocation(379, 5);
					DebugLocation(379, 8);
					Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_atom1689); 

					DebugLocation(379, 21);
					@out(retval.Start.ToString());

					if (input.LA(1) == TokenTypes.Down)
					{
						Match(input, TokenTypes.Down, null); 
						DebugLocation(380, 5);
						// Grammars\\ANTLRTreePrinter.g3:380:5: ( ast_suffix )?
						int alt59=2;
						try { DebugEnterSubRule(59);
						try { DebugEnterDecision(59, false);
						int LA59_1 = input.LA(1);

						if ((LA59_1==BANG||LA59_1==ROOT))
						{
							alt59 = 1;
						}
						} finally { DebugExitDecision(59); }
						switch (alt59)
						{
						case 1:
							DebugEnterAlt(1);
							// Grammars\\ANTLRTreePrinter.g3:380:6: ast_suffix
							{
							DebugLocation(380, 6);
							PushFollow(Follow._ast_suffix_in_atom1698);
							ast_suffix();
							PopFollow();


							}
							break;

						}
						} finally { DebugExitSubRule(59); }


						Match(input, TokenTypes.Up, null); 
					}


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// Grammars\\ANTLRTreePrinter.g3:382:5: ^( STRING_LITERAL ( ast_suffix )? )
					{
					DebugLocation(382, 5);
					DebugLocation(382, 8);
					Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_atom1713); 

					DebugLocation(382, 23);
					@out(retval.Start.ToString());

					if (input.LA(1) == TokenTypes.Down)
					{
						Match(input, TokenTypes.Down, null); 
						DebugLocation(383, 5);
						// Grammars\\ANTLRTreePrinter.g3:383:5: ( ast_suffix )?
						int alt60=2;
						try { DebugEnterSubRule(60);
						try { DebugEnterDecision(60, false);
						int LA60_1 = input.LA(1);

						if ((LA60_1==BANG||LA60_1==ROOT))
						{
							alt60 = 1;
						}
						} finally { DebugExitDecision(60); }
						switch (alt60)
						{
						case 1:
							DebugEnterAlt(1);
							// Grammars\\ANTLRTreePrinter.g3:383:6: ast_suffix
							{
							DebugLocation(383, 6);
							PushFollow(Follow._ast_suffix_in_atom1722);
							ast_suffix();
							PopFollow();


							}
							break;

						}
						} finally { DebugExitSubRule(60); }


						Match(input, TokenTypes.Up, null); 
					}


					}
					break;
				case 5:
					DebugEnterAlt(5);
					// Grammars\\ANTLRTreePrinter.g3:385:5: ^( WILDCARD ( ast_suffix )? )
					{
					DebugLocation(385, 5);
					DebugLocation(385, 8);
					Match(input,WILDCARD,Follow._WILDCARD_in_atom1737); 

					DebugLocation(385, 18);
					@out(retval.Start.ToString());

					if (input.LA(1) == TokenTypes.Down)
					{
						Match(input, TokenTypes.Down, null); 
						DebugLocation(386, 5);
						// Grammars\\ANTLRTreePrinter.g3:386:5: ( ast_suffix )?
						int alt61=2;
						try { DebugEnterSubRule(61);
						try { DebugEnterDecision(61, false);
						int LA61_1 = input.LA(1);

						if ((LA61_1==BANG||LA61_1==ROOT))
						{
							alt61 = 1;
						}
						} finally { DebugExitDecision(61); }
						switch (alt61)
						{
						case 1:
							DebugEnterAlt(1);
							// Grammars\\ANTLRTreePrinter.g3:386:6: ast_suffix
							{
							DebugLocation(386, 6);
							PushFollow(Follow._ast_suffix_in_atom1747);
							ast_suffix();
							PopFollow();


							}
							break;

						}
						} finally { DebugExitSubRule(61); }


						Match(input, TokenTypes.Up, null); 
					}


					}
					break;

				}
				} finally { DebugExitSubRule(62); }

				DebugLocation(389, 3);
				@out(" ");

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\ANTLRTreePrinter.g3:390:4: LABEL
				{
				DebugLocation(390, 4);
				LABEL5=(GrammarAST)Match(input,LABEL,Follow._LABEL_in_atom1767); 
				DebugLocation(390, 10);
				@out(" $"+(LABEL5!=null?LABEL5.Text:default(string)));

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\ANTLRTreePrinter.g3:391:4: ^( DOT ID atom )
				{
				DebugLocation(391, 4);
				DebugLocation(391, 6);
				Match(input,DOT,Follow._DOT_in_atom1776); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(391, 10);
				ID6=(GrammarAST)Match(input,ID,Follow._ID_in_atom1778); 
				DebugLocation(391, 13);
				@out((ID6!=null?ID6.Text:default(string))+".");
				DebugLocation(391, 35);
				PushFollow(Follow._atom_in_atom1782);
				atom();
				PopFollow();


				Match(input, TokenTypes.Up, null); 


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("atom", 31);
			LeaveRule("atom", 31);
			LeaveRule_atom();
		}
		DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_ast_suffix();
	partial void LeaveRule_ast_suffix();
	// $ANTLR start "ast_suffix"
	// Grammars\\ANTLRTreePrinter.g3:394:1: ast_suffix : ( ROOT | BANG );
	[GrammarRule("ast_suffix")]
	private void ast_suffix()
	{
		EnterRule_ast_suffix();
		EnterRule("ast_suffix", 32);
		TraceIn("ast_suffix", 32);
		try { DebugEnterRule(GrammarFileName, "ast_suffix");
		DebugLocation(394, 1);
		try
		{
			// Grammars\\ANTLRTreePrinter.g3:395:2: ( ROOT | BANG )
			int alt64=2;
			try { DebugEnterDecision(64, false);
			int LA64_1 = input.LA(1);

			if ((LA64_1==ROOT))
			{
				alt64 = 1;
			}
			else if ((LA64_1==BANG))
			{
				alt64 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 64, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\ANTLRTreePrinter.g3:395:4: ROOT
				{
				DebugLocation(395, 4);
				Match(input,ROOT,Follow._ROOT_in_ast_suffix1795); 
				DebugLocation(395, 9);
				@out("^");

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\ANTLRTreePrinter.g3:396:4: BANG
				{
				DebugLocation(396, 4);
				Match(input,BANG,Follow._BANG_in_ast_suffix1802); 
				DebugLocation(396, 10);
				@out("!");

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ast_suffix", 32);
			LeaveRule("ast_suffix", 32);
			LeaveRule_ast_suffix();
		}
		DebugLocation(397, 1);
		} finally { DebugExitRule(GrammarFileName, "ast_suffix"); }
		return;

	}
	// $ANTLR end "ast_suffix"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _grammar__in_toString72 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rule_in_toString78 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alternative_in_toString84 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_in_toString90 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _single_rewrite_in_toString96 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rewrite_in_toString102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOR_in_toString108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LEXER_GRAMMAR_in_grammar_132 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _grammarSpec_in_grammar_134 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PARSER_GRAMMAR_in_grammar_144 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _grammarSpec_in_grammar_146 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TREE_GRAMMAR_in_grammar_156 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _grammarSpec_in_grammar_158 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _COMBINED_GRAMMAR_in_grammar_168 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _grammarSpec_in_grammar_170 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SCOPE_in_attrScope186 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_attrScope188 = new BitSet(new ulong[]{0x210UL});
		public static readonly BitSet _ruleAction_in_attrScope190 = new BitSet(new ulong[]{0x210UL});
		public static readonly BitSet _ACTION_in_attrScope193 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_grammarSpec209 = new BitSet(new ulong[]{0x400200008000200UL,0x20028002UL});
		public static readonly BitSet _DOC_COMMENT_in_grammarSpec218 = new BitSet(new ulong[]{0x400200000000200UL,0x20028002UL});
		public static readonly BitSet _optionsSpec_in_grammarSpec228 = new BitSet(new ulong[]{0x200000000200UL,0x20028002UL});
		public static readonly BitSet _delegateGrammars_in_grammarSpec237 = new BitSet(new ulong[]{0x200UL,0x20028002UL});
		public static readonly BitSet _tokensSpec_in_grammarSpec244 = new BitSet(new ulong[]{0x200UL,0x28002UL});
		public static readonly BitSet _attrScope_in_grammarSpec251 = new BitSet(new ulong[]{0x200UL,0x28002UL});
		public static readonly BitSet _actions_in_grammarSpec258 = new BitSet(new ulong[]{0x0UL,0x8002UL});
		public static readonly BitSet _rules_in_grammarSpec264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _action_in_actions277 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _AMPERSAND_in_action298 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_action302 = new BitSet(new ulong[]{0x80000000010UL});
		public static readonly BitSet _ID_in_action311 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ACTION_in_action315 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ACTION_in_action330 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OPTIONS_in_optionsSpec362 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _option_in_optionsSpec370 = new BitSet(new ulong[]{0x2008UL});
		public static readonly BitSet _ASSIGN_in_option396 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_option400 = new BitSet(new ulong[]{0x880000040000UL,0x1000000UL});
		public static readonly BitSet _optionValue_in_option404 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_optionValue419 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_optionValue439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAR_LITERAL_in_optionValue448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_optionValue459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_delegateGrammars489 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ASSIGN_in_delegateGrammars494 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_delegateGrammars496 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_delegateGrammars498 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_delegateGrammars503 = new BitSet(new ulong[]{0x80000002008UL});
		public static readonly BitSet _TOKENS_in_tokensSpec520 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _tokenSpec_in_tokensSpec522 = new BitSet(new ulong[]{0x2008UL,0x40000000UL});
		public static readonly BitSet _TOKEN_REF_in_tokenSpec535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_in_tokenSpec542 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _TOKEN_REF_in_tokenSpec544 = new BitSet(new ulong[]{0x40000UL,0x1000000UL});
		public static readonly BitSet _set_in_tokenSpec546 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _rule_in_rules565 = new BitSet(new ulong[]{0x2UL,0x8002UL});
		public static readonly BitSet _precRule_in_rules569 = new BitSet(new ulong[]{0x2UL,0x8002UL});
		public static readonly BitSet _RULE_in_rule585 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_rule589 = new BitSet(new ulong[]{0x10000000400UL,0x1CUL});
		public static readonly BitSet _modifier_in_rule595 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ARG_in_rule608 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARG_ACTION_in_rule613 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _RET_in_rule626 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARG_ACTION_in_rule631 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _throwsSpec_in_rule644 = new BitSet(new ulong[]{0x400000000010200UL,0x20000UL});
		public static readonly BitSet _optionsSpec_in_rule652 = new BitSet(new ulong[]{0x10200UL,0x20000UL});
		public static readonly BitSet _ruleScopeSpec_in_rule660 = new BitSet(new ulong[]{0x10200UL});
		public static readonly BitSet _ruleAction_in_rule668 = new BitSet(new ulong[]{0x10200UL});
		public static readonly BitSet _block_in_rule687 = new BitSet(new ulong[]{0x4400020000UL});
		public static readonly BitSet _exceptionGroup_in_rule694 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _EOR_in_rule701 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PREC_RULE_in_precRule720 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_precRule724 = new BitSet(new ulong[]{0x10000000400UL,0x1CUL});
		public static readonly BitSet _modifier_in_precRule730 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ARG_in_precRule743 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARG_ACTION_in_precRule748 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _RET_in_precRule761 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARG_ACTION_in_precRule766 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _throwsSpec_in_precRule779 = new BitSet(new ulong[]{0x400000000010200UL,0x20000UL});
		public static readonly BitSet _optionsSpec_in_precRule787 = new BitSet(new ulong[]{0x10200UL,0x20000UL});
		public static readonly BitSet _ruleScopeSpec_in_precRule795 = new BitSet(new ulong[]{0x10200UL});
		public static readonly BitSet _ruleAction_in_precRule803 = new BitSet(new ulong[]{0x10200UL});
		public static readonly BitSet _block_in_precRule822 = new BitSet(new ulong[]{0x4400020000UL});
		public static readonly BitSet _exceptionGroup_in_precRule829 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _EOR_in_precRule836 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AMPERSAND_in_ruleAction854 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_ruleAction858 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ACTION_in_ruleAction862 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _THROWS_in_throwsSpec911 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_throwsSpec913 = new BitSet(new ulong[]{0x80000000008UL});
		public static readonly BitSet _SCOPE_in_ruleScopeSpec928 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ruleAction_in_ruleScopeSpec930 = new BitSet(new ulong[]{0x80000000218UL});
		public static readonly BitSet _ACTION_in_ruleScopeSpec934 = new BitSet(new ulong[]{0x80000000008UL});
		public static readonly BitSet _ID_in_ruleScopeSpec940 = new BitSet(new ulong[]{0x80000000008UL});
		public static readonly BitSet _BLOCK_in_block964 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _optionsSpec_in_block975 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _alternative_in_block985 = new BitSet(new ulong[]{0x200000100UL,0x1000UL});
		public static readonly BitSet _rewrite_in_block987 = new BitSet(new ulong[]{0x200000100UL});
		public static readonly BitSet _alternative_in_block993 = new BitSet(new ulong[]{0x200000100UL,0x1000UL});
		public static readonly BitSet _rewrite_in_block995 = new BitSet(new ulong[]{0x200000100UL});
		public static readonly BitSet _EOB_in_block1003 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ALT_in_alternative1025 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _element_in_alternative1027 = new BitSet(new ulong[]{0x82810289202DE010UL,0x547092041UL});
		public static readonly BitSet _EOA_in_alternative1030 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _exceptionHandler_in_exceptionGroup1045 = new BitSet(new ulong[]{0x4000020002UL});
		public static readonly BitSet _finallyClause_in_exceptionGroup1051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _finallyClause_in_exceptionGroup1058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CATCH_in_exceptionHandler1070 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARG_ACTION_in_exceptionHandler1072 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ACTION_in_exceptionHandler1074 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FINALLY_in_finallyClause1087 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ACTION_in_finallyClause1089 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _REWRITES_in_rewrite1102 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _single_rewrite_in_rewrite1104 = new BitSet(new ulong[]{0x8UL,0x800UL});
		public static readonly BitSet _REWRITE_in_single_rewrite1122 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SEMPRED_in_single_rewrite1131 = new BitSet(new ulong[]{0x2000000110UL,0x8000000UL});
		public static readonly BitSet _alternative_in_single_rewrite1146 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _rewrite_template_in_single_rewrite1153 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ETC_in_single_rewrite1160 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ACTION_in_single_rewrite1169 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TEMPLATE_in_rewrite_template1193 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_rewrite_template1202 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ACTION_in_rewrite_template1213 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ARGLIST_in_rewrite_template1227 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARG_in_rewrite_template1243 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_rewrite_template1247 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ACTION_in_rewrite_template1259 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DOUBLE_QUOTE_STRING_LITERAL_in_rewrite_template1295 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DOUBLE_ANGLE_STRING_LITERAL_in_rewrite_template1304 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ROOT_in_element1328 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _element_in_element1330 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BANG_in_element1339 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _element_in_element1341 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _atom_in_element1349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_element1355 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _element_in_element1359 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _RANGE_in_element1366 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _atom_in_element1368 = new BitSet(new ulong[]{0x1000020040000UL,0x441010000UL});
		public static readonly BitSet _atom_in_element1372 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CHAR_RANGE_in_element1379 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _atom_in_element1381 = new BitSet(new ulong[]{0x1000020040000UL,0x441010000UL});
		public static readonly BitSet _atom_in_element1385 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASSIGN_in_element1392 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_element1396 = new BitSet(new ulong[]{0x82810288202DE010UL,0x547092041UL});
		public static readonly BitSet _element_in_element1400 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PLUS_ASSIGN_in_element1407 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_element1411 = new BitSet(new ulong[]{0x82810288202DE010UL,0x547092041UL});
		public static readonly BitSet _element_in_element1415 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ebnf_in_element1421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tree__in_element1426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNPRED_in_element1433 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_element1435 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ACTION_in_element1447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FORCED_ACTION_in_element1457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMPRED_in_element1467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYN_SEMPRED_in_element1478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BACKTRACK_SEMPRED_in_element1488 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _GATED_SEMPRED_in_element1500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EPSILON_in_element1509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_ebnf1520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPTIONAL_in_ebnf1530 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_ebnf1532 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLOSURE_in_ebnf1544 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_ebnf1546 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _POSITIVE_CLOSURE_in_ebnf1559 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_ebnf1561 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TREE_BEGIN_in_tree_1578 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _element_in_tree_1582 = new BitSet(new ulong[]{0x82810288202DE018UL,0x547092041UL});
		public static readonly BitSet _element_in_tree_1585 = new BitSet(new ulong[]{0x82810288202DE018UL,0x547092041UL});
		public static readonly BitSet _RULE_REF_in_atom1611 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARG_ACTION_in_atom1623 = new BitSet(new ulong[]{0x8008UL,0x2000UL});
		public static readonly BitSet _ast_suffix_in_atom1634 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TOKEN_REF_in_atom1649 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARG_ACTION_in_atom1662 = new BitSet(new ulong[]{0x8008UL,0x2000UL});
		public static readonly BitSet _ast_suffix_in_atom1674 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CHAR_LITERAL_in_atom1689 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ast_suffix_in_atom1698 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STRING_LITERAL_in_atom1713 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ast_suffix_in_atom1722 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _WILDCARD_in_atom1737 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ast_suffix_in_atom1747 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LABEL_in_atom1767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_atom1776 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_atom1778 = new BitSet(new ulong[]{0x1000020040000UL,0x441010000UL});
		public static readonly BitSet _atom_in_atom1782 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ROOT_in_ast_suffix1795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BANG_in_ast_suffix1802 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace Antlr3.Grammars
