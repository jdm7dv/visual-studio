//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.1 Grammars\\DefineGrammarItemsWalker.g3 2013-06-14 09:39:34

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using Antlr3.Tool;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace Antlr3.Grammars
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.1")]
[System.CLSCompliant(false)]
public partial class DefineGrammarItemsWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACTION", "ACTION_CHAR_LITERAL", "ACTION_ESC", "ACTION_STRING_LITERAL", "ALT", "AMPERSAND", "ARG", "ARGLIST", "ARG_ACTION", "ASSIGN", "BACKTRACK_SEMPRED", "BANG", "BLOCK", "CATCH", "CHAR_LITERAL", "CHAR_RANGE", "CLOSE_ELEMENT_OPTION", "CLOSURE", "COLON", "COMBINED_GRAMMAR", "COMMA", "COMMENT", "DIGIT", "DOC_COMMENT", "DOLLAR", "DOT", "DOUBLE_ANGLE_STRING_LITERAL", "DOUBLE_QUOTE_STRING_LITERAL", "EOA", "EOB", "EOR", "EPSILON", "ESC", "ETC", "FINALLY", "FORCED_ACTION", "FRAGMENT", "GATED_SEMPRED", "GRAMMAR", "ID", "IMPLIES", "IMPORT", "INITACTION", "INT", "LABEL", "LEXER", "LEXER_GRAMMAR", "LPAREN", "ML_COMMENT", "NESTED_ACTION", "NESTED_ARG_ACTION", "NOT", "OPEN_ELEMENT_OPTION", "OPTIONAL", "OPTIONS", "OR", "PARSER", "PARSER_GRAMMAR", "PLUS", "PLUS_ASSIGN", "POSITIVE_CLOSURE", "PREC_RULE", "PRIVATE", "PROTECTED", "PUBLIC", "QUESTION", "RANGE", "RCURLY", "RECURSIVE_RULE_REF", "RET", "RETURNS", "REWRITE", "REWRITES", "ROOT", "RPAREN", "RULE", "RULE_REF", "SCOPE", "SEMI", "SEMPRED", "SL_COMMENT", "SRC", "STAR", "STRAY_BRACKET", "STRING_LITERAL", "SYNPRED", "SYN_SEMPRED", "TEMPLATE", "THROWS", "TOKENS", "TOKEN_REF", "TREE", "TREE_BEGIN", "TREE_GRAMMAR", "WILDCARD", "WS", "WS_LOOP", "WS_OPT", "XDIGIT"
	};
	public const int EOF=-1;
	public const int ACTION=4;
	public const int ACTION_CHAR_LITERAL=5;
	public const int ACTION_ESC=6;
	public const int ACTION_STRING_LITERAL=7;
	public const int ALT=8;
	public const int AMPERSAND=9;
	public const int ARG=10;
	public const int ARGLIST=11;
	public const int ARG_ACTION=12;
	public const int ASSIGN=13;
	public const int BACKTRACK_SEMPRED=14;
	public const int BANG=15;
	public const int BLOCK=16;
	public const int CATCH=17;
	public const int CHAR_LITERAL=18;
	public const int CHAR_RANGE=19;
	public const int CLOSE_ELEMENT_OPTION=20;
	public const int CLOSURE=21;
	public const int COLON=22;
	public const int COMBINED_GRAMMAR=23;
	public const int COMMA=24;
	public const int COMMENT=25;
	public const int DIGIT=26;
	public const int DOC_COMMENT=27;
	public const int DOLLAR=28;
	public const int DOT=29;
	public const int DOUBLE_ANGLE_STRING_LITERAL=30;
	public const int DOUBLE_QUOTE_STRING_LITERAL=31;
	public const int EOA=32;
	public const int EOB=33;
	public const int EOR=34;
	public const int EPSILON=35;
	public const int ESC=36;
	public const int ETC=37;
	public const int FINALLY=38;
	public const int FORCED_ACTION=39;
	public const int FRAGMENT=40;
	public const int GATED_SEMPRED=41;
	public const int GRAMMAR=42;
	public const int ID=43;
	public const int IMPLIES=44;
	public const int IMPORT=45;
	public const int INITACTION=46;
	public const int INT=47;
	public const int LABEL=48;
	public const int LEXER=49;
	public const int LEXER_GRAMMAR=50;
	public const int LPAREN=51;
	public const int ML_COMMENT=52;
	public const int NESTED_ACTION=53;
	public const int NESTED_ARG_ACTION=54;
	public const int NOT=55;
	public const int OPEN_ELEMENT_OPTION=56;
	public const int OPTIONAL=57;
	public const int OPTIONS=58;
	public const int OR=59;
	public const int PARSER=60;
	public const int PARSER_GRAMMAR=61;
	public const int PLUS=62;
	public const int PLUS_ASSIGN=63;
	public const int POSITIVE_CLOSURE=64;
	public const int PREC_RULE=65;
	public const int PRIVATE=66;
	public const int PROTECTED=67;
	public const int PUBLIC=68;
	public const int QUESTION=69;
	public const int RANGE=70;
	public const int RCURLY=71;
	public const int RECURSIVE_RULE_REF=72;
	public const int RET=73;
	public const int RETURNS=74;
	public const int REWRITE=75;
	public const int REWRITES=76;
	public const int ROOT=77;
	public const int RPAREN=78;
	public const int RULE=79;
	public const int RULE_REF=80;
	public const int SCOPE=81;
	public const int SEMI=82;
	public const int SEMPRED=83;
	public const int SL_COMMENT=84;
	public const int SRC=85;
	public const int STAR=86;
	public const int STRAY_BRACKET=87;
	public const int STRING_LITERAL=88;
	public const int SYNPRED=89;
	public const int SYN_SEMPRED=90;
	public const int TEMPLATE=91;
	public const int THROWS=92;
	public const int TOKENS=93;
	public const int TOKEN_REF=94;
	public const int TREE=95;
	public const int TREE_BEGIN=96;
	public const int TREE_GRAMMAR=97;
	public const int WILDCARD=98;
	public const int WS=99;
	public const int WS_LOOP=100;
	public const int WS_OPT=101;
	public const int XDIGIT=102;

	protected sealed partial class AttributeScopeActions_scope
	{
		public Dictionary<GrammarAST, GrammarAST> actions;

		public AttributeScopeActions_scope(DefineGrammarItemsWalker grammar) { OnCreated(grammar); }
		partial void OnCreated(DefineGrammarItemsWalker grammar);
	}
	partial void AttributeScopeActions_scopeInit( AttributeScopeActions_scope scope );
	partial void AttributeScopeActions_scopeAfter( AttributeScopeActions_scope scope );
	protected readonly ListStack<AttributeScopeActions_scope> AttributeScopeActions_stack = new ListStack<AttributeScopeActions_scope>();

	public DefineGrammarItemsWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public DefineGrammarItemsWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return DefineGrammarItemsWalker.tokenNames; } }
	public override string GrammarFileName { get { return "Grammars\\DefineGrammarItemsWalker.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_grammar_();
	partial void LeaveRule_grammar_();
	// $ANTLR start "grammar_"
	// Grammars\\DefineGrammarItemsWalker.g3:54:1: public grammar_[Grammar g] : ( ^( LEXER_GRAMMAR grammarSpec ) | ^( PARSER_GRAMMAR grammarSpec ) | ^( TREE_GRAMMAR grammarSpec ) | ^( COMBINED_GRAMMAR grammarSpec ) );
	[GrammarRule("grammar_")]
	public TreeRuleReturnScope<GrammarAST> grammar_(Grammar g)
	{
		EnterRule_grammar_();
		EnterRule("grammar_", 1);
		TraceIn("grammar_", 1);
		TreeRuleReturnScope<GrammarAST> retval = new TreeRuleReturnScope<GrammarAST>();
		retval.Start = (GrammarAST)input.LT(1);


		grammar = g;
		root = retval.Start;

		try { DebugEnterRule(GrammarFileName, "grammar_");
		DebugLocation(54, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:64:2: ( ^( LEXER_GRAMMAR grammarSpec ) | ^( PARSER_GRAMMAR grammarSpec ) | ^( TREE_GRAMMAR grammarSpec ) | ^( COMBINED_GRAMMAR grammarSpec ) )
			int alt1=4;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case LEXER_GRAMMAR:
				{
				alt1 = 1;
				}
				break;
			case PARSER_GRAMMAR:
				{
				alt1 = 2;
				}
				break;
			case TREE_GRAMMAR:
				{
				alt1 = 3;
				}
				break;
			case COMBINED_GRAMMAR:
				{
				alt1 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:64:4: ^( LEXER_GRAMMAR grammarSpec )
				{
				DebugLocation(64, 4);
				DebugLocation(64, 6);
				Match(input,LEXER_GRAMMAR,Follow._LEXER_GRAMMAR_in_grammar_76); if (state.failed) return retval;

				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(64, 21);
				PushFollow(Follow._grammarSpec_in_grammar_79);
				grammarSpec();
				PopFollow();
				if (state.failed) return retval;

				Match(input, TokenTypes.Up, null); if (state.failed) return retval;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\DefineGrammarItemsWalker.g3:65:4: ^( PARSER_GRAMMAR grammarSpec )
				{
				DebugLocation(65, 4);
				DebugLocation(65, 6);
				Match(input,PARSER_GRAMMAR,Follow._PARSER_GRAMMAR_in_grammar_86); if (state.failed) return retval;

				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(65, 21);
				PushFollow(Follow._grammarSpec_in_grammar_88);
				grammarSpec();
				PopFollow();
				if (state.failed) return retval;

				Match(input, TokenTypes.Up, null); if (state.failed) return retval;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\DefineGrammarItemsWalker.g3:66:4: ^( TREE_GRAMMAR grammarSpec )
				{
				DebugLocation(66, 4);
				DebugLocation(66, 6);
				Match(input,TREE_GRAMMAR,Follow._TREE_GRAMMAR_in_grammar_95); if (state.failed) return retval;

				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(66, 20);
				PushFollow(Follow._grammarSpec_in_grammar_98);
				grammarSpec();
				PopFollow();
				if (state.failed) return retval;

				Match(input, TokenTypes.Up, null); if (state.failed) return retval;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Grammars\\DefineGrammarItemsWalker.g3:67:4: ^( COMBINED_GRAMMAR grammarSpec )
				{
				DebugLocation(67, 4);
				DebugLocation(67, 6);
				Match(input,COMBINED_GRAMMAR,Follow._COMBINED_GRAMMAR_in_grammar_105); if (state.failed) return retval;

				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(67, 23);
				PushFollow(Follow._grammarSpec_in_grammar_107);
				grammarSpec();
				PopFollow();
				if (state.failed) return retval;

				Match(input, TokenTypes.Up, null); if (state.failed) return retval;


				}
				break;

			}
			if (state.backtracking == 0)
			{

				Finish();

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("grammar_", 1);
			LeaveRule("grammar_", 1);
			LeaveRule_grammar_();
		}
		DebugLocation(68, 1);
		} finally { DebugExitRule(GrammarFileName, "grammar_"); }
		return retval;

	}
	// $ANTLR end "grammar_"

	partial void EnterRule_attrScope();
	partial void LeaveRule_attrScope();
	// $ANTLR start "attrScope"
	// Grammars\\DefineGrammarItemsWalker.g3:70:1: attrScope : ^( 'scope' name= ID ( attrScopeAction )* attrs= ACTION ) ;
	[GrammarRule("attrScope")]
	private void attrScope()
	{
		EnterRule_attrScope();
		EnterRule("attrScope", 2);
		TraceIn("attrScope", 2);
		AttributeScopeActions_stack.Push(new AttributeScopeActions_scope(this));AttributeScopeActions_scopeInit(AttributeScopeActions_stack.Peek());

		GrammarAST name = default(GrammarAST);
		GrammarAST attrs = default(GrammarAST);


			AttributeScopeActions_stack.Peek().actions =  new Dictionary<GrammarAST, GrammarAST>();

		try { DebugEnterRule(GrammarFileName, "attrScope");
		DebugLocation(70, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:76:2: ( ^( 'scope' name= ID ( attrScopeAction )* attrs= ACTION ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:76:4: ^( 'scope' name= ID ( attrScopeAction )* attrs= ACTION )
			{
			DebugLocation(76, 4);
			DebugLocation(76, 7);
			Match(input,SCOPE,Follow._SCOPE_in_attrScope131); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(76, 19);
			name=(GrammarAST)Match(input,ID,Follow._ID_in_attrScope135); if (state.failed) return;
			DebugLocation(76, 23);
			// Grammars\\DefineGrammarItemsWalker.g3:76:23: ( attrScopeAction )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==AMPERSAND))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:76:23: attrScopeAction
					{
					DebugLocation(76, 23);
					PushFollow(Follow._attrScopeAction_in_attrScope137);
					attrScopeAction();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(76, 45);
			attrs=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_attrScope142); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(77, 3);
			if (state.backtracking == 0)
			{
				HandleAttrScope(name, attrs, AttributeScopeActions_stack.Peek().actions);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attrScope", 2);
			LeaveRule("attrScope", 2);
			LeaveRule_attrScope();
			AttributeScopeActions_scopeAfter(AttributeScopeActions_stack.Peek());AttributeScopeActions_stack.Pop();

		}
		DebugLocation(78, 1);
		} finally { DebugExitRule(GrammarFileName, "attrScope"); }
		return;

	}
	// $ANTLR end "attrScope"

	partial void EnterRule_attrScopeAction();
	partial void LeaveRule_attrScopeAction();
	// $ANTLR start "attrScopeAction"
	// Grammars\\DefineGrammarItemsWalker.g3:80:1: attrScopeAction : ^( AMPERSAND ID ACTION ) ;
	[GrammarRule("attrScopeAction")]
	private void attrScopeAction()
	{
		EnterRule_attrScopeAction();
		EnterRule("attrScopeAction", 3);
		TraceIn("attrScopeAction", 3);
		GrammarAST ID1 = default(GrammarAST);
		GrammarAST ACTION2 = default(GrammarAST);

		try { DebugEnterRule(GrammarFileName, "attrScopeAction");
		DebugLocation(80, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:81:2: ( ^( AMPERSAND ID ACTION ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:81:4: ^( AMPERSAND ID ACTION )
			{
			DebugLocation(81, 4);
			DebugLocation(81, 6);
			Match(input,AMPERSAND,Follow._AMPERSAND_in_attrScopeAction160); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(81, 16);
			ID1=(GrammarAST)Match(input,ID,Follow._ID_in_attrScopeAction162); if (state.failed) return;
			DebugLocation(81, 19);
			ACTION2=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_attrScopeAction164); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(82, 3);
			if (state.backtracking == 0)
			{
				HandleAttrScopeAction(ID1, ACTION2, AttributeScopeActions_stack.Peek().actions);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attrScopeAction", 3);
			LeaveRule("attrScopeAction", 3);
			LeaveRule_attrScopeAction();
		}
		DebugLocation(83, 1);
		} finally { DebugExitRule(GrammarFileName, "attrScopeAction"); }
		return;

	}
	// $ANTLR end "attrScopeAction"

	partial void EnterRule_grammarSpec();
	partial void LeaveRule_grammarSpec();
	// $ANTLR start "grammarSpec"
	// Grammars\\DefineGrammarItemsWalker.g3:85:1: grammarSpec : ID ( DOC_COMMENT )? ( optionsSpec )? ( delegateGrammars )? ( tokensSpec )? ( attrScope )* ( actions )? rules ;
	[GrammarRule("grammarSpec")]
	private void grammarSpec()
	{
		EnterRule_grammarSpec();
		EnterRule("grammarSpec", 4);
		TraceIn("grammarSpec", 4);
		try { DebugEnterRule(GrammarFileName, "grammarSpec");
		DebugLocation(85, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:86:2: ( ID ( DOC_COMMENT )? ( optionsSpec )? ( delegateGrammars )? ( tokensSpec )? ( attrScope )* ( actions )? rules )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:86:4: ID ( DOC_COMMENT )? ( optionsSpec )? ( delegateGrammars )? ( tokensSpec )? ( attrScope )* ( actions )? rules
			{
			DebugLocation(86, 4);
			Match(input,ID,Follow._ID_in_grammarSpec180); if (state.failed) return;
			DebugLocation(87, 3);
			// Grammars\\DefineGrammarItemsWalker.g3:87:3: ( DOC_COMMENT )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==DOC_COMMENT))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:87:3: DOC_COMMENT
				{
				DebugLocation(87, 3);
				Match(input,DOC_COMMENT,Follow._DOC_COMMENT_in_grammarSpec184); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(88, 3);
			// Grammars\\DefineGrammarItemsWalker.g3:88:3: ( optionsSpec )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==OPTIONS))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:88:3: optionsSpec
				{
				DebugLocation(88, 3);
				PushFollow(Follow._optionsSpec_in_grammarSpec189);
				optionsSpec();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(89, 3);
			// Grammars\\DefineGrammarItemsWalker.g3:89:3: ( delegateGrammars )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==IMPORT))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:89:3: delegateGrammars
				{
				DebugLocation(89, 3);
				PushFollow(Follow._delegateGrammars_in_grammarSpec194);
				delegateGrammars();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(90, 3);
			// Grammars\\DefineGrammarItemsWalker.g3:90:3: ( tokensSpec )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==TOKENS))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:90:3: tokensSpec
				{
				DebugLocation(90, 3);
				PushFollow(Follow._tokensSpec_in_grammarSpec199);
				tokensSpec();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(91, 3);
			// Grammars\\DefineGrammarItemsWalker.g3:91:3: ( attrScope )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==SCOPE))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:91:3: attrScope
					{
					DebugLocation(91, 3);
					PushFollow(Follow._attrScope_in_grammarSpec204);
					attrScope();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(92, 3);
			// Grammars\\DefineGrammarItemsWalker.g3:92:3: ( actions )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==AMPERSAND))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:92:3: actions
				{
				DebugLocation(92, 3);
				PushFollow(Follow._actions_in_grammarSpec209);
				actions();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(93, 3);
			PushFollow(Follow._rules_in_grammarSpec214);
			rules();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("grammarSpec", 4);
			LeaveRule("grammarSpec", 4);
			LeaveRule_grammarSpec();
		}
		DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "grammarSpec"); }
		return;

	}
	// $ANTLR end "grammarSpec"

	partial void EnterRule_actions();
	partial void LeaveRule_actions();
	// $ANTLR start "actions"
	// Grammars\\DefineGrammarItemsWalker.g3:96:1: actions : ( action )+ ;
	[GrammarRule("actions")]
	private void actions()
	{
		EnterRule_actions();
		EnterRule("actions", 5);
		TraceIn("actions", 5);
		try { DebugEnterRule(GrammarFileName, "actions");
		DebugLocation(96, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:97:2: ( ( action )+ )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:97:4: ( action )+
			{
			DebugLocation(97, 4);
			// Grammars\\DefineGrammarItemsWalker.g3:97:4: ( action )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==AMPERSAND))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:97:4: action
					{
					DebugLocation(97, 4);
					PushFollow(Follow._action_in_actions225);
					action();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("actions", 5);
			LeaveRule("actions", 5);
			LeaveRule_actions();
		}
		DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "actions"); }
		return;

	}
	// $ANTLR end "actions"

	partial void EnterRule_action();
	partial void LeaveRule_action();
	// $ANTLR start "action"
	// Grammars\\DefineGrammarItemsWalker.g3:100:1: action : ^(amp= AMPERSAND id1= ID (id2= ID a1= ACTION |a2= ACTION ) ) ;
	[GrammarRule("action")]
	private void action()
	{
		EnterRule_action();
		EnterRule("action", 6);
		TraceIn("action", 6);
		GrammarAST amp = default(GrammarAST);
		GrammarAST id1 = default(GrammarAST);
		GrammarAST id2 = default(GrammarAST);
		GrammarAST a1 = default(GrammarAST);
		GrammarAST a2 = default(GrammarAST);


			string scope = null;
			GrammarAST nameAST = null;
			GrammarAST actionAST = null;

		try { DebugEnterRule(GrammarFileName, "action");
		DebugLocation(100, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:107:2: ( ^(amp= AMPERSAND id1= ID (id2= ID a1= ACTION |a2= ACTION ) ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:107:4: ^(amp= AMPERSAND id1= ID (id2= ID a1= ACTION |a2= ACTION ) )
			{
			DebugLocation(107, 4);
			DebugLocation(107, 9);
			amp=(GrammarAST)Match(input,AMPERSAND,Follow._AMPERSAND_in_action245); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(107, 23);
			id1=(GrammarAST)Match(input,ID,Follow._ID_in_action249); if (state.failed) return;
			DebugLocation(108, 4);
			// Grammars\\DefineGrammarItemsWalker.g3:108:4: (id2= ID a1= ACTION |a2= ACTION )
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==ID))
			{
				alt10 = 1;
			}
			else if ((LA10_1==ACTION))
			{
				alt10 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:108:6: id2= ID a1= ACTION
				{
				DebugLocation(108, 9);
				id2=(GrammarAST)Match(input,ID,Follow._ID_in_action258); if (state.failed) return;
				DebugLocation(108, 15);
				a1=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_action262); if (state.failed) return;
				DebugLocation(109, 6);
				if (state.backtracking == 0)
				{
					scope = (id1!=null?id1.Text:default(string)); nameAST = id2; actionAST = a1;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\DefineGrammarItemsWalker.g3:110:6: a2= ACTION
				{
				DebugLocation(110, 8);
				a2=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_action278); if (state.failed) return;
				DebugLocation(111, 6);
				if (state.backtracking == 0)
				{
					scope = null; nameAST = id1; actionAST = a2;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(10); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(114, 4);
			if (state.backtracking == 0)
			{
				HandleAction(scope, amp, nameAST, actionAST);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("action", 6);
			LeaveRule("action", 6);
			LeaveRule_action();
		}
		DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "action"); }
		return;

	}
	// $ANTLR end "action"

	partial void EnterRule_optionsSpec();
	partial void LeaveRule_optionsSpec();
	// $ANTLR start "optionsSpec"
	// Grammars\\DefineGrammarItemsWalker.g3:117:1: optionsSpec : ^( OPTIONS ( . )* ) ;
	[GrammarRule("optionsSpec")]
	private void optionsSpec()
	{
		EnterRule_optionsSpec();
		EnterRule("optionsSpec", 7);
		TraceIn("optionsSpec", 7);
		try { DebugEnterRule(GrammarFileName, "optionsSpec");
		DebugLocation(117, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:118:2: ( ^( OPTIONS ( . )* ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:118:4: ^( OPTIONS ( . )* )
			{
			DebugLocation(118, 4);
			DebugLocation(118, 6);
			Match(input,OPTIONS,Follow._OPTIONS_in_optionsSpec312); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(118, 14);
				// Grammars\\DefineGrammarItemsWalker.g3:118:14: ( . )*
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					int LA11_1 = input.LA(1);

					if (((LA11_1>=ACTION && LA11_1<=XDIGIT)))
					{
						alt11 = 1;
					}
					else if ((LA11_1==UP))
					{
						alt11 = 2;
					}


					} finally { DebugExitDecision(11); }
					switch ( alt11 )
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\DefineGrammarItemsWalker.g3:118:14: .
						{
						DebugLocation(118, 14);
						MatchAny(input); if (state.failed) return;

						}
						break;

					default:
						goto loop11;
					}
				}

				loop11:
					;

				} finally { DebugExitSubRule(11); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("optionsSpec", 7);
			LeaveRule("optionsSpec", 7);
			LeaveRule_optionsSpec();
		}
		DebugLocation(119, 1);
		} finally { DebugExitRule(GrammarFileName, "optionsSpec"); }
		return;

	}
	// $ANTLR end "optionsSpec"

	partial void EnterRule_delegateGrammars();
	partial void LeaveRule_delegateGrammars();
	// $ANTLR start "delegateGrammars"
	// Grammars\\DefineGrammarItemsWalker.g3:121:1: delegateGrammars : ^( 'import' ( ^( ASSIGN ID ID ) | ID )+ ) ;
	[GrammarRule("delegateGrammars")]
	private void delegateGrammars()
	{
		EnterRule_delegateGrammars();
		EnterRule("delegateGrammars", 8);
		TraceIn("delegateGrammars", 8);
		try { DebugEnterRule(GrammarFileName, "delegateGrammars");
		DebugLocation(121, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:122:2: ( ^( 'import' ( ^( ASSIGN ID ID ) | ID )+ ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:122:4: ^( 'import' ( ^( ASSIGN ID ID ) | ID )+ )
			{
			DebugLocation(122, 4);
			DebugLocation(122, 7);
			Match(input,IMPORT,Follow._IMPORT_in_delegateGrammars329); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(122, 16);
			// Grammars\\DefineGrammarItemsWalker.g3:122:16: ( ^( ASSIGN ID ID ) | ID )+
			int cnt12=0;
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=3;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==ASSIGN))
				{
					alt12 = 1;
				}
				else if ((LA12_1==ID))
				{
					alt12 = 2;
				}


				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:122:18: ^( ASSIGN ID ID )
					{
					DebugLocation(122, 18);
					DebugLocation(122, 20);
					Match(input,ASSIGN,Follow._ASSIGN_in_delegateGrammars334); if (state.failed) return;

					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(122, 27);
					Match(input,ID,Follow._ID_in_delegateGrammars336); if (state.failed) return;
					DebugLocation(122, 30);
					Match(input,ID,Follow._ID_in_delegateGrammars338); if (state.failed) return;

					Match(input, TokenTypes.Up, null); if (state.failed) return;


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Grammars\\DefineGrammarItemsWalker.g3:122:36: ID
					{
					DebugLocation(122, 36);
					Match(input,ID,Follow._ID_in_delegateGrammars343); if (state.failed) return;

					}
					break;

				default:
					if (cnt12 >= 1)
						goto loop12;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee12 = new EarlyExitException( 12, input );
					DebugRecognitionException(eee12);
					throw eee12;
				}
				cnt12++;
			}
			loop12:
				;

			} finally { DebugExitSubRule(12); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("delegateGrammars", 8);
			LeaveRule("delegateGrammars", 8);
			LeaveRule_delegateGrammars();
		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "delegateGrammars"); }
		return;

	}
	// $ANTLR end "delegateGrammars"

	partial void EnterRule_tokensSpec();
	partial void LeaveRule_tokensSpec();
	// $ANTLR start "tokensSpec"
	// Grammars\\DefineGrammarItemsWalker.g3:125:1: tokensSpec : ^( TOKENS ( tokenSpec )* ) ;
	[GrammarRule("tokensSpec")]
	private void tokensSpec()
	{
		EnterRule_tokensSpec();
		EnterRule("tokensSpec", 9);
		TraceIn("tokensSpec", 9);
		try { DebugEnterRule(GrammarFileName, "tokensSpec");
		DebugLocation(125, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:126:2: ( ^( TOKENS ( tokenSpec )* ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:126:4: ^( TOKENS ( tokenSpec )* )
			{
			DebugLocation(126, 4);
			DebugLocation(126, 6);
			Match(input,TOKENS,Follow._TOKENS_in_tokensSpec360); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(126, 13);
				// Grammars\\DefineGrammarItemsWalker.g3:126:13: ( tokenSpec )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_1 = input.LA(1);

					if ((LA13_1==ASSIGN||LA13_1==TOKEN_REF))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\DefineGrammarItemsWalker.g3:126:13: tokenSpec
						{
						DebugLocation(126, 13);
						PushFollow(Follow._tokenSpec_in_tokensSpec362);
						tokenSpec();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tokensSpec", 9);
			LeaveRule("tokensSpec", 9);
			LeaveRule_tokensSpec();
		}
		DebugLocation(127, 1);
		} finally { DebugExitRule(GrammarFileName, "tokensSpec"); }
		return;

	}
	// $ANTLR end "tokensSpec"

	partial void EnterRule_tokenSpec();
	partial void LeaveRule_tokenSpec();
	// $ANTLR start "tokenSpec"
	// Grammars\\DefineGrammarItemsWalker.g3:129:1: tokenSpec : ( TOKEN_REF | ^( ASSIGN TOKEN_REF ( STRING_LITERAL | CHAR_LITERAL ) ) );
	[GrammarRule("tokenSpec")]
	private void tokenSpec()
	{
		EnterRule_tokenSpec();
		EnterRule("tokenSpec", 10);
		TraceIn("tokenSpec", 10);
		try { DebugEnterRule(GrammarFileName, "tokenSpec");
		DebugLocation(129, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:130:2: ( TOKEN_REF | ^( ASSIGN TOKEN_REF ( STRING_LITERAL | CHAR_LITERAL ) ) )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==TOKEN_REF))
			{
				alt14 = 1;
			}
			else if ((LA14_1==ASSIGN))
			{
				alt14 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:130:4: TOKEN_REF
				{
				DebugLocation(130, 4);
				Match(input,TOKEN_REF,Follow._TOKEN_REF_in_tokenSpec375); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\DefineGrammarItemsWalker.g3:131:4: ^( ASSIGN TOKEN_REF ( STRING_LITERAL | CHAR_LITERAL ) )
				{
				DebugLocation(131, 4);
				DebugLocation(131, 7);
				Match(input,ASSIGN,Follow._ASSIGN_in_tokenSpec382); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(132, 4);
				Match(input,TOKEN_REF,Follow._TOKEN_REF_in_tokenSpec387); if (state.failed) return;
				DebugLocation(133, 4);
				if (input.LA(1)==CHAR_LITERAL||input.LA(1)==STRING_LITERAL)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tokenSpec", 10);
			LeaveRule("tokenSpec", 10);
			LeaveRule_tokenSpec();
		}
		DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "tokenSpec"); }
		return;

	}
	// $ANTLR end "tokenSpec"

	partial void EnterRule_rules();
	partial void LeaveRule_rules();
	// $ANTLR start "rules"
	// Grammars\\DefineGrammarItemsWalker.g3:139:1: rules : ( rule | ^( PREC_RULE ( . )* ) )+ ;
	[GrammarRule("rules")]
	private void rules()
	{
		EnterRule_rules();
		EnterRule("rules", 11);
		TraceIn("rules", 11);
		try { DebugEnterRule(GrammarFileName, "rules");
		DebugLocation(139, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:140:2: ( ( rule | ^( PREC_RULE ( . )* ) )+ )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:140:4: ( rule | ^( PREC_RULE ( . )* ) )+
			{
			DebugLocation(140, 4);
			// Grammars\\DefineGrammarItemsWalker.g3:140:4: ( rule | ^( PREC_RULE ( . )* ) )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=3;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==RULE))
				{
					alt16 = 1;
				}
				else if ((LA16_1==PREC_RULE))
				{
					alt16 = 2;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:140:5: rule
					{
					DebugLocation(140, 5);
					PushFollow(Follow._rule_in_rules423);
					rule();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Grammars\\DefineGrammarItemsWalker.g3:140:12: ^( PREC_RULE ( . )* )
					{
					DebugLocation(140, 12);
					DebugLocation(140, 14);
					Match(input,PREC_RULE,Follow._PREC_RULE_in_rules428); if (state.failed) return;

					if (input.LA(1) == TokenTypes.Down)
					{
						Match(input, TokenTypes.Down, null); if (state.failed) return;
						DebugLocation(140, 24);
						// Grammars\\DefineGrammarItemsWalker.g3:140:24: ( . )*
						try { DebugEnterSubRule(15);
						while (true)
						{
							int alt15=2;
							try { DebugEnterDecision(15, false);
							int LA15_1 = input.LA(1);

							if (((LA15_1>=ACTION && LA15_1<=XDIGIT)))
							{
								alt15 = 1;
							}
							else if ((LA15_1==UP))
							{
								alt15 = 2;
							}


							} finally { DebugExitDecision(15); }
							switch ( alt15 )
							{
							case 1:
								DebugEnterAlt(1);
								// Grammars\\DefineGrammarItemsWalker.g3:140:24: .
								{
								DebugLocation(140, 24);
								MatchAny(input); if (state.failed) return;

								}
								break;

							default:
								goto loop15;
							}
						}

						loop15:
							;

						} finally { DebugExitSubRule(15); }


						Match(input, TokenTypes.Up, null); if (state.failed) return;
					}


					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rules", 11);
			LeaveRule("rules", 11);
			LeaveRule_rules();
		}
		DebugLocation(141, 1);
		} finally { DebugExitRule(GrammarFileName, "rules"); }
		return;

	}
	// $ANTLR end "rules"

	partial void EnterRule_rule();
	partial void LeaveRule_rule();
	// $ANTLR start "rule"
	// Grammars\\DefineGrammarItemsWalker.g3:143:1: rule : ^( RULE id= ID ( modifier )? ^( ARG (args= ARG_ACTION )? ) ^( RET (ret= ARG_ACTION )? ) ( throwsSpec )? ( optionsSpec )? ( ruleScopeSpec[r] )? ( ruleAction[r] )* b= block ( exceptionGroup )? EOR ) ;
	[GrammarRule("rule")]
	private TreeRuleReturnScope<GrammarAST> rule()
	{
		EnterRule_rule();
		EnterRule("rule", 12);
		TraceIn("rule", 12);
		TreeRuleReturnScope<GrammarAST> retval = new TreeRuleReturnScope<GrammarAST>();
		retval.Start = (GrammarAST)input.LT(1);

		GrammarAST id = default(GrammarAST);
		GrammarAST args = default(GrammarAST);
		GrammarAST ret = default(GrammarAST);
		GrammarAST RULE3 = default(GrammarAST);
		TreeRuleReturnScope<GrammarAST> b = default(TreeRuleReturnScope<GrammarAST>);
		TreeRuleReturnScope<GrammarAST> modifier4 = default(TreeRuleReturnScope<GrammarAST>);
		HashSet<string> throwsSpec5 = default(HashSet<string>);


			string name = null;
			IDictionary<string, object> opts = null;
			Rule r = null;

		try { DebugEnterRule(GrammarFileName, "rule");
		DebugLocation(143, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:150:2: ( ^( RULE id= ID ( modifier )? ^( ARG (args= ARG_ACTION )? ) ^( RET (ret= ARG_ACTION )? ) ( throwsSpec )? ( optionsSpec )? ( ruleScopeSpec[r] )? ( ruleAction[r] )* b= block ( exceptionGroup )? EOR ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:150:4: ^( RULE id= ID ( modifier )? ^( ARG (args= ARG_ACTION )? ) ^( RET (ret= ARG_ACTION )? ) ( throwsSpec )? ( optionsSpec )? ( ruleScopeSpec[r] )? ( ruleAction[r] )* b= block ( exceptionGroup )? EOR )
			{
			DebugLocation(150, 4);
			DebugLocation(150, 7);
			RULE3=(GrammarAST)Match(input,RULE,Follow._RULE_in_rule452); if (state.failed) return retval;

			Match(input, TokenTypes.Down, null); if (state.failed) return retval;
			DebugLocation(150, 14);
			id=(GrammarAST)Match(input,ID,Follow._ID_in_rule456); if (state.failed) return retval;
			DebugLocation(150, 18);
			if (state.backtracking == 0)
			{
				opts = RULE3.BlockOptions;
			}
			DebugLocation(151, 4);
			// Grammars\\DefineGrammarItemsWalker.g3:151:4: ( modifier )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==FRAGMENT||(LA17_1>=PRIVATE && LA17_1<=PUBLIC)))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:151:4: modifier
				{
				DebugLocation(151, 4);
				PushFollow(Follow._modifier_in_rule463);
				modifier4=modifier();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(152, 4);
			DebugLocation(152, 7);
			Match(input,ARG,Follow._ARG_in_rule471); if (state.failed) return retval;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(152, 11);
				// Grammars\\DefineGrammarItemsWalker.g3:152:11: (args= ARG_ACTION )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==ARG_ACTION))
				{
					alt18 = 1;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:152:12: args= ARG_ACTION
					{
					DebugLocation(152, 16);
					args=(GrammarAST)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_rule476); if (state.failed) return retval;

					}
					break;

				}
				} finally { DebugExitSubRule(18); }


				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
			}

			DebugLocation(153, 4);
			DebugLocation(153, 7);
			Match(input,RET,Follow._RET_in_rule487); if (state.failed) return retval;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(153, 11);
				// Grammars\\DefineGrammarItemsWalker.g3:153:11: (ret= ARG_ACTION )?
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==ARG_ACTION))
				{
					alt19 = 1;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:153:12: ret= ARG_ACTION
					{
					DebugLocation(153, 15);
					ret=(GrammarAST)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_rule492); if (state.failed) return retval;

					}
					break;

				}
				} finally { DebugExitSubRule(19); }


				Match(input, TokenTypes.Up, null); if (state.failed) return retval;
			}

			DebugLocation(154, 4);
			// Grammars\\DefineGrammarItemsWalker.g3:154:4: ( throwsSpec )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==THROWS))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:154:4: throwsSpec
				{
				DebugLocation(154, 4);
				PushFollow(Follow._throwsSpec_in_rule501);
				throwsSpec5=throwsSpec();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(155, 4);
			// Grammars\\DefineGrammarItemsWalker.g3:155:4: ( optionsSpec )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==OPTIONS))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:155:4: optionsSpec
				{
				DebugLocation(155, 4);
				PushFollow(Follow._optionsSpec_in_rule507);
				optionsSpec();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(155, 20);
			if (state.backtracking == 0)
			{
				HandleRuleAfterOptionsSpec(ref name, ref r, opts, retval.Start, id, (modifier4!=null?((DefineGrammarItemsWalker.modifier_return)modifier4).mod:default(string)), args, ret, throwsSpec5);
			}
			DebugLocation(156, 4);
			// Grammars\\DefineGrammarItemsWalker.g3:156:4: ( ruleScopeSpec[r] )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==SCOPE))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:156:4: ruleScopeSpec[r]
				{
				DebugLocation(156, 4);
				PushFollow(Follow._ruleScopeSpec_in_rule518);
				ruleScopeSpec(r);
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(157, 4);
			// Grammars\\DefineGrammarItemsWalker.g3:157:4: ( ruleAction[r] )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_1 = input.LA(1);

				if ((LA23_1==AMPERSAND))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:157:4: ruleAction[r]
					{
					DebugLocation(157, 4);
					PushFollow(Follow._ruleAction_in_rule525);
					ruleAction(r);
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }

			DebugLocation(157, 22);
			if (state.backtracking == 0)
			{
				HandleRuleAfterRuleActions();
			}
			DebugLocation(158, 5);
			PushFollow(Follow._block_in_rule539);
			b=block();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(159, 4);
			// Grammars\\DefineGrammarItemsWalker.g3:159:4: ( exceptionGroup )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==CATCH||LA24_1==FINALLY))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:159:4: exceptionGroup
				{
				DebugLocation(159, 4);
				PushFollow(Follow._exceptionGroup_in_rule544);
				exceptionGroup();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(160, 4);
			Match(input,EOR,Follow._EOR_in_rule550); if (state.failed) return retval;
			DebugLocation(160, 14);
			if (state.backtracking == 0)
			{
				HandleRuleEnd((b!=null?((GrammarAST)b.Start):default(GrammarAST)), opts);
			}

			Match(input, TokenTypes.Up, null); if (state.failed) return retval;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rule", 12);
			LeaveRule("rule", 12);
			LeaveRule_rule();
		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "rule"); }
		return retval;

	}
	// $ANTLR end "rule"

	partial void EnterRule_ruleAction();
	partial void LeaveRule_ruleAction();
	// $ANTLR start "ruleAction"
	// Grammars\\DefineGrammarItemsWalker.g3:164:1: ruleAction[Rule r] : ^(amp= AMPERSAND id= ID a= ACTION ) ;
	[GrammarRule("ruleAction")]
	private void ruleAction(Rule r)
	{
		EnterRule_ruleAction();
		EnterRule("ruleAction", 13);
		TraceIn("ruleAction", 13);
		GrammarAST amp = default(GrammarAST);
		GrammarAST id = default(GrammarAST);
		GrammarAST a = default(GrammarAST);

		try { DebugEnterRule(GrammarFileName, "ruleAction");
		DebugLocation(164, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:165:2: ( ^(amp= AMPERSAND id= ID a= ACTION ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:165:4: ^(amp= AMPERSAND id= ID a= ACTION )
			{
			DebugLocation(165, 4);
			DebugLocation(165, 9);
			amp=(GrammarAST)Match(input,AMPERSAND,Follow._AMPERSAND_in_ruleAction577); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(165, 22);
			id=(GrammarAST)Match(input,ID,Follow._ID_in_ruleAction581); if (state.failed) return;
			DebugLocation(165, 27);
			a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_ruleAction585); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(165, 36);
			if (state.backtracking == 0)
			{
				HandleRuleAction(r, amp, id, a);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ruleAction", 13);
			LeaveRule("ruleAction", 13);
			LeaveRule_ruleAction();
		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "ruleAction"); }
		return;

	}
	// $ANTLR end "ruleAction"

	private sealed partial class modifier_return : TreeRuleReturnScope<GrammarAST>
	{
		public string mod;
		public modifier_return(DefineGrammarItemsWalker grammar) {OnCreated(grammar);}
		partial void OnCreated(DefineGrammarItemsWalker grammar);
	}

	partial void EnterRule_modifier();
	partial void LeaveRule_modifier();
	// $ANTLR start "modifier"
	// Grammars\\DefineGrammarItemsWalker.g3:168:1: modifier returns [string mod] : ( 'protected' | 'public' | 'private' | 'fragment' );
	[GrammarRule("modifier")]
	private DefineGrammarItemsWalker.modifier_return modifier()
	{
		EnterRule_modifier();
		EnterRule("modifier", 14);
		TraceIn("modifier", 14);
		DefineGrammarItemsWalker.modifier_return retval = new DefineGrammarItemsWalker.modifier_return(this);
		retval.Start = (GrammarAST)input.LT(1);


			retval.mod = retval.Start.Token.Text;

		try { DebugEnterRule(GrammarFileName, "modifier");
		DebugLocation(168, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:173:2: ( 'protected' | 'public' | 'private' | 'fragment' )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:
			{
			DebugLocation(173, 2);
			if (input.LA(1)==FRAGMENT||(input.LA(1)>=PRIVATE && input.LA(1)<=PUBLIC))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("modifier", 14);
			LeaveRule("modifier", 14);
			LeaveRule_modifier();
		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "modifier"); }
		return retval;

	}
	// $ANTLR end "modifier"

	partial void EnterRule_throwsSpec();
	partial void LeaveRule_throwsSpec();
	// $ANTLR start "throwsSpec"
	// Grammars\\DefineGrammarItemsWalker.g3:179:1: throwsSpec returns [HashSet<string> exceptions = new HashSet<string>()] : ^( 'throws' ( ID )+ ) ;
	[GrammarRule("throwsSpec")]
	private HashSet<string> throwsSpec()
	{
		EnterRule_throwsSpec();
		EnterRule("throwsSpec", 15);
		TraceIn("throwsSpec", 15);
		HashSet<string> exceptions =  new HashSet<string>();


		GrammarAST ID6 = default(GrammarAST);

		try { DebugEnterRule(GrammarFileName, "throwsSpec");
		DebugLocation(179, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:180:2: ( ^( 'throws' ( ID )+ ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:180:4: ^( 'throws' ( ID )+ )
			{
			DebugLocation(180, 4);
			DebugLocation(180, 6);
			Match(input,THROWS,Follow._THROWS_in_throwsSpec639); if (state.failed) return exceptions;

			Match(input, TokenTypes.Down, null); if (state.failed) return exceptions;
			DebugLocation(180, 15);
			// Grammars\\DefineGrammarItemsWalker.g3:180:15: ( ID )+
			int cnt25=0;
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==ID))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:180:16: ID
					{
					DebugLocation(180, 16);
					ID6=(GrammarAST)Match(input,ID,Follow._ID_in_throwsSpec642); if (state.failed) return exceptions;
					DebugLocation(180, 19);
					if (state.backtracking == 0)
					{
						exceptions.Add((ID6!=null?ID6.Text:default(string)));
					}

					}
					break;

				default:
					if (cnt25 >= 1)
						goto loop25;

					if (state.backtracking>0) {state.failed=true; return exceptions;}
					EarlyExitException eee25 = new EarlyExitException( 25, input );
					DebugRecognitionException(eee25);
					throw eee25;
				}
				cnt25++;
			}
			loop25:
				;

			} finally { DebugExitSubRule(25); }


			Match(input, TokenTypes.Up, null); if (state.failed) return exceptions;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("throwsSpec", 15);
			LeaveRule("throwsSpec", 15);
			LeaveRule_throwsSpec();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "throwsSpec"); }
		return exceptions;

	}
	// $ANTLR end "throwsSpec"

	partial void EnterRule_ruleScopeSpec();
	partial void LeaveRule_ruleScopeSpec();
	// $ANTLR start "ruleScopeSpec"
	// Grammars\\DefineGrammarItemsWalker.g3:183:1: ruleScopeSpec[Rule r] : ^( 'scope' ( ( attrScopeAction )* attrs= ACTION )? (uses= ID )* ) ;
	[GrammarRule("ruleScopeSpec")]
	private void ruleScopeSpec(Rule r)
	{
		EnterRule_ruleScopeSpec();
		EnterRule("ruleScopeSpec", 16);
		TraceIn("ruleScopeSpec", 16);
		AttributeScopeActions_stack.Push(new AttributeScopeActions_scope(this));AttributeScopeActions_scopeInit(AttributeScopeActions_stack.Peek());

		GrammarAST attrs = default(GrammarAST);
		GrammarAST uses = default(GrammarAST);


			AttributeScopeActions_stack.Peek().actions =  new Dictionary<GrammarAST, GrammarAST>();

		try { DebugEnterRule(GrammarFileName, "ruleScopeSpec");
		DebugLocation(183, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:189:2: ( ^( 'scope' ( ( attrScopeAction )* attrs= ACTION )? (uses= ID )* ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:189:4: ^( 'scope' ( ( attrScopeAction )* attrs= ACTION )? (uses= ID )* )
			{
			DebugLocation(189, 4);
			DebugLocation(189, 7);
			Match(input,SCOPE,Follow._SCOPE_in_ruleScopeSpec672); if (state.failed) return;

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(190, 4);
				// Grammars\\DefineGrammarItemsWalker.g3:190:4: ( ( attrScopeAction )* attrs= ACTION )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==ACTION||LA27_1==AMPERSAND))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:190:6: ( attrScopeAction )* attrs= ACTION
					{
					DebugLocation(190, 6);
					// Grammars\\DefineGrammarItemsWalker.g3:190:6: ( attrScopeAction )*
					try { DebugEnterSubRule(26);
					while (true)
					{
						int alt26=2;
						try { DebugEnterDecision(26, false);
						int LA26_1 = input.LA(1);

						if ((LA26_1==AMPERSAND))
						{
							alt26 = 1;
						}


						} finally { DebugExitDecision(26); }
						switch ( alt26 )
						{
						case 1:
							DebugEnterAlt(1);
							// Grammars\\DefineGrammarItemsWalker.g3:190:6: attrScopeAction
							{
							DebugLocation(190, 6);
							PushFollow(Follow._attrScopeAction_in_ruleScopeSpec679);
							attrScopeAction();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							goto loop26;
						}
					}

					loop26:
						;

					} finally { DebugExitSubRule(26); }

					DebugLocation(190, 28);
					attrs=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_ruleScopeSpec684); if (state.failed) return;
					DebugLocation(190, 36);
					if (state.backtracking == 0)
					{
						HandleRuleScopeSpecAction(r, attrs, AttributeScopeActions_stack.Peek().actions);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(192, 4);
				// Grammars\\DefineGrammarItemsWalker.g3:192:4: (uses= ID )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_1 = input.LA(1);

					if ((LA28_1==ID))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\DefineGrammarItemsWalker.g3:192:6: uses= ID
						{
						DebugLocation(192, 10);
						uses=(GrammarAST)Match(input,ID,Follow._ID_in_ruleScopeSpec701); if (state.failed) return;
						DebugLocation(192, 20);
						if (state.backtracking == 0)
						{
							HandleRuleScopeSpecUses(r, uses);
						}

						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ruleScopeSpec", 16);
			LeaveRule("ruleScopeSpec", 16);
			LeaveRule_ruleScopeSpec();
			AttributeScopeActions_scopeAfter(AttributeScopeActions_stack.Peek());AttributeScopeActions_stack.Pop();

		}
		DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "ruleScopeSpec"); }
		return;

	}
	// $ANTLR end "ruleScopeSpec"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Grammars\\DefineGrammarItemsWalker.g3:197:1: block : ^( BLOCK ( optionsSpec )? ( blockAction )* ( alternative rewrite )+ EOB ) ;
	[GrammarRule("block")]
	private TreeRuleReturnScope<GrammarAST> block()
	{
		EnterRule_block();
		EnterRule("block", 17);
		TraceIn("block", 17);
		TreeRuleReturnScope<GrammarAST> retval = new TreeRuleReturnScope<GrammarAST>();
		retval.Start = (GrammarAST)input.LT(1);


			// must run during backtracking
			this.blockLevel++;
			if ( blockLevel == 1 )
				this.outerAltNum=1;

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(197, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:205:2: ( ^( BLOCK ( optionsSpec )? ( blockAction )* ( alternative rewrite )+ EOB ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:205:4: ^( BLOCK ( optionsSpec )? ( blockAction )* ( alternative rewrite )+ EOB )
			{
			DebugLocation(205, 4);
			DebugLocation(205, 7);
			Match(input,BLOCK,Follow._BLOCK_in_block737); if (state.failed) return retval;

			Match(input, TokenTypes.Down, null); if (state.failed) return retval;
			DebugLocation(206, 4);
			// Grammars\\DefineGrammarItemsWalker.g3:206:4: ( optionsSpec )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==OPTIONS))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:206:5: optionsSpec
				{
				DebugLocation(206, 5);
				PushFollow(Follow._optionsSpec_in_block743);
				optionsSpec();
				PopFollow();
				if (state.failed) return retval;

				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(207, 4);
			// Grammars\\DefineGrammarItemsWalker.g3:207:4: ( blockAction )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==AMPERSAND))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:207:5: blockAction
					{
					DebugLocation(207, 5);
					PushFollow(Follow._blockAction_in_block751);
					blockAction();
					PopFollow();
					if (state.failed) return retval;

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(208, 4);
			// Grammars\\DefineGrammarItemsWalker.g3:208:4: ( alternative rewrite )+
			int cnt31=0;
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==ALT))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:208:6: alternative rewrite
					{
					DebugLocation(208, 6);
					PushFollow(Follow._alternative_in_block760);
					alternative();
					PopFollow();
					if (state.failed) return retval;
					DebugLocation(208, 18);
					PushFollow(Follow._rewrite_in_block762);
					rewrite();
					PopFollow();
					if (state.failed) return retval;
					DebugLocation(209, 5);

										if ( this.blockLevel == 1 )
											this.outerAltNum++;
									

					}
					break;

				default:
					if (cnt31 >= 1)
						goto loop31;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee31 = new EarlyExitException( 31, input );
					DebugRecognitionException(eee31);
					throw eee31;
				}
				cnt31++;
			}
			loop31:
				;

			} finally { DebugExitSubRule(31); }

			DebugLocation(214, 4);
			Match(input,EOB,Follow._EOB_in_block779); if (state.failed) return retval;

			Match(input, TokenTypes.Up, null); if (state.failed) return retval;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block", 17);
			LeaveRule("block", 17);
			LeaveRule_block();
			 blockLevel--; 
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_blockAction();
	partial void LeaveRule_blockAction();
	// $ANTLR start "blockAction"
	// Grammars\\DefineGrammarItemsWalker.g3:220:1: blockAction : ^( AMPERSAND ID ACTION ) ;
	[GrammarRule("blockAction")]
	private void blockAction()
	{
		EnterRule_blockAction();
		EnterRule("blockAction", 18);
		TraceIn("blockAction", 18);
		try { DebugEnterRule(GrammarFileName, "blockAction");
		DebugLocation(220, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:221:2: ( ^( AMPERSAND ID ACTION ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:221:4: ^( AMPERSAND ID ACTION )
			{
			DebugLocation(221, 4);
			DebugLocation(221, 6);
			Match(input,AMPERSAND,Follow._AMPERSAND_in_blockAction801); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(221, 16);
			Match(input,ID,Follow._ID_in_blockAction803); if (state.failed) return;
			DebugLocation(221, 19);
			Match(input,ACTION,Follow._ACTION_in_blockAction805); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("blockAction", 18);
			LeaveRule("blockAction", 18);
			LeaveRule_blockAction();
		}
		DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "blockAction"); }
		return;

	}
	// $ANTLR end "blockAction"

	partial void EnterRule_alternative();
	partial void LeaveRule_alternative();
	// $ANTLR start "alternative"
	// Grammars\\DefineGrammarItemsWalker.g3:224:1: alternative : ^( ALT ( element )+ EOA ) ;
	[GrammarRule("alternative")]
	private void alternative()
	{
		EnterRule_alternative();
		EnterRule("alternative", 19);
		TraceIn("alternative", 19);
		try { DebugEnterRule(GrammarFileName, "alternative");
		DebugLocation(224, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:225:2: ( ^( ALT ( element )+ EOA ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:225:4: ^( ALT ( element )+ EOA )
			{
			DebugLocation(225, 4);
			DebugLocation(225, 6);
			Match(input,ALT,Follow._ALT_in_alternative818); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(225, 10);
			// Grammars\\DefineGrammarItemsWalker.g3:225:10: ( element )+
			int cnt32=0;
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_1 = input.LA(1);

				if ((LA32_1==ACTION||(LA32_1>=ASSIGN && LA32_1<=BLOCK)||(LA32_1>=CHAR_LITERAL && LA32_1<=CHAR_RANGE)||LA32_1==CLOSURE||LA32_1==DOT||LA32_1==EPSILON||LA32_1==FORCED_ACTION||LA32_1==GATED_SEMPRED||LA32_1==NOT||LA32_1==OPTIONAL||(LA32_1>=PLUS_ASSIGN && LA32_1<=POSITIVE_CLOSURE)||LA32_1==RANGE||LA32_1==ROOT||LA32_1==RULE_REF||LA32_1==SEMPRED||(LA32_1>=STRING_LITERAL && LA32_1<=SYN_SEMPRED)||LA32_1==TOKEN_REF||LA32_1==TREE_BEGIN||LA32_1==WILDCARD))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:225:10: element
					{
					DebugLocation(225, 10);
					PushFollow(Follow._element_in_alternative820);
					element();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt32 >= 1)
						goto loop32;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee32 = new EarlyExitException( 32, input );
					DebugRecognitionException(eee32);
					throw eee32;
				}
				cnt32++;
			}
			loop32:
				;

			} finally { DebugExitSubRule(32); }

			DebugLocation(225, 19);
			Match(input,EOA,Follow._EOA_in_alternative823); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alternative", 19);
			LeaveRule("alternative", 19);
			LeaveRule_alternative();
		}
		DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "alternative"); }
		return;

	}
	// $ANTLR end "alternative"

	partial void EnterRule_exceptionGroup();
	partial void LeaveRule_exceptionGroup();
	// $ANTLR start "exceptionGroup"
	// Grammars\\DefineGrammarItemsWalker.g3:228:1: exceptionGroup : ( ( exceptionHandler )+ ( finallyClause )? | finallyClause );
	[GrammarRule("exceptionGroup")]
	private void exceptionGroup()
	{
		EnterRule_exceptionGroup();
		EnterRule("exceptionGroup", 20);
		TraceIn("exceptionGroup", 20);
		try { DebugEnterRule(GrammarFileName, "exceptionGroup");
		DebugLocation(228, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:229:2: ( ( exceptionHandler )+ ( finallyClause )? | finallyClause )
			int alt35=2;
			try { DebugEnterDecision(35, false);
			int LA35_1 = input.LA(1);

			if ((LA35_1==CATCH))
			{
				alt35 = 1;
			}
			else if ((LA35_1==FINALLY))
			{
				alt35 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 35, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:229:4: ( exceptionHandler )+ ( finallyClause )?
				{
				DebugLocation(229, 4);
				// Grammars\\DefineGrammarItemsWalker.g3:229:4: ( exceptionHandler )+
				int cnt33=0;
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_1 = input.LA(1);

					if ((LA33_1==CATCH))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch (alt33)
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\DefineGrammarItemsWalker.g3:229:4: exceptionHandler
						{
						DebugLocation(229, 4);
						PushFollow(Follow._exceptionHandler_in_exceptionGroup835);
						exceptionHandler();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						if (cnt33 >= 1)
							goto loop33;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee33 = new EarlyExitException( 33, input );
						DebugRecognitionException(eee33);
						throw eee33;
					}
					cnt33++;
				}
				loop33:
					;

				} finally { DebugExitSubRule(33); }

				DebugLocation(229, 22);
				// Grammars\\DefineGrammarItemsWalker.g3:229:22: ( finallyClause )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if ((LA34_1==FINALLY))
				{
					alt34 = 1;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:229:22: finallyClause
					{
					DebugLocation(229, 22);
					PushFollow(Follow._finallyClause_in_exceptionGroup838);
					finallyClause();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(34); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\DefineGrammarItemsWalker.g3:230:4: finallyClause
				{
				DebugLocation(230, 4);
				PushFollow(Follow._finallyClause_in_exceptionGroup844);
				finallyClause();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exceptionGroup", 20);
			LeaveRule("exceptionGroup", 20);
			LeaveRule_exceptionGroup();
		}
		DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "exceptionGroup"); }
		return;

	}
	// $ANTLR end "exceptionGroup"

	partial void EnterRule_exceptionHandler();
	partial void LeaveRule_exceptionHandler();
	// $ANTLR start "exceptionHandler"
	// Grammars\\DefineGrammarItemsWalker.g3:233:1: exceptionHandler : ^( 'catch' ARG_ACTION ACTION ) ;
	[GrammarRule("exceptionHandler")]
	private void exceptionHandler()
	{
		EnterRule_exceptionHandler();
		EnterRule("exceptionHandler", 21);
		TraceIn("exceptionHandler", 21);
		GrammarAST ACTION7 = default(GrammarAST);

		try { DebugEnterRule(GrammarFileName, "exceptionHandler");
		DebugLocation(233, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:234:2: ( ^( 'catch' ARG_ACTION ACTION ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:234:6: ^( 'catch' ARG_ACTION ACTION )
			{
			DebugLocation(234, 6);
			DebugLocation(234, 8);
			Match(input,CATCH,Follow._CATCH_in_exceptionHandler858); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(234, 16);
			Match(input,ARG_ACTION,Follow._ARG_ACTION_in_exceptionHandler860); if (state.failed) return;
			DebugLocation(234, 27);
			ACTION7=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_exceptionHandler862); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(234, 35);
			if (state.backtracking == 0)
			{
				TrackInlineAction(ACTION7);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exceptionHandler", 21);
			LeaveRule("exceptionHandler", 21);
			LeaveRule_exceptionHandler();
		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "exceptionHandler"); }
		return;

	}
	// $ANTLR end "exceptionHandler"

	partial void EnterRule_finallyClause();
	partial void LeaveRule_finallyClause();
	// $ANTLR start "finallyClause"
	// Grammars\\DefineGrammarItemsWalker.g3:237:1: finallyClause : ^( 'finally' ACTION ) ;
	[GrammarRule("finallyClause")]
	private void finallyClause()
	{
		EnterRule_finallyClause();
		EnterRule("finallyClause", 22);
		TraceIn("finallyClause", 22);
		GrammarAST ACTION8 = default(GrammarAST);

		try { DebugEnterRule(GrammarFileName, "finallyClause");
		DebugLocation(237, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:238:2: ( ^( 'finally' ACTION ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:238:7: ^( 'finally' ACTION )
			{
			DebugLocation(238, 7);
			DebugLocation(238, 9);
			Match(input,FINALLY,Follow._FINALLY_in_finallyClause880); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(238, 19);
			ACTION8=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_finallyClause882); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(238, 27);
			if (state.backtracking == 0)
			{
				TrackInlineAction(ACTION8);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("finallyClause", 22);
			LeaveRule("finallyClause", 22);
			LeaveRule_finallyClause();
		}
		DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "finallyClause"); }
		return;

	}
	// $ANTLR end "finallyClause"

	partial void EnterRule_element();
	partial void LeaveRule_element();
	// $ANTLR start "element"
	// Grammars\\DefineGrammarItemsWalker.g3:241:1: element : ( ^( ROOT element ) | ^( BANG element ) | atom[null] | ^( NOT element ) | ^( RANGE atom[null] atom[null] ) | ^( CHAR_RANGE atom[null] atom[null] ) | ^( ASSIGN id= ID el= element ) | ^( PLUS_ASSIGN id= ID el= element ) | ebnf | tree_ | ^( SYNPRED block ) |act= ACTION |act= FORCED_ACTION |act= SEMPRED | SYN_SEMPRED | ^( BACKTRACK_SEMPRED ( . )* ) |act= GATED_SEMPRED | EPSILON );
	[GrammarRule("element")]
	private TreeRuleReturnScope<GrammarAST> element()
	{
		EnterRule_element();
		EnterRule("element", 23);
		TraceIn("element", 23);
		TreeRuleReturnScope<GrammarAST> retval = new TreeRuleReturnScope<GrammarAST>();
		retval.Start = (GrammarAST)input.LT(1);

		GrammarAST id = default(GrammarAST);
		GrammarAST act = default(GrammarAST);
		TreeRuleReturnScope<GrammarAST> el = default(TreeRuleReturnScope<GrammarAST>);

		try { DebugEnterRule(GrammarFileName, "element");
		DebugLocation(241, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:242:2: ( ^( ROOT element ) | ^( BANG element ) | atom[null] | ^( NOT element ) | ^( RANGE atom[null] atom[null] ) | ^( CHAR_RANGE atom[null] atom[null] ) | ^( ASSIGN id= ID el= element ) | ^( PLUS_ASSIGN id= ID el= element ) | ebnf | tree_ | ^( SYNPRED block ) |act= ACTION |act= FORCED_ACTION |act= SEMPRED | SYN_SEMPRED | ^( BACKTRACK_SEMPRED ( . )* ) |act= GATED_SEMPRED | EPSILON )
			int alt37=18;
			try { DebugEnterDecision(37, false);
			switch (input.LA(1))
			{
			case ROOT:
				{
				alt37 = 1;
				}
				break;
			case BANG:
				{
				alt37 = 2;
				}
				break;
			case CHAR_LITERAL:
			case DOT:
			case RULE_REF:
			case STRING_LITERAL:
			case TOKEN_REF:
			case WILDCARD:
				{
				alt37 = 3;
				}
				break;
			case NOT:
				{
				alt37 = 4;
				}
				break;
			case RANGE:
				{
				alt37 = 5;
				}
				break;
			case CHAR_RANGE:
				{
				alt37 = 6;
				}
				break;
			case ASSIGN:
				{
				alt37 = 7;
				}
				break;
			case PLUS_ASSIGN:
				{
				alt37 = 8;
				}
				break;
			case BLOCK:
			case CLOSURE:
			case OPTIONAL:
			case POSITIVE_CLOSURE:
				{
				alt37 = 9;
				}
				break;
			case TREE_BEGIN:
				{
				alt37 = 10;
				}
				break;
			case SYNPRED:
				{
				alt37 = 11;
				}
				break;
			case ACTION:
				{
				alt37 = 12;
				}
				break;
			case FORCED_ACTION:
				{
				alt37 = 13;
				}
				break;
			case SEMPRED:
				{
				alt37 = 14;
				}
				break;
			case SYN_SEMPRED:
				{
				alt37 = 15;
				}
				break;
			case BACKTRACK_SEMPRED:
				{
				alt37 = 16;
				}
				break;
			case GATED_SEMPRED:
				{
				alt37 = 17;
				}
				break;
			case EPSILON:
				{
				alt37 = 18;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 37, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:242:6: ^( ROOT element )
				{
				DebugLocation(242, 6);
				DebugLocation(242, 8);
				Match(input,ROOT,Follow._ROOT_in_element899); if (state.failed) return retval;

				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(242, 13);
				PushFollow(Follow._element_in_element901);
				element();
				PopFollow();
				if (state.failed) return retval;

				Match(input, TokenTypes.Up, null); if (state.failed) return retval;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\DefineGrammarItemsWalker.g3:243:6: ^( BANG element )
				{
				DebugLocation(243, 6);
				DebugLocation(243, 8);
				Match(input,BANG,Follow._BANG_in_element910); if (state.failed) return retval;

				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(243, 13);
				PushFollow(Follow._element_in_element912);
				element();
				PopFollow();
				if (state.failed) return retval;

				Match(input, TokenTypes.Up, null); if (state.failed) return retval;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\DefineGrammarItemsWalker.g3:244:6: atom[null]
				{
				DebugLocation(244, 6);
				PushFollow(Follow._atom_in_element920);
				atom(null);
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Grammars\\DefineGrammarItemsWalker.g3:245:6: ^( NOT element )
				{
				DebugLocation(245, 6);
				DebugLocation(245, 8);
				Match(input,NOT,Follow._NOT_in_element929); if (state.failed) return retval;

				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(245, 12);
				PushFollow(Follow._element_in_element931);
				element();
				PopFollow();
				if (state.failed) return retval;

				Match(input, TokenTypes.Up, null); if (state.failed) return retval;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Grammars\\DefineGrammarItemsWalker.g3:246:6: ^( RANGE atom[null] atom[null] )
				{
				DebugLocation(246, 6);
				DebugLocation(246, 8);
				Match(input,RANGE,Follow._RANGE_in_element940); if (state.failed) return retval;

				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(246, 14);
				PushFollow(Follow._atom_in_element942);
				atom(null);
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(246, 25);
				PushFollow(Follow._atom_in_element945);
				atom(null);
				PopFollow();
				if (state.failed) return retval;

				Match(input, TokenTypes.Up, null); if (state.failed) return retval;


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Grammars\\DefineGrammarItemsWalker.g3:247:6: ^( CHAR_RANGE atom[null] atom[null] )
				{
				DebugLocation(247, 6);
				DebugLocation(247, 8);
				Match(input,CHAR_RANGE,Follow._CHAR_RANGE_in_element955); if (state.failed) return retval;

				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(247, 19);
				PushFollow(Follow._atom_in_element957);
				atom(null);
				PopFollow();
				if (state.failed) return retval;
				DebugLocation(247, 30);
				PushFollow(Follow._atom_in_element960);
				atom(null);
				PopFollow();
				if (state.failed) return retval;

				Match(input, TokenTypes.Up, null); if (state.failed) return retval;


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Grammars\\DefineGrammarItemsWalker.g3:248:4: ^( ASSIGN id= ID el= element )
				{
				DebugLocation(248, 4);
				DebugLocation(248, 6);
				Match(input,ASSIGN,Follow._ASSIGN_in_element968); if (state.failed) return retval;

				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(248, 15);
				id=(GrammarAST)Match(input,ID,Follow._ID_in_element972); if (state.failed) return retval;
				DebugLocation(248, 21);
				PushFollow(Follow._element_in_element976);
				el=element();
				PopFollow();
				if (state.failed) return retval;

				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

				DebugLocation(248, 33);
				if (state.backtracking == 0)
				{
					HandleElementAssign(id, (el!=null?((GrammarAST)el.Start):default(GrammarAST)));
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Grammars\\DefineGrammarItemsWalker.g3:249:4: ^( PLUS_ASSIGN id= ID el= element )
				{
				DebugLocation(249, 4);
				DebugLocation(249, 6);
				Match(input,PLUS_ASSIGN,Follow._PLUS_ASSIGN_in_element987); if (state.failed) return retval;

				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(249, 20);
				id=(GrammarAST)Match(input,ID,Follow._ID_in_element991); if (state.failed) return retval;
				DebugLocation(249, 26);
				PushFollow(Follow._element_in_element995);
				el=element();
				PopFollow();
				if (state.failed) return retval;

				Match(input, TokenTypes.Up, null); if (state.failed) return retval;

				DebugLocation(249, 37);
				if (state.backtracking == 0)
				{
					HandleElementPlusAssign(id, (el!=null?((GrammarAST)el.Start):default(GrammarAST)));
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Grammars\\DefineGrammarItemsWalker.g3:250:6: ebnf
				{
				DebugLocation(250, 6);
				PushFollow(Follow._ebnf_in_element1006);
				ebnf();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Grammars\\DefineGrammarItemsWalker.g3:251:6: tree_
				{
				DebugLocation(251, 6);
				PushFollow(Follow._tree__in_element1013);
				tree_();
				PopFollow();
				if (state.failed) return retval;

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Grammars\\DefineGrammarItemsWalker.g3:252:6: ^( SYNPRED block )
				{
				DebugLocation(252, 6);
				DebugLocation(252, 8);
				Match(input,SYNPRED,Follow._SYNPRED_in_element1021); if (state.failed) return retval;

				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(252, 16);
				PushFollow(Follow._block_in_element1023);
				block();
				PopFollow();
				if (state.failed) return retval;

				Match(input, TokenTypes.Up, null); if (state.failed) return retval;


				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Grammars\\DefineGrammarItemsWalker.g3:253:6: act= ACTION
				{
				DebugLocation(253, 9);
				act=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_element1033); if (state.failed) return retval;
				DebugLocation(253, 23);
				if (state.backtracking == 0)
				{
					HandleInlineAction(act);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Grammars\\DefineGrammarItemsWalker.g3:254:6: act= FORCED_ACTION
				{
				DebugLocation(254, 9);
				act=(GrammarAST)Match(input,FORCED_ACTION,Follow._FORCED_ACTION_in_element1050); if (state.failed) return retval;
				DebugLocation(254, 28);
				if (state.backtracking == 0)
				{
					HandleInlineAction(act);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Grammars\\DefineGrammarItemsWalker.g3:255:6: act= SEMPRED
				{
				DebugLocation(255, 9);
				act=(GrammarAST)Match(input,SEMPRED,Follow._SEMPRED_in_element1065); if (state.failed) return retval;
				DebugLocation(255, 24);
				if (state.backtracking == 0)
				{
					HandleInlineAction(act);
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Grammars\\DefineGrammarItemsWalker.g3:256:6: SYN_SEMPRED
				{
				DebugLocation(256, 6);
				Match(input,SYN_SEMPRED,Follow._SYN_SEMPRED_in_element1080); if (state.failed) return retval;

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Grammars\\DefineGrammarItemsWalker.g3:257:6: ^( BACKTRACK_SEMPRED ( . )* )
				{
				DebugLocation(257, 6);
				DebugLocation(257, 8);
				Match(input,BACKTRACK_SEMPRED,Follow._BACKTRACK_SEMPRED_in_element1088); if (state.failed) return retval;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
					DebugLocation(257, 26);
					// Grammars\\DefineGrammarItemsWalker.g3:257:26: ( . )*
					try { DebugEnterSubRule(36);
					while (true)
					{
						int alt36=2;
						try { DebugEnterDecision(36, false);
						int LA36_1 = input.LA(1);

						if (((LA36_1>=ACTION && LA36_1<=XDIGIT)))
						{
							alt36 = 1;
						}
						else if ((LA36_1==UP))
						{
							alt36 = 2;
						}


						} finally { DebugExitDecision(36); }
						switch ( alt36 )
						{
						case 1:
							DebugEnterAlt(1);
							// Grammars\\DefineGrammarItemsWalker.g3:257:26: .
							{
							DebugLocation(257, 26);
							MatchAny(input); if (state.failed) return retval;

							}
							break;

						default:
							goto loop36;
						}
					}

					loop36:
						;

					} finally { DebugExitSubRule(36); }


					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
				}


				}
				break;
			case 17:
				DebugEnterAlt(17);
				// Grammars\\DefineGrammarItemsWalker.g3:258:6: act= GATED_SEMPRED
				{
				DebugLocation(258, 9);
				act=(GrammarAST)Match(input,GATED_SEMPRED,Follow._GATED_SEMPRED_in_element1101); if (state.failed) return retval;
				DebugLocation(258, 28);
				if (state.backtracking == 0)
				{
					HandleInlineAction(act);
				}

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// Grammars\\DefineGrammarItemsWalker.g3:259:6: EPSILON
				{
				DebugLocation(259, 6);
				Match(input,EPSILON,Follow._EPSILON_in_element1114); if (state.failed) return retval;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("element", 23);
			LeaveRule("element", 23);
			LeaveRule_element();
		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "element"); }
		return retval;

	}
	// $ANTLR end "element"

	partial void EnterRule_ebnf();
	partial void LeaveRule_ebnf();
	// $ANTLR start "ebnf"
	// Grammars\\DefineGrammarItemsWalker.g3:262:1: ebnf : ( ( dotLoop )=> dotLoop | block | ^( OPTIONAL block ) | ^( CLOSURE block ) | ^( POSITIVE_CLOSURE block ) );
	[GrammarRule("ebnf")]
	private void ebnf()
	{
		EnterRule_ebnf();
		EnterRule("ebnf", 24);
		TraceIn("ebnf", 24);
		try { DebugEnterRule(GrammarFileName, "ebnf");
		DebugLocation(262, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:263:2: ( ( dotLoop )=> dotLoop | block | ^( OPTIONAL block ) | ^( CLOSURE block ) | ^( POSITIVE_CLOSURE block ) )
			int alt38=5;
			try { DebugEnterDecision(38, false);
			switch (input.LA(1))
			{
			case CLOSURE:
				{
				int LA38_2 = input.LA(2);

				if ((LA38_2==DOWN))
				{
					int LA38_3 = input.LA(3);

					if ((LA38_3==BLOCK))
					{
						int LA38_4 = input.LA(4);

						if ((LA38_4==DOWN))
						{
							int LA38_5 = input.LA(5);

							if ((LA38_5==ALT))
							{
								int LA38_6 = input.LA(6);

								if ((LA38_6==DOWN))
								{
									int LA38_7 = input.LA(7);

									if ((LA38_7==WILDCARD))
									{
										int LA38_8 = input.LA(8);

										if ((LA38_8==EOA))
										{
											int LA38_9 = input.LA(9);

											if ((LA38_9==UP))
											{
												int LA38_10 = input.LA(10);

												if ((LA38_10==EOB))
												{
													int LA38_11 = input.LA(11);

													if ((LA38_11==UP))
													{
														int LA38_12 = input.LA(12);

														if ((LA38_12==UP))
														{
															int LA38_13 = input.LA(13);

															if ((EvaluatePredicate(synpred1_DefineGrammarItemsWalker_fragment)))
															{
																alt38 = 1;
															}
															else if ((true))
															{
																alt38 = 4;
															}
															else
															{
																if (state.backtracking>0) {state.failed=true; return;}
																NoViableAltException nvae = new NoViableAltException("", 38, 27, input, 13);
																DebugRecognitionException(nvae);
																throw nvae;
															}
														}
														else
														{
															if (state.backtracking>0) {state.failed=true; return;}
															NoViableAltException nvae = new NoViableAltException("", 38, 25, input, 12);
															DebugRecognitionException(nvae);
															throw nvae;
														}
													}
													else
													{
														if (state.backtracking>0) {state.failed=true; return;}
														NoViableAltException nvae = new NoViableAltException("", 38, 23, input, 11);
														DebugRecognitionException(nvae);
														throw nvae;
													}
												}
												else if ((LA38_10==ALT||LA38_10==REWRITES))
												{
													alt38 = 4;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return;}
													NoViableAltException nvae = new NoViableAltException("", 38, 21, input, 10);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return;}
												NoViableAltException nvae = new NoViableAltException("", 38, 19, input, 9);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}
										else if ((LA38_8==ACTION||(LA38_8>=ASSIGN && LA38_8<=BLOCK)||(LA38_8>=CHAR_LITERAL && LA38_8<=CHAR_RANGE)||LA38_8==CLOSURE||LA38_8==DOT||LA38_8==EPSILON||LA38_8==FORCED_ACTION||LA38_8==GATED_SEMPRED||LA38_8==NOT||LA38_8==OPTIONAL||(LA38_8>=PLUS_ASSIGN && LA38_8<=POSITIVE_CLOSURE)||LA38_8==RANGE||LA38_8==ROOT||LA38_8==RULE_REF||LA38_8==SEMPRED||(LA38_8>=STRING_LITERAL && LA38_8<=SYN_SEMPRED)||LA38_8==TOKEN_REF||LA38_8==TREE_BEGIN||LA38_8==WILDCARD))
										{
											alt38 = 4;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return;}
											NoViableAltException nvae = new NoViableAltException("", 38, 17, input, 8);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}
									else if ((LA38_7==ACTION||(LA38_7>=ASSIGN && LA38_7<=BLOCK)||(LA38_7>=CHAR_LITERAL && LA38_7<=CHAR_RANGE)||LA38_7==CLOSURE||LA38_7==DOT||LA38_7==EPSILON||LA38_7==FORCED_ACTION||LA38_7==GATED_SEMPRED||LA38_7==NOT||LA38_7==OPTIONAL||(LA38_7>=PLUS_ASSIGN && LA38_7<=POSITIVE_CLOSURE)||LA38_7==RANGE||LA38_7==ROOT||LA38_7==RULE_REF||LA38_7==SEMPRED||(LA38_7>=STRING_LITERAL && LA38_7<=SYN_SEMPRED)||LA38_7==TOKEN_REF||LA38_7==TREE_BEGIN))
									{
										alt38 = 4;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return;}
										NoViableAltException nvae = new NoViableAltException("", 38, 15, input, 7);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 38, 11, input, 6);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else if ((LA38_5==AMPERSAND||LA38_5==OPTIONS))
							{
								alt38 = 4;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae = new NoViableAltException("", 38, 9, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 38, 7, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 38, 5, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 38, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case POSITIVE_CLOSURE:
				{
				int LA38_2 = input.LA(2);

				if ((LA38_2==DOWN))
				{
					int LA38_3 = input.LA(3);

					if ((LA38_3==BLOCK))
					{
						int LA38_4 = input.LA(4);

						if ((LA38_4==DOWN))
						{
							int LA38_5 = input.LA(5);

							if ((LA38_5==ALT))
							{
								int LA38_6 = input.LA(6);

								if ((LA38_6==DOWN))
								{
									int LA38_7 = input.LA(7);

									if ((LA38_7==WILDCARD))
									{
										int LA38_8 = input.LA(8);

										if ((LA38_8==EOA))
										{
											int LA38_9 = input.LA(9);

											if ((LA38_9==UP))
											{
												int LA38_10 = input.LA(10);

												if ((LA38_10==EOB))
												{
													int LA38_11 = input.LA(11);

													if ((LA38_11==UP))
													{
														int LA38_12 = input.LA(12);

														if ((LA38_12==UP))
														{
															int LA38_13 = input.LA(13);

															if ((EvaluatePredicate(synpred1_DefineGrammarItemsWalker_fragment)))
															{
																alt38 = 1;
															}
															else if ((true))
															{
																alt38 = 5;
															}
															else
															{
																if (state.backtracking>0) {state.failed=true; return;}
																NoViableAltException nvae = new NoViableAltException("", 38, 28, input, 13);
																DebugRecognitionException(nvae);
																throw nvae;
															}
														}
														else
														{
															if (state.backtracking>0) {state.failed=true; return;}
															NoViableAltException nvae = new NoViableAltException("", 38, 26, input, 12);
															DebugRecognitionException(nvae);
															throw nvae;
														}
													}
													else
													{
														if (state.backtracking>0) {state.failed=true; return;}
														NoViableAltException nvae = new NoViableAltException("", 38, 24, input, 11);
														DebugRecognitionException(nvae);
														throw nvae;
													}
												}
												else if ((LA38_10==ALT||LA38_10==REWRITES))
												{
													alt38 = 5;
												}
												else
												{
													if (state.backtracking>0) {state.failed=true; return;}
													NoViableAltException nvae = new NoViableAltException("", 38, 22, input, 10);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}
											else
											{
												if (state.backtracking>0) {state.failed=true; return;}
												NoViableAltException nvae = new NoViableAltException("", 38, 20, input, 9);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}
										else if ((LA38_8==ACTION||(LA38_8>=ASSIGN && LA38_8<=BLOCK)||(LA38_8>=CHAR_LITERAL && LA38_8<=CHAR_RANGE)||LA38_8==CLOSURE||LA38_8==DOT||LA38_8==EPSILON||LA38_8==FORCED_ACTION||LA38_8==GATED_SEMPRED||LA38_8==NOT||LA38_8==OPTIONAL||(LA38_8>=PLUS_ASSIGN && LA38_8<=POSITIVE_CLOSURE)||LA38_8==RANGE||LA38_8==ROOT||LA38_8==RULE_REF||LA38_8==SEMPRED||(LA38_8>=STRING_LITERAL && LA38_8<=SYN_SEMPRED)||LA38_8==TOKEN_REF||LA38_8==TREE_BEGIN||LA38_8==WILDCARD))
										{
											alt38 = 5;
										}
										else
										{
											if (state.backtracking>0) {state.failed=true; return;}
											NoViableAltException nvae = new NoViableAltException("", 38, 18, input, 8);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}
									else if ((LA38_7==ACTION||(LA38_7>=ASSIGN && LA38_7<=BLOCK)||(LA38_7>=CHAR_LITERAL && LA38_7<=CHAR_RANGE)||LA38_7==CLOSURE||LA38_7==DOT||LA38_7==EPSILON||LA38_7==FORCED_ACTION||LA38_7==GATED_SEMPRED||LA38_7==NOT||LA38_7==OPTIONAL||(LA38_7>=PLUS_ASSIGN && LA38_7<=POSITIVE_CLOSURE)||LA38_7==RANGE||LA38_7==ROOT||LA38_7==RULE_REF||LA38_7==SEMPRED||(LA38_7>=STRING_LITERAL && LA38_7<=SYN_SEMPRED)||LA38_7==TOKEN_REF||LA38_7==TREE_BEGIN))
									{
										alt38 = 5;
									}
									else
									{
										if (state.backtracking>0) {state.failed=true; return;}
										NoViableAltException nvae = new NoViableAltException("", 38, 16, input, 7);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 38, 13, input, 6);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else if ((LA38_5==AMPERSAND||LA38_5==OPTIONS))
							{
								alt38 = 5;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae = new NoViableAltException("", 38, 10, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 38, 8, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 38, 6, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 38, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BLOCK:
				{
				alt38 = 2;
				}
				break;
			case OPTIONAL:
				{
				alt38 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 38, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:263:4: ( dotLoop )=> dotLoop
				{
				DebugLocation(263, 17);
				PushFollow(Follow._dotLoop_in_ebnf1132);
				dotLoop();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\DefineGrammarItemsWalker.g3:264:4: block
				{
				DebugLocation(264, 4);
				PushFollow(Follow._block_in_ebnf1138);
				block();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\DefineGrammarItemsWalker.g3:265:4: ^( OPTIONAL block )
				{
				DebugLocation(265, 4);
				DebugLocation(265, 6);
				Match(input,OPTIONAL,Follow._OPTIONAL_in_ebnf1144); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(265, 15);
				PushFollow(Follow._block_in_ebnf1146);
				block();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Grammars\\DefineGrammarItemsWalker.g3:266:4: ^( CLOSURE block )
				{
				DebugLocation(266, 4);
				DebugLocation(266, 6);
				Match(input,CLOSURE,Follow._CLOSURE_in_ebnf1153); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(266, 14);
				PushFollow(Follow._block_in_ebnf1155);
				block();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Grammars\\DefineGrammarItemsWalker.g3:267:4: ^( POSITIVE_CLOSURE block )
				{
				DebugLocation(267, 4);
				DebugLocation(267, 6);
				Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_ebnf1162); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(267, 23);
				PushFollow(Follow._block_in_ebnf1164);
				block();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ebnf", 24);
			LeaveRule("ebnf", 24);
			LeaveRule_ebnf();
		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "ebnf"); }
		return;

	}
	// $ANTLR end "ebnf"

	partial void EnterRule_dotLoop();
	partial void LeaveRule_dotLoop();
	// $ANTLR start "dotLoop"
	// Grammars\\DefineGrammarItemsWalker.g3:272:1: dotLoop : ( ^( CLOSURE dotBlock ) | ^( POSITIVE_CLOSURE dotBlock ) ) ;
	[GrammarRule("dotLoop")]
	private TreeRuleReturnScope<GrammarAST> dotLoop()
	{
		EnterRule_dotLoop();
		EnterRule("dotLoop", 25);
		TraceIn("dotLoop", 25);
		TreeRuleReturnScope<GrammarAST> retval = new TreeRuleReturnScope<GrammarAST>();
		retval.Start = (GrammarAST)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "dotLoop");
		DebugLocation(272, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:273:2: ( ( ^( CLOSURE dotBlock ) | ^( POSITIVE_CLOSURE dotBlock ) ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:273:4: ( ^( CLOSURE dotBlock ) | ^( POSITIVE_CLOSURE dotBlock ) )
			{
			DebugLocation(273, 4);
			// Grammars\\DefineGrammarItemsWalker.g3:273:4: ( ^( CLOSURE dotBlock ) | ^( POSITIVE_CLOSURE dotBlock ) )
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_1 = input.LA(1);

			if ((LA39_1==CLOSURE))
			{
				alt39 = 1;
			}
			else if ((LA39_1==POSITIVE_CLOSURE))
			{
				alt39 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 39, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:273:6: ^( CLOSURE dotBlock )
				{
				DebugLocation(273, 6);
				DebugLocation(273, 8);
				Match(input,CLOSURE,Follow._CLOSURE_in_dotLoop1181); if (state.failed) return retval;

				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(273, 16);
				PushFollow(Follow._dotBlock_in_dotLoop1183);
				dotBlock();
				PopFollow();
				if (state.failed) return retval;

				Match(input, TokenTypes.Up, null); if (state.failed) return retval;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\DefineGrammarItemsWalker.g3:274:5: ^( POSITIVE_CLOSURE dotBlock )
				{
				DebugLocation(274, 5);
				DebugLocation(274, 7);
				Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_dotLoop1191); if (state.failed) return retval;

				Match(input, TokenTypes.Down, null); if (state.failed) return retval;
				DebugLocation(274, 24);
				PushFollow(Follow._dotBlock_in_dotLoop1193);
				dotBlock();
				PopFollow();
				if (state.failed) return retval;

				Match(input, TokenTypes.Up, null); if (state.failed) return retval;


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(276, 3);
			if (state.backtracking == 0)
			{
				HandleDotLoop(retval.Start);
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dotLoop", 25);
			LeaveRule("dotLoop", 25);
			LeaveRule_dotLoop();
		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "dotLoop"); }
		return retval;

	}
	// $ANTLR end "dotLoop"

	partial void EnterRule_dotBlock();
	partial void LeaveRule_dotBlock();
	// $ANTLR start "dotBlock"
	// Grammars\\DefineGrammarItemsWalker.g3:279:1: dotBlock : ^( BLOCK ^( ALT WILDCARD EOA ) EOB ) ;
	[GrammarRule("dotBlock")]
	private void dotBlock()
	{
		EnterRule_dotBlock();
		EnterRule("dotBlock", 26);
		TraceIn("dotBlock", 26);
		try { DebugEnterRule(GrammarFileName, "dotBlock");
		DebugLocation(279, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:280:2: ( ^( BLOCK ^( ALT WILDCARD EOA ) EOB ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:280:4: ^( BLOCK ^( ALT WILDCARD EOA ) EOB )
			{
			DebugLocation(280, 4);
			DebugLocation(280, 7);
			Match(input,BLOCK,Follow._BLOCK_in_dotBlock1215); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(280, 13);
			DebugLocation(280, 16);
			Match(input,ALT,Follow._ALT_in_dotBlock1219); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(280, 20);
			Match(input,WILDCARD,Follow._WILDCARD_in_dotBlock1221); if (state.failed) return;
			DebugLocation(280, 29);
			Match(input,EOA,Follow._EOA_in_dotBlock1223); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;

			DebugLocation(280, 35);
			Match(input,EOB,Follow._EOB_in_dotBlock1227); if (state.failed) return;

			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dotBlock", 26);
			LeaveRule("dotBlock", 26);
			LeaveRule_dotBlock();
		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "dotBlock"); }
		return;

	}
	// $ANTLR end "dotBlock"

	partial void EnterRule_tree_();
	partial void LeaveRule_tree_();
	// $ANTLR start "tree_"
	// Grammars\\DefineGrammarItemsWalker.g3:283:1: tree_ : ^( TREE_BEGIN ( element )+ ) ;
	[GrammarRule("tree_")]
	private void tree_()
	{
		EnterRule_tree_();
		EnterRule("tree_", 27);
		TraceIn("tree_", 27);
		try { DebugEnterRule(GrammarFileName, "tree_");
		DebugLocation(283, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:284:2: ( ^( TREE_BEGIN ( element )+ ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:284:4: ^( TREE_BEGIN ( element )+ )
			{
			DebugLocation(284, 4);
			DebugLocation(284, 6);
			Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_tree_1241); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(284, 17);
			// Grammars\\DefineGrammarItemsWalker.g3:284:17: ( element )+
			int cnt40=0;
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==ACTION||(LA40_1>=ASSIGN && LA40_1<=BLOCK)||(LA40_1>=CHAR_LITERAL && LA40_1<=CHAR_RANGE)||LA40_1==CLOSURE||LA40_1==DOT||LA40_1==EPSILON||LA40_1==FORCED_ACTION||LA40_1==GATED_SEMPRED||LA40_1==NOT||LA40_1==OPTIONAL||(LA40_1>=PLUS_ASSIGN && LA40_1<=POSITIVE_CLOSURE)||LA40_1==RANGE||LA40_1==ROOT||LA40_1==RULE_REF||LA40_1==SEMPRED||(LA40_1>=STRING_LITERAL && LA40_1<=SYN_SEMPRED)||LA40_1==TOKEN_REF||LA40_1==TREE_BEGIN||LA40_1==WILDCARD))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:284:17: element
					{
					DebugLocation(284, 17);
					PushFollow(Follow._element_in_tree_1243);
					element();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt40 >= 1)
						goto loop40;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee40 = new EarlyExitException( 40, input );
					DebugRecognitionException(eee40);
					throw eee40;
				}
				cnt40++;
			}
			loop40:
				;

			} finally { DebugExitSubRule(40); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tree_", 27);
			LeaveRule("tree_", 27);
			LeaveRule_tree_();
		}
		DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "tree_"); }
		return;

	}
	// $ANTLR end "tree_"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Grammars\\DefineGrammarItemsWalker.g3:287:1: atom[GrammarAST scope_] : ( ^(t= RULE_REF (a= ARG_ACTION )? ) | ^(t= TOKEN_REF (a= ARG_ACTION )? ) |t= CHAR_LITERAL |t= STRING_LITERAL | WILDCARD | ^( DOT ID atom[$ID] ) );
	[GrammarRule("atom")]
	private void atom(GrammarAST scope_)
	{
		EnterRule_atom();
		EnterRule("atom", 28);
		TraceIn("atom", 28);
		GrammarAST t = default(GrammarAST);
		GrammarAST a = default(GrammarAST);
		GrammarAST ID9 = default(GrammarAST);

		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(287, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:288:2: ( ^(t= RULE_REF (a= ARG_ACTION )? ) | ^(t= TOKEN_REF (a= ARG_ACTION )? ) |t= CHAR_LITERAL |t= STRING_LITERAL | WILDCARD | ^( DOT ID atom[$ID] ) )
			int alt43=6;
			try { DebugEnterDecision(43, false);
			switch (input.LA(1))
			{
			case RULE_REF:
				{
				alt43 = 1;
				}
				break;
			case TOKEN_REF:
				{
				alt43 = 2;
				}
				break;
			case CHAR_LITERAL:
				{
				alt43 = 3;
				}
				break;
			case STRING_LITERAL:
				{
				alt43 = 4;
				}
				break;
			case WILDCARD:
				{
				alt43 = 5;
				}
				break;
			case DOT:
				{
				alt43 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:288:4: ^(t= RULE_REF (a= ARG_ACTION )? )
				{
				DebugLocation(288, 4);
				DebugLocation(288, 8);
				t=(GrammarAST)Match(input,RULE_REF,Follow._RULE_REF_in_atom1261); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(288, 18);
					// Grammars\\DefineGrammarItemsWalker.g3:288:18: (a= ARG_ACTION )?
					int alt41=2;
					try { DebugEnterSubRule(41);
					try { DebugEnterDecision(41, false);
					int LA41_1 = input.LA(1);

					if ((LA41_1==ARG_ACTION))
					{
						alt41 = 1;
					}
					} finally { DebugExitDecision(41); }
					switch (alt41)
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\DefineGrammarItemsWalker.g3:288:19: a= ARG_ACTION
						{
						DebugLocation(288, 20);
						a=(GrammarAST)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_atom1266); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(41); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}

				DebugLocation(288, 37);
				if (state.backtracking == 0)
				{
					HandleRuleReferenceAtom(scope_, t, a);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\DefineGrammarItemsWalker.g3:289:4: ^(t= TOKEN_REF (a= ARG_ACTION )? )
				{
				DebugLocation(289, 4);
				DebugLocation(289, 8);
				t=(GrammarAST)Match(input,TOKEN_REF,Follow._TOKEN_REF_in_atom1282); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(289, 19);
					// Grammars\\DefineGrammarItemsWalker.g3:289:19: (a= ARG_ACTION )?
					int alt42=2;
					try { DebugEnterSubRule(42);
					try { DebugEnterDecision(42, false);
					int LA42_1 = input.LA(1);

					if ((LA42_1==ARG_ACTION))
					{
						alt42 = 1;
					}
					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// Grammars\\DefineGrammarItemsWalker.g3:289:20: a= ARG_ACTION
						{
						DebugLocation(289, 21);
						a=(GrammarAST)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_atom1287); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(42); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}

				DebugLocation(289, 38);
				if (state.backtracking == 0)
				{
					HandleTokenReferenceAtom(scope_, t, a);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\DefineGrammarItemsWalker.g3:290:4: t= CHAR_LITERAL
				{
				DebugLocation(290, 5);
				t=(GrammarAST)Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_atom1301); if (state.failed) return;
				DebugLocation(290, 24);
				if (state.backtracking == 0)
				{
					HandleStringLiteralAtom(t);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Grammars\\DefineGrammarItemsWalker.g3:291:4: t= STRING_LITERAL
				{
				DebugLocation(291, 5);
				t=(GrammarAST)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_atom1315); if (state.failed) return;
				DebugLocation(291, 25);
				if (state.backtracking == 0)
				{
					HandleStringLiteralAtom(t);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Grammars\\DefineGrammarItemsWalker.g3:292:4: WILDCARD
				{
				DebugLocation(292, 4);
				Match(input,WILDCARD,Follow._WILDCARD_in_atom1326); if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Grammars\\DefineGrammarItemsWalker.g3:293:4: ^( DOT ID atom[$ID] )
				{
				DebugLocation(293, 4);
				DebugLocation(293, 6);
				Match(input,DOT,Follow._DOT_in_atom1332); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(293, 10);
				ID9=(GrammarAST)Match(input,ID,Follow._ID_in_atom1334); if (state.failed) return;
				DebugLocation(293, 13);
				PushFollow(Follow._atom_in_atom1336);
				atom(ID9);
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("atom", 28);
			LeaveRule("atom", 28);
			LeaveRule_atom();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return;

	}
	// $ANTLR end "atom"

	partial void EnterRule_ast_suffix();
	partial void LeaveRule_ast_suffix();
	// $ANTLR start "ast_suffix"
	// Grammars\\DefineGrammarItemsWalker.g3:296:1: ast_suffix : ( ROOT | BANG );
	[GrammarRule("ast_suffix")]
	private void ast_suffix()
	{
		EnterRule_ast_suffix();
		EnterRule("ast_suffix", 29);
		TraceIn("ast_suffix", 29);
		try { DebugEnterRule(GrammarFileName, "ast_suffix");
		DebugLocation(296, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:297:2: ( ROOT | BANG )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:
			{
			DebugLocation(297, 2);
			if (input.LA(1)==BANG||input.LA(1)==ROOT)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ast_suffix", 29);
			LeaveRule("ast_suffix", 29);
			LeaveRule_ast_suffix();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "ast_suffix"); }
		return;

	}
	// $ANTLR end "ast_suffix"

	partial void EnterRule_rewrite();
	partial void LeaveRule_rewrite();
	// $ANTLR start "rewrite"
	// Grammars\\DefineGrammarItemsWalker.g3:301:1: rewrite : ( ^( REWRITES ( ^( REWRITE (pred= SEMPRED )? rewrite_alternative ) )* ) |);
	[GrammarRule("rewrite")]
	private TreeRuleReturnScope<GrammarAST> rewrite()
	{
		EnterRule_rewrite();
		EnterRule("rewrite", 30);
		TraceIn("rewrite", 30);
		TreeRuleReturnScope<GrammarAST> retval = new TreeRuleReturnScope<GrammarAST>();
		retval.Start = (GrammarAST)input.LT(1);

		GrammarAST pred = default(GrammarAST);


			// track top level REWRITES node, store stuff there
			currentRewriteRule = retval.Start; // has to execute during backtracking
			if ( state.backtracking == 0 )
			{
				if ( grammar.BuildAST )
					currentRewriteRule.rewriteRefsDeep = new HashSet<GrammarAST>(GrammarAST.TreeTokenEqualityComparer.Default);
			}

		try { DebugEnterRule(GrammarFileName, "rewrite");
		DebugLocation(301, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:312:2: ( ^( REWRITES ( ^( REWRITE (pred= SEMPRED )? rewrite_alternative ) )* ) |)
			int alt46=2;
			try { DebugEnterDecision(46, false);
			int LA46_1 = input.LA(1);

			if ((LA46_1==REWRITES))
			{
				alt46 = 1;
			}
			else if ((LA46_1==ALT||LA46_1==EOB))
			{
				alt46 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 46, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:312:4: ^( REWRITES ( ^( REWRITE (pred= SEMPRED )? rewrite_alternative ) )* )
				{
				DebugLocation(312, 4);
				DebugLocation(312, 7);
				Match(input,REWRITES,Follow._REWRITES_in_rewrite1373); if (state.failed) return retval;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return retval;
					DebugLocation(313, 4);
					// Grammars\\DefineGrammarItemsWalker.g3:313:4: ( ^( REWRITE (pred= SEMPRED )? rewrite_alternative ) )*
					try { DebugEnterSubRule(45);
					while (true)
					{
						int alt45=2;
						try { DebugEnterDecision(45, false);
						int LA45_1 = input.LA(1);

						if ((LA45_1==REWRITE))
						{
							alt45 = 1;
						}


						} finally { DebugExitDecision(45); }
						switch ( alt45 )
						{
						case 1:
							DebugEnterAlt(1);
							// Grammars\\DefineGrammarItemsWalker.g3:313:6: ^( REWRITE (pred= SEMPRED )? rewrite_alternative )
							{
							DebugLocation(313, 6);
							DebugLocation(313, 9);
							Match(input,REWRITE,Follow._REWRITE_in_rewrite1382); if (state.failed) return retval;

							Match(input, TokenTypes.Down, null); if (state.failed) return retval;
							DebugLocation(314, 6);
							// Grammars\\DefineGrammarItemsWalker.g3:314:6: (pred= SEMPRED )?
							int alt44=2;
							try { DebugEnterSubRule(44);
							try { DebugEnterDecision(44, false);
							int LA44_1 = input.LA(1);

							if ((LA44_1==SEMPRED))
							{
								alt44 = 1;
							}
							} finally { DebugExitDecision(44); }
							switch (alt44)
							{
							case 1:
								DebugEnterAlt(1);
								// Grammars\\DefineGrammarItemsWalker.g3:314:8: pred= SEMPRED
								{
								DebugLocation(314, 12);
								pred=(GrammarAST)Match(input,SEMPRED,Follow._SEMPRED_in_rewrite1393); if (state.failed) return retval;
								DebugLocation(314, 21);
								if (state.backtracking == 0)
								{
									HandleInlineAction(pred);
								}

								}
								break;

							}
							} finally { DebugExitSubRule(44); }

							DebugLocation(316, 6);
							PushFollow(Follow._rewrite_alternative_in_rewrite1410);
							rewrite_alternative();
							PopFollow();
							if (state.failed) return retval;

							Match(input, TokenTypes.Up, null); if (state.failed) return retval;


							}
							break;

						default:
							goto loop45;
						}
					}

					loop45:
						;

					} finally { DebugExitSubRule(45); }


					Match(input, TokenTypes.Up, null); if (state.failed) return retval;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\DefineGrammarItemsWalker.g3:322:2: 
				{
				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rewrite", 30);
			LeaveRule("rewrite", 30);
			LeaveRule_rewrite();
		}
		DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "rewrite"); }
		return retval;

	}
	// $ANTLR end "rewrite"

	partial void EnterRule_rewrite_block();
	partial void LeaveRule_rewrite_block();
	// $ANTLR start "rewrite_block"
	// Grammars\\DefineGrammarItemsWalker.g3:324:1: rewrite_block : ^( BLOCK rewrite_alternative EOB ) ;
	[GrammarRule("rewrite_block")]
	private TreeRuleReturnScope<GrammarAST> rewrite_block()
	{
		EnterRule_rewrite_block();
		EnterRule("rewrite_block", 31);
		TraceIn("rewrite_block", 31);
		TreeRuleReturnScope<GrammarAST> retval = new TreeRuleReturnScope<GrammarAST>();
		retval.Start = (GrammarAST)input.LT(1);


			GrammarAST enclosingBlock = currentRewriteBlock;
			if ( state.backtracking == 0 )
			{
				// don't do if guessing
				currentRewriteBlock=retval.Start; // pts to BLOCK node
				currentRewriteBlock.rewriteRefsShallow = new HashSet<GrammarAST>(GrammarAST.TreeTokenEqualityComparer.Default);
				currentRewriteBlock.rewriteRefsDeep = new HashSet<GrammarAST>(GrammarAST.TreeTokenEqualityComparer.Default);
			}

		try { DebugEnterRule(GrammarFileName, "rewrite_block");
		DebugLocation(324, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:336:2: ( ^( BLOCK rewrite_alternative EOB ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:336:6: ^( BLOCK rewrite_alternative EOB )
			{
			DebugLocation(336, 6);
			DebugLocation(336, 9);
			Match(input,BLOCK,Follow._BLOCK_in_rewrite_block1452); if (state.failed) return retval;

			Match(input, TokenTypes.Down, null); if (state.failed) return retval;
			DebugLocation(336, 15);
			PushFollow(Follow._rewrite_alternative_in_rewrite_block1454);
			rewrite_alternative();
			PopFollow();
			if (state.failed) return retval;
			DebugLocation(336, 35);
			Match(input,EOB,Follow._EOB_in_rewrite_block1456); if (state.failed) return retval;

			Match(input, TokenTypes.Up, null); if (state.failed) return retval;

			DebugLocation(338, 3);
			if (state.backtracking == 0)
			{

							// copy the element refs in this block to the surrounding block
							if ( enclosingBlock != null )
							{
								foreach ( var item in currentRewriteBlock.rewriteRefsShallow )
									enclosingBlock.rewriteRefsDeep.Add( item );
							}
						
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rewrite_block", 31);
			LeaveRule("rewrite_block", 31);
			LeaveRule_rewrite_block();
			 currentRewriteBlock = enclosingBlock; /* restore old BLOCK ptr */ 
		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "rewrite_block"); }
		return retval;

	}
	// $ANTLR end "rewrite_block"

	partial void EnterRule_rewrite_alternative();
	partial void LeaveRule_rewrite_alternative();
	// $ANTLR start "rewrite_alternative"
	// Grammars\\DefineGrammarItemsWalker.g3:349:1: rewrite_alternative : ({...}? => ^( ALT ( ( rewrite_element )+ | EPSILON ) EOA ) |{...}? => rewrite_template | ETC {...}?);
	[GrammarRule("rewrite_alternative")]
	private void rewrite_alternative()
	{
		EnterRule_rewrite_alternative();
		EnterRule("rewrite_alternative", 32);
		TraceIn("rewrite_alternative", 32);
		try { DebugEnterRule(GrammarFileName, "rewrite_alternative");
		DebugLocation(349, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:350:2: ({...}? => ^( ALT ( ( rewrite_element )+ | EPSILON ) EOA ) |{...}? => rewrite_template | ETC {...}?)
			int alt49=3;
			try { DebugEnterDecision(49, false);
			int LA49_1 = input.LA(1);

			if ((LA49_1==ALT) && (((grammar.BuildAST)||(grammar.BuildTemplate))))
			{
				int LA49_2 = input.LA(2);

				if ((LA49_2==DOWN) && (((grammar.BuildAST)||(grammar.BuildTemplate))))
				{
					int LA49_3 = input.LA(3);

					if ((LA49_3==EPSILON) && (((grammar.BuildTemplate)||(grammar.BuildAST))))
					{
						int LA49_4 = input.LA(4);

						if ((LA49_4==EOA) && (((grammar.BuildTemplate)||(grammar.BuildAST))))
						{
							int LA49_5 = input.LA(5);

							if ((LA49_5==UP) && (((grammar.BuildTemplate)||(grammar.BuildAST))))
							{
								int LA49_6 = input.LA(6);

								if (((grammar.BuildAST)))
								{
									alt49 = 1;
								}
								else if (((grammar.BuildTemplate)))
								{
									alt49 = 2;
								}
								else
								{
									if (state.backtracking>0) {state.failed=true; return;}
									NoViableAltException nvae = new NoViableAltException("", 49, 8, input, 6);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae = new NoViableAltException("", 49, 7, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return;}
							NoViableAltException nvae = new NoViableAltException("", 49, 5, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA49_3==ACTION||LA49_3==CHAR_LITERAL||LA49_3==CLOSURE||LA49_3==LABEL||LA49_3==OPTIONAL||LA49_3==POSITIVE_CLOSURE||LA49_3==RULE_REF||LA49_3==STRING_LITERAL||LA49_3==TOKEN_REF||LA49_3==TREE_BEGIN) && ((grammar.BuildAST)))
					{
						alt49 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 49, 4, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 49, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA49_1==ACTION||LA49_1==TEMPLATE) && ((grammar.BuildTemplate)))
			{
				alt49 = 2;
			}
			else if ((LA49_1==ETC))
			{
				alt49 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 49, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:350:4: {...}? => ^( ALT ( ( rewrite_element )+ | EPSILON ) EOA )
				{
				DebugLocation(350, 4);
				if (!((grammar.BuildAST)))
				{
					if (state.backtracking>0) {state.failed=true; return;}
					throw new FailedPredicateException(input, "rewrite_alternative", "grammar.BuildAST");
				}
				DebugLocation(350, 27);
				DebugLocation(350, 29);
				Match(input,ALT,Follow._ALT_in_rewrite_alternative1485); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(350, 33);
				// Grammars\\DefineGrammarItemsWalker.g3:350:33: ( ( rewrite_element )+ | EPSILON )
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==ACTION||LA48_1==CHAR_LITERAL||LA48_1==CLOSURE||LA48_1==LABEL||LA48_1==OPTIONAL||LA48_1==POSITIVE_CLOSURE||LA48_1==RULE_REF||LA48_1==STRING_LITERAL||LA48_1==TOKEN_REF||LA48_1==TREE_BEGIN))
				{
					alt48 = 1;
				}
				else if ((LA48_1==EPSILON))
				{
					alt48 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:350:34: ( rewrite_element )+
					{
					DebugLocation(350, 34);
					// Grammars\\DefineGrammarItemsWalker.g3:350:34: ( rewrite_element )+
					int cnt47=0;
					try { DebugEnterSubRule(47);
					while (true)
					{
						int alt47=2;
						try { DebugEnterDecision(47, false);
						int LA47_1 = input.LA(1);

						if ((LA47_1==ACTION||LA47_1==CHAR_LITERAL||LA47_1==CLOSURE||LA47_1==LABEL||LA47_1==OPTIONAL||LA47_1==POSITIVE_CLOSURE||LA47_1==RULE_REF||LA47_1==STRING_LITERAL||LA47_1==TOKEN_REF||LA47_1==TREE_BEGIN))
						{
							alt47 = 1;
						}


						} finally { DebugExitDecision(47); }
						switch (alt47)
						{
						case 1:
							DebugEnterAlt(1);
							// Grammars\\DefineGrammarItemsWalker.g3:350:34: rewrite_element
							{
							DebugLocation(350, 34);
							PushFollow(Follow._rewrite_element_in_rewrite_alternative1488);
							rewrite_element();
							PopFollow();
							if (state.failed) return;

							}
							break;

						default:
							if (cnt47 >= 1)
								goto loop47;

							if (state.backtracking>0) {state.failed=true; return;}
							EarlyExitException eee47 = new EarlyExitException( 47, input );
							DebugRecognitionException(eee47);
							throw eee47;
						}
						cnt47++;
					}
					loop47:
						;

					} finally { DebugExitSubRule(47); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Grammars\\DefineGrammarItemsWalker.g3:350:53: EPSILON
					{
					DebugLocation(350, 53);
					Match(input,EPSILON,Follow._EPSILON_in_rewrite_alternative1493); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(350, 62);
				Match(input,EOA,Follow._EOA_in_rewrite_alternative1496); if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\DefineGrammarItemsWalker.g3:351:4: {...}? => rewrite_template
				{
				DebugLocation(351, 4);
				if (!((grammar.BuildTemplate)))
				{
					if (state.backtracking>0) {state.failed=true; return;}
					throw new FailedPredicateException(input, "rewrite_alternative", "grammar.BuildTemplate");
				}
				DebugLocation(351, 32);
				PushFollow(Follow._rewrite_template_in_rewrite_alternative1506);
				rewrite_template();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\DefineGrammarItemsWalker.g3:352:4: ETC {...}?
				{
				DebugLocation(352, 4);
				Match(input,ETC,Follow._ETC_in_rewrite_alternative1511); if (state.failed) return;
				DebugLocation(352, 8);
				if (!((this.blockLevel==1)))
				{
					if (state.backtracking>0) {state.failed=true; return;}
					throw new FailedPredicateException(input, "rewrite_alternative", "this.blockLevel==1");
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rewrite_alternative", 32);
			LeaveRule("rewrite_alternative", 32);
			LeaveRule_rewrite_alternative();
		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "rewrite_alternative"); }
		return;

	}
	// $ANTLR end "rewrite_alternative"

	partial void EnterRule_rewrite_element();
	partial void LeaveRule_rewrite_element();
	// $ANTLR start "rewrite_element"
	// Grammars\\DefineGrammarItemsWalker.g3:355:1: rewrite_element : ( rewrite_atom | rewrite_ebnf | rewrite_tree );
	[GrammarRule("rewrite_element")]
	private void rewrite_element()
	{
		EnterRule_rewrite_element();
		EnterRule("rewrite_element", 33);
		TraceIn("rewrite_element", 33);
		try { DebugEnterRule(GrammarFileName, "rewrite_element");
		DebugLocation(355, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:356:2: ( rewrite_atom | rewrite_ebnf | rewrite_tree )
			int alt50=3;
			try { DebugEnterDecision(50, false);
			switch (input.LA(1))
			{
			case ACTION:
			case CHAR_LITERAL:
			case LABEL:
			case RULE_REF:
			case STRING_LITERAL:
			case TOKEN_REF:
				{
				alt50 = 1;
				}
				break;
			case CLOSURE:
			case OPTIONAL:
			case POSITIVE_CLOSURE:
				{
				alt50 = 2;
				}
				break;
			case TREE_BEGIN:
				{
				alt50 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:356:4: rewrite_atom
				{
				DebugLocation(356, 4);
				PushFollow(Follow._rewrite_atom_in_rewrite_element1525);
				rewrite_atom();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\DefineGrammarItemsWalker.g3:357:4: rewrite_ebnf
				{
				DebugLocation(357, 4);
				PushFollow(Follow._rewrite_ebnf_in_rewrite_element1530);
				rewrite_ebnf();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\DefineGrammarItemsWalker.g3:358:4: rewrite_tree
				{
				DebugLocation(358, 4);
				PushFollow(Follow._rewrite_tree_in_rewrite_element1535);
				rewrite_tree();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rewrite_element", 33);
			LeaveRule("rewrite_element", 33);
			LeaveRule_rewrite_element();
		}
		DebugLocation(359, 1);
		} finally { DebugExitRule(GrammarFileName, "rewrite_element"); }
		return;

	}
	// $ANTLR end "rewrite_element"

	partial void EnterRule_rewrite_ebnf();
	partial void LeaveRule_rewrite_ebnf();
	// $ANTLR start "rewrite_ebnf"
	// Grammars\\DefineGrammarItemsWalker.g3:361:1: rewrite_ebnf : ( ^( OPTIONAL rewrite_block ) | ^( CLOSURE rewrite_block ) | ^( POSITIVE_CLOSURE rewrite_block ) );
	[GrammarRule("rewrite_ebnf")]
	private void rewrite_ebnf()
	{
		EnterRule_rewrite_ebnf();
		EnterRule("rewrite_ebnf", 34);
		TraceIn("rewrite_ebnf", 34);
		try { DebugEnterRule(GrammarFileName, "rewrite_ebnf");
		DebugLocation(361, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:362:2: ( ^( OPTIONAL rewrite_block ) | ^( CLOSURE rewrite_block ) | ^( POSITIVE_CLOSURE rewrite_block ) )
			int alt51=3;
			try { DebugEnterDecision(51, false);
			switch (input.LA(1))
			{
			case OPTIONAL:
				{
				alt51 = 1;
				}
				break;
			case CLOSURE:
				{
				alt51 = 2;
				}
				break;
			case POSITIVE_CLOSURE:
				{
				alt51 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 51, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:362:4: ^( OPTIONAL rewrite_block )
				{
				DebugLocation(362, 4);
				DebugLocation(362, 7);
				Match(input,OPTIONAL,Follow._OPTIONAL_in_rewrite_ebnf1548); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(362, 16);
				PushFollow(Follow._rewrite_block_in_rewrite_ebnf1550);
				rewrite_block();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\DefineGrammarItemsWalker.g3:363:4: ^( CLOSURE rewrite_block )
				{
				DebugLocation(363, 4);
				DebugLocation(363, 7);
				Match(input,CLOSURE,Follow._CLOSURE_in_rewrite_ebnf1559); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(363, 15);
				PushFollow(Follow._rewrite_block_in_rewrite_ebnf1561);
				rewrite_block();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\DefineGrammarItemsWalker.g3:364:4: ^( POSITIVE_CLOSURE rewrite_block )
				{
				DebugLocation(364, 4);
				DebugLocation(364, 7);
				Match(input,POSITIVE_CLOSURE,Follow._POSITIVE_CLOSURE_in_rewrite_ebnf1570); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(364, 24);
				PushFollow(Follow._rewrite_block_in_rewrite_ebnf1572);
				rewrite_block();
				PopFollow();
				if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rewrite_ebnf", 34);
			LeaveRule("rewrite_ebnf", 34);
			LeaveRule_rewrite_ebnf();
		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "rewrite_ebnf"); }
		return;

	}
	// $ANTLR end "rewrite_ebnf"

	partial void EnterRule_rewrite_tree();
	partial void LeaveRule_rewrite_tree();
	// $ANTLR start "rewrite_tree"
	// Grammars\\DefineGrammarItemsWalker.g3:367:1: rewrite_tree : ^( TREE_BEGIN rewrite_atom ( rewrite_element )* ) ;
	[GrammarRule("rewrite_tree")]
	private void rewrite_tree()
	{
		EnterRule_rewrite_tree();
		EnterRule("rewrite_tree", 35);
		TraceIn("rewrite_tree", 35);
		try { DebugEnterRule(GrammarFileName, "rewrite_tree");
		DebugLocation(367, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:368:2: ( ^( TREE_BEGIN rewrite_atom ( rewrite_element )* ) )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:368:6: ^( TREE_BEGIN rewrite_atom ( rewrite_element )* )
			{
			DebugLocation(368, 6);
			DebugLocation(368, 8);
			Match(input,TREE_BEGIN,Follow._TREE_BEGIN_in_rewrite_tree1588); if (state.failed) return;

			Match(input, TokenTypes.Down, null); if (state.failed) return;
			DebugLocation(368, 19);
			PushFollow(Follow._rewrite_atom_in_rewrite_tree1590);
			rewrite_atom();
			PopFollow();
			if (state.failed) return;
			DebugLocation(368, 32);
			// Grammars\\DefineGrammarItemsWalker.g3:368:32: ( rewrite_element )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_1 = input.LA(1);

				if ((LA52_1==ACTION||LA52_1==CHAR_LITERAL||LA52_1==CLOSURE||LA52_1==LABEL||LA52_1==OPTIONAL||LA52_1==POSITIVE_CLOSURE||LA52_1==RULE_REF||LA52_1==STRING_LITERAL||LA52_1==TOKEN_REF||LA52_1==TREE_BEGIN))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:368:32: rewrite_element
					{
					DebugLocation(368, 32);
					PushFollow(Follow._rewrite_element_in_rewrite_tree1592);
					rewrite_element();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }


			Match(input, TokenTypes.Up, null); if (state.failed) return;


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rewrite_tree", 35);
			LeaveRule("rewrite_tree", 35);
			LeaveRule_rewrite_tree();
		}
		DebugLocation(369, 1);
		} finally { DebugExitRule(GrammarFileName, "rewrite_tree"); }
		return;

	}
	// $ANTLR end "rewrite_tree"

	partial void EnterRule_rewrite_atom();
	partial void LeaveRule_rewrite_atom();
	// $ANTLR start "rewrite_atom"
	// Grammars\\DefineGrammarItemsWalker.g3:371:1: rewrite_atom : ( RULE_REF | ( ^( TOKEN_REF ( ARG_ACTION )? ) | CHAR_LITERAL | STRING_LITERAL ) | LABEL | ACTION );
	[GrammarRule("rewrite_atom")]
	private TreeRuleReturnScope<GrammarAST> rewrite_atom()
	{
		EnterRule_rewrite_atom();
		EnterRule("rewrite_atom", 36);
		TraceIn("rewrite_atom", 36);
		TreeRuleReturnScope<GrammarAST> retval = new TreeRuleReturnScope<GrammarAST>();
		retval.Start = (GrammarAST)input.LT(1);

		GrammarAST ARG_ACTION10 = default(GrammarAST);
		GrammarAST ACTION11 = default(GrammarAST);


			if (state.backtracking == 0)
				HandleRewriteAtomStart(retval.Start);

		try { DebugEnterRule(GrammarFileName, "rewrite_atom");
		DebugLocation(371, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:377:2: ( RULE_REF | ( ^( TOKEN_REF ( ARG_ACTION )? ) | CHAR_LITERAL | STRING_LITERAL ) | LABEL | ACTION )
			int alt55=4;
			try { DebugEnterDecision(55, false);
			switch (input.LA(1))
			{
			case RULE_REF:
				{
				alt55 = 1;
				}
				break;
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case TOKEN_REF:
				{
				alt55 = 2;
				}
				break;
			case LABEL:
				{
				alt55 = 3;
				}
				break;
			case ACTION:
				{
				alt55 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:377:4: RULE_REF
				{
				DebugLocation(377, 4);
				Match(input,RULE_REF,Follow._RULE_REF_in_rewrite_atom1610); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\DefineGrammarItemsWalker.g3:378:4: ( ^( TOKEN_REF ( ARG_ACTION )? ) | CHAR_LITERAL | STRING_LITERAL )
				{
				DebugLocation(378, 4);
				// Grammars\\DefineGrammarItemsWalker.g3:378:4: ( ^( TOKEN_REF ( ARG_ACTION )? ) | CHAR_LITERAL | STRING_LITERAL )
				int alt54=3;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				switch (input.LA(1))
				{
				case TOKEN_REF:
					{
					alt54 = 1;
					}
					break;
				case CHAR_LITERAL:
					{
					alt54 = 2;
					}
					break;
				case STRING_LITERAL:
					{
					alt54 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 54, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:378:6: ^( TOKEN_REF ( ARG_ACTION )? )
					{
					DebugLocation(378, 6);
					DebugLocation(378, 9);
					Match(input,TOKEN_REF,Follow._TOKEN_REF_in_rewrite_atom1620); if (state.failed) return retval;

					if (input.LA(1) == TokenTypes.Down)
					{
						Match(input, TokenTypes.Down, null); if (state.failed) return retval;
						DebugLocation(379, 5);
						// Grammars\\DefineGrammarItemsWalker.g3:379:5: ( ARG_ACTION )?
						int alt53=2;
						try { DebugEnterSubRule(53);
						try { DebugEnterDecision(53, false);
						int LA53_1 = input.LA(1);

						if ((LA53_1==ARG_ACTION))
						{
							alt53 = 1;
						}
						} finally { DebugExitDecision(53); }
						switch (alt53)
						{
						case 1:
							DebugEnterAlt(1);
							// Grammars\\DefineGrammarItemsWalker.g3:379:7: ARG_ACTION
							{
							DebugLocation(379, 7);
							ARG_ACTION10=(GrammarAST)Match(input,ARG_ACTION,Follow._ARG_ACTION_in_rewrite_atom1628); if (state.failed) return retval;
							DebugLocation(379, 18);
							if (state.backtracking == 0)
							{
								HandleInlineAction(ARG_ACTION10);
							}

							}
							break;

						}
						} finally { DebugExitSubRule(53); }


						Match(input, TokenTypes.Up, null); if (state.failed) return retval;
					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Grammars\\DefineGrammarItemsWalker.g3:382:5: CHAR_LITERAL
					{
					DebugLocation(382, 5);
					Match(input,CHAR_LITERAL,Follow._CHAR_LITERAL_in_rewrite_atom1648); if (state.failed) return retval;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Grammars\\DefineGrammarItemsWalker.g3:383:5: STRING_LITERAL
					{
					DebugLocation(383, 5);
					Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_rewrite_atom1654); if (state.failed) return retval;

					}
					break;

				}
				} finally { DebugExitSubRule(54); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\DefineGrammarItemsWalker.g3:385:4: LABEL
				{
				DebugLocation(385, 4);
				Match(input,LABEL,Follow._LABEL_in_rewrite_atom1663); if (state.failed) return retval;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Grammars\\DefineGrammarItemsWalker.g3:386:4: ACTION
				{
				DebugLocation(386, 4);
				ACTION11=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_rewrite_atom1668); if (state.failed) return retval;
				DebugLocation(386, 15);
				if (state.backtracking == 0)
				{
					HandleInlineAction(ACTION11);
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rewrite_atom", 36);
			LeaveRule("rewrite_atom", 36);
			LeaveRule_rewrite_atom();
		}
		DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "rewrite_atom"); }
		return retval;

	}
	// $ANTLR end "rewrite_atom"

	partial void EnterRule_rewrite_template();
	partial void LeaveRule_rewrite_template();
	// $ANTLR start "rewrite_template"
	// Grammars\\DefineGrammarItemsWalker.g3:389:1: rewrite_template : ( ^( ALT EPSILON EOA ) | ^( TEMPLATE ( ID |a= ACTION ) ^( ARGLIST ( ^( ARG ID a= ACTION ) )* ) ( DOUBLE_QUOTE_STRING_LITERAL | DOUBLE_ANGLE_STRING_LITERAL )? ) |a= ACTION );
	[GrammarRule("rewrite_template")]
	private void rewrite_template()
	{
		EnterRule_rewrite_template();
		EnterRule("rewrite_template", 37);
		TraceIn("rewrite_template", 37);
		GrammarAST a = default(GrammarAST);

		try { DebugEnterRule(GrammarFileName, "rewrite_template");
		DebugLocation(389, 1);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:390:2: ( ^( ALT EPSILON EOA ) | ^( TEMPLATE ( ID |a= ACTION ) ^( ARGLIST ( ^( ARG ID a= ACTION ) )* ) ( DOUBLE_QUOTE_STRING_LITERAL | DOUBLE_ANGLE_STRING_LITERAL )? ) |a= ACTION )
			int alt59=3;
			try { DebugEnterDecision(59, false);
			switch (input.LA(1))
			{
			case ALT:
				{
				alt59 = 1;
				}
				break;
			case TEMPLATE:
				{
				alt59 = 2;
				}
				break;
			case ACTION:
				{
				alt59 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 59, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// Grammars\\DefineGrammarItemsWalker.g3:390:4: ^( ALT EPSILON EOA )
				{
				DebugLocation(390, 4);
				DebugLocation(390, 7);
				Match(input,ALT,Follow._ALT_in_rewrite_template1687); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(390, 11);
				Match(input,EPSILON,Follow._EPSILON_in_rewrite_template1689); if (state.failed) return;
				DebugLocation(390, 19);
				Match(input,EOA,Follow._EOA_in_rewrite_template1691); if (state.failed) return;

				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Grammars\\DefineGrammarItemsWalker.g3:391:4: ^( TEMPLATE ( ID |a= ACTION ) ^( ARGLIST ( ^( ARG ID a= ACTION ) )* ) ( DOUBLE_QUOTE_STRING_LITERAL | DOUBLE_ANGLE_STRING_LITERAL )? )
				{
				DebugLocation(391, 4);
				DebugLocation(391, 7);
				Match(input,TEMPLATE,Follow._TEMPLATE_in_rewrite_template1700); if (state.failed) return;

				Match(input, TokenTypes.Down, null); if (state.failed) return;
				DebugLocation(392, 4);
				// Grammars\\DefineGrammarItemsWalker.g3:392:4: ( ID |a= ACTION )
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_1 = input.LA(1);

				if ((LA56_1==ID))
				{
					alt56 = 1;
				}
				else if ((LA56_1==ACTION))
				{
					alt56 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:392:6: ID
					{
					DebugLocation(392, 6);
					Match(input,ID,Follow._ID_in_rewrite_template1707); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Grammars\\DefineGrammarItemsWalker.g3:393:6: a= ACTION
					{
					DebugLocation(393, 7);
					a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_rewrite_template1716); if (state.failed) return;
					DebugLocation(393, 18);
					if (state.backtracking == 0)
					{
						HandleInlineAction(a);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(56); }

				DebugLocation(395, 4);
				DebugLocation(395, 7);
				Match(input,ARGLIST,Follow._ARGLIST_in_rewrite_template1733); if (state.failed) return;

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); if (state.failed) return;
					DebugLocation(396, 5);
					// Grammars\\DefineGrammarItemsWalker.g3:396:5: ( ^( ARG ID a= ACTION ) )*
					try { DebugEnterSubRule(57);
					while (true)
					{
						int alt57=2;
						try { DebugEnterDecision(57, false);
						int LA57_1 = input.LA(1);

						if ((LA57_1==ARG))
						{
							alt57 = 1;
						}


						} finally { DebugExitDecision(57); }
						switch ( alt57 )
						{
						case 1:
							DebugEnterAlt(1);
							// Grammars\\DefineGrammarItemsWalker.g3:396:7: ^( ARG ID a= ACTION )
							{
							DebugLocation(396, 7);
							DebugLocation(396, 9);
							Match(input,ARG,Follow._ARG_in_rewrite_template1742); if (state.failed) return;

							Match(input, TokenTypes.Down, null); if (state.failed) return;
							DebugLocation(396, 13);
							Match(input,ID,Follow._ID_in_rewrite_template1744); if (state.failed) return;
							DebugLocation(396, 17);
							a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_rewrite_template1748); if (state.failed) return;

							Match(input, TokenTypes.Up, null); if (state.failed) return;

							DebugLocation(396, 26);
							if (state.backtracking == 0)
							{
								HandleInlineAction(a);
							}

							}
							break;

						default:
							goto loop57;
						}
					}

					loop57:
						;

					} finally { DebugExitSubRule(57); }


					Match(input, TokenTypes.Up, null); if (state.failed) return;
				}

				DebugLocation(399, 4);
				// Grammars\\DefineGrammarItemsWalker.g3:399:4: ( DOUBLE_QUOTE_STRING_LITERAL | DOUBLE_ANGLE_STRING_LITERAL )?
				int alt58=2;
				try { DebugEnterSubRule(58);
				try { DebugEnterDecision(58, false);
				int LA58_1 = input.LA(1);

				if (((LA58_1>=DOUBLE_ANGLE_STRING_LITERAL && LA58_1<=DOUBLE_QUOTE_STRING_LITERAL)))
				{
					alt58 = 1;
				}
				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammars\\DefineGrammarItemsWalker.g3:
					{
					DebugLocation(399, 4);
					if ((input.LA(1)>=DOUBLE_ANGLE_STRING_LITERAL && input.LA(1)<=DOUBLE_QUOTE_STRING_LITERAL))
					{
						input.Consume();
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(58); }


				Match(input, TokenTypes.Up, null); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Grammars\\DefineGrammarItemsWalker.g3:403:4: a= ACTION
				{
				DebugLocation(403, 5);
				a=(GrammarAST)Match(input,ACTION,Follow._ACTION_in_rewrite_template1794); if (state.failed) return;
				DebugLocation(403, 18);
				if (state.backtracking == 0)
				{
					HandleInlineAction(a);
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rewrite_template", 37);
			LeaveRule("rewrite_template", 37);
			LeaveRule_rewrite_template();
		}
		DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "rewrite_template"); }
		return;

	}
	// $ANTLR end "rewrite_template"

	partial void EnterRule_synpred1_DefineGrammarItemsWalker_fragment();
	partial void LeaveRule_synpred1_DefineGrammarItemsWalker_fragment();

	// $ANTLR start synpred1_DefineGrammarItemsWalker
	private void synpred1_DefineGrammarItemsWalker_fragment()
	{
		EnterRule_synpred1_DefineGrammarItemsWalker_fragment();
		EnterRule("synpred1_DefineGrammarItemsWalker_fragment", 38);
		TraceIn("synpred1_DefineGrammarItemsWalker_fragment", 38);
		try
		{
			// Grammars\\DefineGrammarItemsWalker.g3:263:4: ( dotLoop )
			DebugEnterAlt(1);
			// Grammars\\DefineGrammarItemsWalker.g3:263:5: dotLoop
			{
			DebugLocation(263, 5);
			PushFollow(Follow._dotLoop_in_synpred1_DefineGrammarItemsWalker1127);
			dotLoop();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_DefineGrammarItemsWalker_fragment", 38);
			LeaveRule("synpred1_DefineGrammarItemsWalker_fragment", 38);
			LeaveRule_synpred1_DefineGrammarItemsWalker_fragment();
		}
	}
	// $ANTLR end synpred1_DefineGrammarItemsWalker
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _LEXER_GRAMMAR_in_grammar_76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _grammarSpec_in_grammar_79 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PARSER_GRAMMAR_in_grammar_86 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _grammarSpec_in_grammar_88 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TREE_GRAMMAR_in_grammar_95 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _grammarSpec_in_grammar_98 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _COMBINED_GRAMMAR_in_grammar_105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _grammarSpec_in_grammar_107 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SCOPE_in_attrScope131 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_attrScope135 = new BitSet(new ulong[]{0x210UL});
		public static readonly BitSet _attrScopeAction_in_attrScope137 = new BitSet(new ulong[]{0x210UL});
		public static readonly BitSet _ACTION_in_attrScope142 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AMPERSAND_in_attrScopeAction160 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_attrScopeAction162 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ACTION_in_attrScopeAction164 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_grammarSpec180 = new BitSet(new ulong[]{0x400200008000200UL,0x20028002UL});
		public static readonly BitSet _DOC_COMMENT_in_grammarSpec184 = new BitSet(new ulong[]{0x400200000000200UL,0x20028002UL});
		public static readonly BitSet _optionsSpec_in_grammarSpec189 = new BitSet(new ulong[]{0x200000000200UL,0x20028002UL});
		public static readonly BitSet _delegateGrammars_in_grammarSpec194 = new BitSet(new ulong[]{0x200UL,0x20028002UL});
		public static readonly BitSet _tokensSpec_in_grammarSpec199 = new BitSet(new ulong[]{0x200UL,0x28002UL});
		public static readonly BitSet _attrScope_in_grammarSpec204 = new BitSet(new ulong[]{0x200UL,0x28002UL});
		public static readonly BitSet _actions_in_grammarSpec209 = new BitSet(new ulong[]{0x0UL,0x8002UL});
		public static readonly BitSet _rules_in_grammarSpec214 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _action_in_actions225 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _AMPERSAND_in_action245 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_action249 = new BitSet(new ulong[]{0x80000000010UL});
		public static readonly BitSet _ID_in_action258 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ACTION_in_action262 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ACTION_in_action278 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OPTIONS_in_optionsSpec312 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IMPORT_in_delegateGrammars329 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ASSIGN_in_delegateGrammars334 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_delegateGrammars336 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_delegateGrammars338 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ID_in_delegateGrammars343 = new BitSet(new ulong[]{0x80000002008UL});
		public static readonly BitSet _TOKENS_in_tokensSpec360 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _tokenSpec_in_tokensSpec362 = new BitSet(new ulong[]{0x2008UL,0x40000000UL});
		public static readonly BitSet _TOKEN_REF_in_tokenSpec375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSIGN_in_tokenSpec382 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _TOKEN_REF_in_tokenSpec387 = new BitSet(new ulong[]{0x40000UL,0x1000000UL});
		public static readonly BitSet _set_in_tokenSpec392 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _rule_in_rules423 = new BitSet(new ulong[]{0x2UL,0x8002UL});
		public static readonly BitSet _PREC_RULE_in_rules428 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _RULE_in_rule452 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_rule456 = new BitSet(new ulong[]{0x10000000400UL,0x1CUL});
		public static readonly BitSet _modifier_in_rule463 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ARG_in_rule471 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARG_ACTION_in_rule476 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _RET_in_rule487 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARG_ACTION_in_rule492 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _throwsSpec_in_rule501 = new BitSet(new ulong[]{0x400000000010200UL,0x20000UL});
		public static readonly BitSet _optionsSpec_in_rule507 = new BitSet(new ulong[]{0x10200UL,0x20000UL});
		public static readonly BitSet _ruleScopeSpec_in_rule518 = new BitSet(new ulong[]{0x10200UL});
		public static readonly BitSet _ruleAction_in_rule525 = new BitSet(new ulong[]{0x10200UL});
		public static readonly BitSet _block_in_rule539 = new BitSet(new ulong[]{0x4400020000UL});
		public static readonly BitSet _exceptionGroup_in_rule544 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _EOR_in_rule550 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AMPERSAND_in_ruleAction577 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_ruleAction581 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ACTION_in_ruleAction585 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _THROWS_in_throwsSpec639 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_throwsSpec642 = new BitSet(new ulong[]{0x80000000008UL});
		public static readonly BitSet _SCOPE_in_ruleScopeSpec672 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attrScopeAction_in_ruleScopeSpec679 = new BitSet(new ulong[]{0x210UL});
		public static readonly BitSet _ACTION_in_ruleScopeSpec684 = new BitSet(new ulong[]{0x80000000008UL});
		public static readonly BitSet _ID_in_ruleScopeSpec701 = new BitSet(new ulong[]{0x80000000008UL});
		public static readonly BitSet _BLOCK_in_block737 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _optionsSpec_in_block743 = new BitSet(new ulong[]{0x300UL});
		public static readonly BitSet _blockAction_in_block751 = new BitSet(new ulong[]{0x300UL});
		public static readonly BitSet _alternative_in_block760 = new BitSet(new ulong[]{0x200000100UL,0x1000UL});
		public static readonly BitSet _rewrite_in_block762 = new BitSet(new ulong[]{0x200000100UL});
		public static readonly BitSet _EOB_in_block779 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AMPERSAND_in_blockAction801 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_blockAction803 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ACTION_in_blockAction805 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ALT_in_alternative818 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _element_in_alternative820 = new BitSet(new ulong[]{0x82800289202DE010UL,0x547092041UL});
		public static readonly BitSet _EOA_in_alternative823 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _exceptionHandler_in_exceptionGroup835 = new BitSet(new ulong[]{0x4000020002UL});
		public static readonly BitSet _finallyClause_in_exceptionGroup838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _finallyClause_in_exceptionGroup844 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CATCH_in_exceptionHandler858 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARG_ACTION_in_exceptionHandler860 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ACTION_in_exceptionHandler862 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _FINALLY_in_finallyClause880 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ACTION_in_finallyClause882 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ROOT_in_element899 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _element_in_element901 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BANG_in_element910 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _element_in_element912 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _atom_in_element920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_element929 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _element_in_element931 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _RANGE_in_element940 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _atom_in_element942 = new BitSet(new ulong[]{0x20040000UL,0x441010000UL});
		public static readonly BitSet _atom_in_element945 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CHAR_RANGE_in_element955 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _atom_in_element957 = new BitSet(new ulong[]{0x20040000UL,0x441010000UL});
		public static readonly BitSet _atom_in_element960 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ASSIGN_in_element968 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_element972 = new BitSet(new ulong[]{0x82800288202DE010UL,0x547092041UL});
		public static readonly BitSet _element_in_element976 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PLUS_ASSIGN_in_element987 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_element991 = new BitSet(new ulong[]{0x82800288202DE010UL,0x547092041UL});
		public static readonly BitSet _element_in_element995 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ebnf_in_element1006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tree__in_element1013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNPRED_in_element1021 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_element1023 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ACTION_in_element1033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FORCED_ACTION_in_element1050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMPRED_in_element1065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYN_SEMPRED_in_element1080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BACKTRACK_SEMPRED_in_element1088 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _GATED_SEMPRED_in_element1101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EPSILON_in_element1114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dotLoop_in_ebnf1132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_ebnf1138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPTIONAL_in_ebnf1144 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_ebnf1146 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLOSURE_in_ebnf1153 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_ebnf1155 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _POSITIVE_CLOSURE_in_ebnf1162 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _block_in_ebnf1164 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLOSURE_in_dotLoop1181 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _dotBlock_in_dotLoop1183 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _POSITIVE_CLOSURE_in_dotLoop1191 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _dotBlock_in_dotLoop1193 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BLOCK_in_dotBlock1215 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ALT_in_dotBlock1219 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _WILDCARD_in_dotBlock1221 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _EOA_in_dotBlock1223 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EOB_in_dotBlock1227 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TREE_BEGIN_in_tree_1241 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _element_in_tree_1243 = new BitSet(new ulong[]{0x82800288202DE018UL,0x547092041UL});
		public static readonly BitSet _RULE_REF_in_atom1261 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARG_ACTION_in_atom1266 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TOKEN_REF_in_atom1282 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARG_ACTION_in_atom1287 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CHAR_LITERAL_in_atom1301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_atom1315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WILDCARD_in_atom1326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_atom1332 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_atom1334 = new BitSet(new ulong[]{0x20040000UL,0x441010000UL});
		public static readonly BitSet _atom_in_atom1336 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _REWRITES_in_rewrite1373 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _REWRITE_in_rewrite1382 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SEMPRED_in_rewrite1393 = new BitSet(new ulong[]{0x2000000110UL,0x8000000UL});
		public static readonly BitSet _rewrite_alternative_in_rewrite1410 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BLOCK_in_rewrite_block1452 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _rewrite_alternative_in_rewrite_block1454 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EOB_in_rewrite_block1456 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ALT_in_rewrite_alternative1485 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _rewrite_element_in_rewrite_alternative1488 = new BitSet(new ulong[]{0x201000100240010UL,0x141010001UL});
		public static readonly BitSet _EPSILON_in_rewrite_alternative1493 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _EOA_in_rewrite_alternative1496 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _rewrite_template_in_rewrite_alternative1506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ETC_in_rewrite_alternative1511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rewrite_atom_in_rewrite_element1525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rewrite_ebnf_in_rewrite_element1530 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rewrite_tree_in_rewrite_element1535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPTIONAL_in_rewrite_ebnf1548 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _rewrite_block_in_rewrite_ebnf1550 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CLOSURE_in_rewrite_ebnf1559 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _rewrite_block_in_rewrite_ebnf1561 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _POSITIVE_CLOSURE_in_rewrite_ebnf1570 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _rewrite_block_in_rewrite_ebnf1572 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TREE_BEGIN_in_rewrite_tree1588 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _rewrite_atom_in_rewrite_tree1590 = new BitSet(new ulong[]{0x201000000240018UL,0x141010001UL});
		public static readonly BitSet _rewrite_element_in_rewrite_tree1592 = new BitSet(new ulong[]{0x201000000240018UL,0x141010001UL});
		public static readonly BitSet _RULE_REF_in_rewrite_atom1610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_REF_in_rewrite_atom1620 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARG_ACTION_in_rewrite_atom1628 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CHAR_LITERAL_in_rewrite_atom1648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_rewrite_atom1654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LABEL_in_rewrite_atom1663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ACTION_in_rewrite_atom1668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALT_in_rewrite_template1687 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _EPSILON_in_rewrite_template1689 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _EOA_in_rewrite_template1691 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TEMPLATE_in_rewrite_template1700 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_rewrite_template1707 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ACTION_in_rewrite_template1716 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ARGLIST_in_rewrite_template1733 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ARG_in_rewrite_template1742 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ID_in_rewrite_template1744 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _ACTION_in_rewrite_template1748 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ACTION_in_rewrite_template1794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dotLoop_in_synpred1_DefineGrammarItemsWalker1127 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace Antlr3.Grammars
