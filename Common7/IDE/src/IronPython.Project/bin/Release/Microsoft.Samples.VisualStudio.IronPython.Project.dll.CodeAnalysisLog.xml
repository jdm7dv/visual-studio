<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 10.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="10.0">
 <Targets>
  <Target Name="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\bin\Release\Microsoft.Samples.VisualStudio.IronPython.Project.dll">
   <Modules>
    <Module Name="microsoft.samples.visualstudio.ironpython.project.dll">
     <Namespaces>
      <Namespace Name="Microsoft.Samples.VisualStudio.CodeDomCodeModel">
       <Types>
        <Type Name="CodeDomCodeAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Children" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Children()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeAttribute.cs" Line="93">'CodeDomCodeAttribute.Children.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#EndPoint" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_EndPoint()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeAttribute.cs" Line="28">'CodeDomCodeAttribute.EndPoint.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#StartPoint" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_StartPoint()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeAttribute.cs" Line="32">'CodeDomCodeAttribute.StartPoint.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CodeDomCodeDelegate" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BaseClass" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_BaseClass()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeDelegate.cs" Line="60">'CodeDomCodeDelegate.BaseClass.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CodeDomCodeFunction" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FunctionKind" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_FunctionKind()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeFunction.cs" Line="188">'CodeDomCodeFunction.FunctionKind.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#IsOverloaded" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_IsOverloaded()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeFunction.cs" Line="192">'CodeDomCodeFunction.IsOverloaded.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Overloads" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Overloads()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeFunction.cs" Line="196">'CodeDomCodeFunction.Overloads.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CodeDomCodeParameter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Children" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Children()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeParameter.cs" Line="83">'CodeDomCodeParameter.Children.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#DocComment" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_DocComment()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeParameter.cs" Line="56">'CodeDomCodeParameter.DocComment.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CodeDomCodeProperty" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Children" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Children()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeProperty.cs" Line="170">'CodeDomCodeProperty.Children.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CodeDomCodeType`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DerivedTypes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_DerivedTypes()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeType.cs" Line="75">'CodeDomCodeType&lt;CodeTypeType&gt;.DerivedTypes.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CodeDomCodeTypeRef" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CodeType" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_CodeType()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeTypeRef.cs" Line="59">'CodeDomCodeTypeRef.CodeType.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ElementType" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_ElementType()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeTypeRef.cs" Line="73">'CodeDomCodeTypeRef.ElementType.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Parent" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Parent()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeTypeRef.cs" Line="82">'CodeDomCodeTypeRef.Parent.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#TypeKind" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_TypeKind()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeTypeRef.cs" Line="98">'CodeDomCodeTypeRef.TypeKind.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CodeDomCodeVariable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Children" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Children()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="CodeDomCodeVariable.cs" Line="34">'CodeDomCodeVariable.Children.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CodeDomTextPoint" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AbsoluteCharOffset" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_AbsoluteCharOffset()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="TextPoint.cs" Line="18">'CodeDomTextPoint.AbsoluteCharOffset.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#AtEndOfDocument" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_AtEndOfDocument()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="TextPoint.cs" Line="22">'CodeDomTextPoint.AtEndOfDocument.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#AtEndOfLine" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_AtEndOfLine()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="TextPoint.cs" Line="26">'CodeDomTextPoint.AtEndOfLine.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#LineLength" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_LineLength()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="TextPoint.cs" Line="80">'CodeDomTextPoint.LineLength.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="PythonProjectCodeModel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CodeElements" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_CodeElements()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\FileCodeModel" File="PythonCodeModel.cs" Line="57">'PythonProjectCodeModel.CodeElements.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Microsoft.Samples.VisualStudio.IronPython.Project">
       <Types>
        <Type Name="EditorFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'EditorFactory' because it creates members of the following IDisposable types: 'ServiceProvider'. If 'EditorFactory' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="GeneralPropertyPage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EnvDTE80.IInternalExtenderProvider.CanExtend(System.String,System.String,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project" File="PropertyPages.cs" Line="259">Make 'GeneralPropertyPage' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IInternalExtenderProvider.CanExtend(string, string, object)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnvDTE80.IInternalExtenderProvider.GetExtender(System.String,System.String,System.Object,EnvDTE.IExtenderSite,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project" File="PropertyPages.cs" Line="267">Make 'GeneralPropertyPage' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IInternalExtenderProvider.GetExtender(string, string, object, IExtenderSite, int)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnvDTE80.IInternalExtenderProvider.GetExtenderNames(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project" File="PropertyPages.cs" Line="275">Make 'GeneralPropertyPage' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IInternalExtenderProvider.GetExtenderNames(string, object)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExtenderCATID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_ExtenderCATID()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project" File="PropertyPages.cs" Line="292">'GeneralPropertyPage.ExtenderCATID.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="OAIronPythonFileItem" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability" CheckId="CA1405" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="DependsOnFix">
           <Issue Certainty="90" Level="Error">'OAIronPythonFileItem' is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: 'OAProjectItem&lt;FileNode&gt;'</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#FileCodeModel" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_FileCodeModel()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="DependsOnFix">
               <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project" File="Automation.cs" Line="44">In method 'OAIronPythonFileItem.FileCodeModel.get()', call System.IDisposable.Dispose on object 'sp' before all references to it are out of scope.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="PythonFileNode" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project" File="PythonFileNode.cs" Line="88">In method 'PythonFileNode.PythonFileNode(ProjectNode, ProjectElement)', call System.IDisposable.Dispose on object 'new ServiceProvider((IServiceProvider)root.GetService(Type.GetTypeFromHandle(...)))' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PythonProjectFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateProject()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project" File="PythonProjectFactory.cs" Line="32">In method 'PythonProjectFactory.CreateProject()', object 'project' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'project' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PythonProjectNode" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(Microsoft.Samples.VisualStudio.IronPython.Project.PythonProjectPackage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project" File="PythonProjectNode.cs" Line="32">'PythonProjectNode.PythonProjectNode(PythonProjectPackage)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;PythonProjectNode..ctor(PythonProjectPackage)&#xD;&#xA;ProjectNode.set_CanFileNodesHaveChilds(Boolean):Void&#xD;&#xA;HierarchyNode.get_OleServiceProvider():OleServiceProvider&#xD;&#xA;ProjectNode.set_SupportsProjectDesigner(Boolean):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CodeDomProvider" Kind="Property" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_CodeDomProvider()" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
             <Messages>
              <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="DependsOnFix">
               <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project" File="PythonProjectNode.cs" Line="75">In method 'PythonProjectNode.CodeDomProvider.get()', call System.IDisposable.Dispose on object 'this.codeDomProvider' before all references to it are out of scope.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CreateFileNode(Microsoft.VisualStudio.Project.ProjectElement)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project" File="PythonProjectNode.cs" Line="399">In method 'PythonProjectNode.CreateFileNode(ProjectElement)', object 'newNode' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'newNode' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PythonProjectPackage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'PythonProjectPackage' because it creates members of the following IDisposable types: 'PythonLibraryManager'. If 'PythonProjectPackage' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ProductUserContext" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_ProductUserContext()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project" File="PythonProjectPackage.cs" Line="207">'PythonProjectPackage.ProductUserContext.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="VSMDPythonProvider" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="provider" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project" File="VSMDPythonProvider.cs" Line="73">'VSMDPythonProvider' contains field 'VSMDPythonProvider.provider' that is of IDisposable type: 'PythonProvider'. Change the Dispose method on 'VSMDPythonProvider' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Microsoft.Samples.VisualStudio.IronPython.Project.Library">
       <Types>
        <Type Name="PythonLibraryManager" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#OnBeforeDocumentWindowShow(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\Library" File="PythonLibraryManager.cs" Line="464">In method 'PythonLibraryManager.OnBeforeDocumentWindowShow(uint, int, IVsWindowFrame)', object 'listener' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'listener' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RegisterHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\Library" File="PythonLibraryManager.cs" Line="191">In method 'PythonLibraryManager.RegisterHierarchy(IVsHierarchy)', object 'listener' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'listener' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Microsoft.Samples.VisualStudio.IronPython.Project.WPFProviders">
       <Types>
        <Type Name="PythonEventBindingProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CodeProviderLanguage" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_CodeProviderLanguage()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\WPFProviders" File="PythonEventBindingProvider.cs" Line="286">'PythonEventBindingProvider.CodeProviderLanguage.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetDocDataAdapterForPyFile()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\WPFProviders" File="PythonEventBindingProvider.cs" Line="264">In method 'PythonEventBindingProvider.GetDocDataAdapterForPyFile()', call System.IDisposable.Dispose on object 'data' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\IronPython\src\IronPython.Project\WPFProviders" File="PythonEventBindingProvider.cs" Line="263">In method 'PythonEventBindingProvider.GetDocDataAdapterForPyFile()', call System.IDisposable.Dispose on object 'new ServiceProvider(this.pyFile.OleServiceProvider, true)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PythonWPFFlavor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability" CheckId="CA1405" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="DependsOnFix">
           <Issue Certainty="90" Level="Error">'PythonWPFFlavor' is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: 'FlavoredProjectBase'</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Microsoft.VisualStudio.Project">
       <Types>
        <Type Name="IDEBuildLogger" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="NonBreaking">
           <Issue Name="NonBreaking" Certainty="95" Level="CriticalError">Implement IDisposable on 'IDEBuildLogger' because it creates members of the following IDisposable types: 'ServiceProvider'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,Microsoft.VisualStudio.Shell.TaskProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\MPFProj" File="IDEBuildLogger.cs" Line="137">In method 'IDEBuildLogger.IDEBuildLogger(IVsOutputWindowPane, TaskProvider, IVsHierarchy)', call System.IDisposable.Dispose on object 'this.serviceProvider' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ImageHandler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetIconHandle(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\MPFProj" File="ImageHandler.cs" Line="134">'ImageHandler.GetIconHandle(int)' calls into 'Bitmap.GetHicon()' which has a LinkDemand. By making this call, 'Bitmap.GetHicon()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'ImageHandler.GetIconHandle(int)'&#xD;&#xA;   -&gt;'ImageHandler.GetIconHandle(int)'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ProjectNode" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\MPFProj" File="ProjectNode.cs" Line="1459">'ProjectNode.ExecCommandOnNode(Guid, uint, uint, IntPtr, IntPtr)' calls into 'Process.Start(string, string)' which has a LinkDemand. By making this call, 'Process.Start(string, string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'ProjectNode.ExecCommandOnNode(Guid, uint, uint, IntPtr, IntPtr)'&#xD;&#xA;   -&gt;'ProjectNode.ExecCommandOnNode(Guid, uint, uint, IntPtr, IntPtr)'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetOutputAssembly(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\MPFProj" File="ProjectNode.cs" Line="3969">'ProjectNode.GetOutputAssembly(string)' calls into 'CompilerParameters.OutputAssembly.get()' which has a LinkDemand. By making this call, 'CompilerParameters.OutputAssembly.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'ProjectNode.GetOutputAssembly(string)'&#xD;&#xA;   -&gt;'ProjectNode.GetOutputAssembly(string)'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetProjectOptions(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\MPFProj" File="ProjectNode.cs" Line="2126">'ProjectNode.GetProjectOptions(string)' calls into 'CompilerParameters.GenerateExecutable.set(bool)' which has a LinkDemand. By making this call, 'CompilerParameters.GenerateExecutable.set(bool)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'ProjectNode.GetProjectOptions(string)'&#xD;&#xA;   -&gt;'ProjectNode.GetProjectOptions(string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\MPFProj" File="ProjectNode.cs" Line="2126">'ProjectNode.GetProjectOptions(string)' calls into 'CompilerParameters.IncludeDebugInformation.set(bool)' which has a LinkDemand. By making this call, 'CompilerParameters.IncludeDebugInformation.set(bool)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'ProjectNode.GetProjectOptions(string)'&#xD;&#xA;   -&gt;'ProjectNode.GetProjectOptions(string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\MPFProj" File="ProjectNode.cs" Line="2126">'ProjectNode.GetProjectOptions(string)' calls into 'CompilerParameters.MainClass.set(string)' which has a LinkDemand. By making this call, 'CompilerParameters.MainClass.set(string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'ProjectNode.GetProjectOptions(string)'&#xD;&#xA;   -&gt;'ProjectNode.GetProjectOptions(string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\MPFProj" File="ProjectNode.cs" Line="2126">'ProjectNode.GetProjectOptions(string)' calls into 'CompilerParameters.OutputAssembly.set(string)' which has a LinkDemand. By making this call, 'CompilerParameters.OutputAssembly.set(string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'ProjectNode.GetProjectOptions(string)'&#xD;&#xA;   -&gt;'ProjectNode.GetProjectOptions(string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\MPFProj" File="ProjectNode.cs" Line="2126">'ProjectNode.GetProjectOptions(string)' calls into 'CompilerParameters.TreatWarningsAsErrors.set(bool)' which has a LinkDemand. By making this call, 'CompilerParameters.TreatWarningsAsErrors.set(bool)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'ProjectNode.GetProjectOptions(string)'&#xD;&#xA;   -&gt;'ProjectNode.GetProjectOptions(string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\MPFProj" File="ProjectNode.cs" Line="2126">'ProjectNode.GetProjectOptions(string)' calls into 'CompilerParameters.WarningLevel.set(int)' which has a LinkDemand. By making this call, 'CompilerParameters.WarningLevel.set(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'ProjectNode.GetProjectOptions(string)'&#xD;&#xA;   -&gt;'ProjectNode.GetProjectOptions(string)'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PrepareBuild(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\MPFProj" File="ProjectNode.cs" Line="2003">'ProjectNode.PrepareBuild(string, bool)' calls into 'CompilerParameters.OutputAssembly.get()' which has a LinkDemand. By making this call, 'CompilerParameters.OutputAssembly.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'ProjectNode.PrepareBuild(string, bool)'&#xD;&#xA;   -&gt;'ProjectNode.PrepareBuild(string, bool)'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ProjectOptions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\MPFProj" File="ProjectOptions.cs" Line="84">'ProjectOptions.ProjectOptions()' calls into 'CompilerParameters.CompilerParameters()' which has a LinkDemand. By making this call, 'CompilerParameters.CompilerParameters()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'ProjectOptions.ProjectOptions()'&#xD;&#xA;   -&gt;'ProjectOptions.ProjectOptions()'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Utilities" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetImageList(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2013-05-27 23:26:41Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\Jonathan_Moore\Documents\Visual Studio 2016\MPFProj" File="Utilities.cs" Line="349">'Utilities.GetImageList(object)' calls into 'Graphics.GetHdc()' which has a LinkDemand. By making this call, 'Graphics.GetHdc()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'Utilities.GetImageList(object)'&#xD;&#xA;   -&gt;'Utilities.GetImageList(object)'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="ComVisibleTypeBaseTypesShouldBeComVisible" Category="Microsoft.Interoperability" CheckId="CA1405">
   <Name>COM visible type base types should be COM visible</Name>
   <Description>COM visible types should have an object hierarchy that is uniformly COM visible.</Description>
   <Resolution Name="Default">{0} is marked ComVisible(true) but has the following ComVisible(false) types in its object hierarchy: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182202(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213">
   <Name>Disposable fields should be disposed</Name>
   <Description>If a type that implements IDisposable owns fields that also implement IDisposable, the encapsulating type's Dispose() implementation should call Dispose() on each disposable field.</Description>
   <Resolution Name="Default">{0} contains field {1} that is of IDisposable type: {2}. Change the Dispose method on {0} to call Dispose or Close on this field.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182328(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="ExceptionEdge">In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>Do not indirectly expose methods with link demands</Name>
   <Description>Do not wrap a method protected by a LinkDemand with a method that does not perform a security check. A LinkDemand checks the permissions of the immediate caller rather than checking the permissions of all callers in the call stack. In this case, the permissions of the wrapper method will be checked. If the wrapper method does not, itself, check the permissions of callers higher in the call stack, malicious code might be able to execute the wrapped function even though it lacks permission to do so.</Description>
   <Resolution Name="Default">{0} calls into {1} which has a LinkDemand. By making this call, {1} is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: {2}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182303(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065">
   <Name>Do not raise exceptions in unexpected locations</Name>
   <Description>Do not explicitly raise exceptions from unexpected locations. There are some methods, such as Equals and GetHashCode, which users do not expect to raise exceptions. Therefore calls to these methods are not commonly wrapped in try catch blocks.</Description>
   <Resolution Name="PropertyGetter">{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386039(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error, Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033">
   <Name>Interface methods should be callable by child types</Name>
   <Description>Explicit method implementations are defined with private accessibility. Classes that derive from classes with explicit method implementations and choose to re-declare them on the class will not be able to call into the base class implementation unless the base class has provided an alternate method with appropriate accessibility. When overriding a base class method that has been hidden by explicit interface implementation, in order to call into the base class implementation, a derived class must cast the base pointer to the relevant interface. When calling through this reference, however, the derived class implementation will actually be invoked, resulting in recursion and an eventual stack overflow.</Description>
   <Resolution Name="Default">Make {0} sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of {1} and is visible to derived classes.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182153(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Resolution Name="NonBreaking">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
 <Exceptions>
  <Exception Keyword="CA0060" Kind="Engine" TreatAsWarning="True">
   <Type>Microsoft.FxCop.Sdk.FxCopException</Type>
   <ExceptionMessage>The indirectly-referenced assembly 'EnvDTE, Version=7.0.3300.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' could not be found. This assembly is not required for analysis, however, analysis results could be incomplete. This assembly was referenced by: C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\PublicAssemblies\VSLangProj.dll.</ExceptionMessage>
  </Exception>
 </Exceptions>
</FxCopReport>
