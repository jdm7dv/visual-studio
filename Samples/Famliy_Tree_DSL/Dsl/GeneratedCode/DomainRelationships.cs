//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Fabrikam.Dsl.TestValidation
{
	/// <summary>
	/// DomainRelationship FamilyHasPeople
	/// Description for Fabrikam.Dsl.TestValidation.FamilyHasPeople
	/// </summary>
	[DslDesign::DisplayNameResource("Fabrikam.Dsl.TestValidation.FamilyHasPeople.DisplayName", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Fabrikam.Dsl.TestValidation.FamilyHasPeople.Description", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("bf46514c-56b0-4e38-9ae5-ed7cb351470e")]
	public partial class FamilyHasPeople : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FamilyHasPeople domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbf46514c, 0x56b0, 0x4e38, 0x9a, 0xe5, 0xed, 0x7c, 0xb3, 0x51, 0x47, 0x0e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FamilyHasPeople link in the same Partition as the given Family
		/// </summary>
		/// <param name="source">Family to use as the source of the relationship.</param>
		/// <param name="target">Person to use as the target of the relationship.</param>
		public FamilyHasPeople(Family source, Person target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FamilyHasPeople.FamilyDomainRoleId, source), new DslModeling::RoleAssignment(FamilyHasPeople.PeopleDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FamilyHasPeople(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FamilyHasPeople(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FamilyHasPeople(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FamilyHasPeople(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Family domain role code
		
		/// <summary>
		/// Family domain role Id.
		/// </summary>
		public static readonly global::System.Guid FamilyDomainRoleId = new global::System.Guid(0x90931e45, 0x48bb, 0x44bd, 0xaa, 0xd0, 0xbf, 0xe0, 0xa6, 0x8a, 0x66, 0x84);
		
		/// <summary>
		/// DomainRole Family
		/// Description for Fabrikam.DSL.TestValidation.FamilyHasPeople.People
		/// </summary>
		[DslDesign::DisplayNameResource("Fabrikam.Dsl.TestValidation.FamilyHasPeople/Family.DisplayName", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Fabrikam.Dsl.TestValidation.FamilyHasPeople/Family.Description", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "People", PropertyDisplayNameKey="Fabrikam.Dsl.TestValidation.FamilyHasPeople/Family.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("90931e45-48bb-44bd-aad0-bfe0a68a6684")]
		public virtual Family Family
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Family)DslModeling::DomainRoleInfo.GetRolePlayer(this, FamilyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FamilyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Family of a Person
		/// <summary>
		/// Gets Family.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Family GetFamily(Person element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PeopleDomainRoleId) as Family;
		}
		
		/// <summary>
		/// Sets Family.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFamily(Person element, Family newFamily)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PeopleDomainRoleId, newFamily);
		}
		#endregion
		#region People domain role code
		
		/// <summary>
		/// People domain role Id.
		/// </summary>
		public static readonly global::System.Guid PeopleDomainRoleId = new global::System.Guid(0xbdbf3bea, 0xeb88, 0x404e, 0xbb, 0x9d, 0x1b, 0x34, 0x19, 0x31, 0x62, 0x80);
		
		/// <summary>
		/// DomainRole People
		/// Description for Fabrikam.DSL.TestValidation.FamilyHasPeople.Family
		/// </summary>
		[DslDesign::DisplayNameResource("Fabrikam.Dsl.TestValidation.FamilyHasPeople/People.DisplayName", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Fabrikam.Dsl.TestValidation.FamilyHasPeople/People.Description", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Family", PropertyDisplayNameKey="Fabrikam.Dsl.TestValidation.FamilyHasPeople/People.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bdbf3bea-eb88-404e-bb9d-1b3419316280")]
		public virtual Person People
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Person)DslModeling::DomainRoleInfo.GetRolePlayer(this, PeopleDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PeopleDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access People of a Family
		/// <summary>
		/// Gets a list of People.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Person> GetPeople(Family element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(element, FamilyDomainRoleId);
		}
		#endregion
		#region Family link accessor
		/// <summary>
		/// Get the list of FamilyHasPeople links to a Family.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Fabrikam.Dsl.TestValidation.FamilyHasPeople> GetLinksToPeople ( global::Fabrikam.Dsl.TestValidation.Family familyInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Fabrikam.Dsl.TestValidation.FamilyHasPeople>(familyInstance, global::Fabrikam.Dsl.TestValidation.FamilyHasPeople.FamilyDomainRoleId);
		}
		#endregion
		#region People link accessor
		/// <summary>
		/// Get the FamilyHasPeople link to a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Fabrikam.Dsl.TestValidation.FamilyHasPeople GetLinkToFamily (global::Fabrikam.Dsl.TestValidation.Person peopleInstance)
		{
			global::System.Collections.Generic.IList<global::Fabrikam.Dsl.TestValidation.FamilyHasPeople> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Fabrikam.Dsl.TestValidation.FamilyHasPeople>(peopleInstance, global::Fabrikam.Dsl.TestValidation.FamilyHasPeople.PeopleDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of People not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FamilyHasPeople instance accessors
		
		/// <summary>
		/// Get any FamilyHasPeople links between a given Family and a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Fabrikam.Dsl.TestValidation.FamilyHasPeople> GetLinks( global::Fabrikam.Dsl.TestValidation.Family source, global::Fabrikam.Dsl.TestValidation.Person target )
		{
			global::System.Collections.Generic.List<global::Fabrikam.Dsl.TestValidation.FamilyHasPeople> outLinks = new global::System.Collections.Generic.List<global::Fabrikam.Dsl.TestValidation.FamilyHasPeople>();
			global::System.Collections.Generic.IList<global::Fabrikam.Dsl.TestValidation.FamilyHasPeople> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Fabrikam.Dsl.TestValidation.FamilyHasPeople>(source, global::Fabrikam.Dsl.TestValidation.FamilyHasPeople.FamilyDomainRoleId);
			foreach ( global::Fabrikam.Dsl.TestValidation.FamilyHasPeople link in links )
			{
				if ( target.Equals(link.People) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FamilyHasPeople link between a given Familyand a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Fabrikam.Dsl.TestValidation.FamilyHasPeople GetLink( global::Fabrikam.Dsl.TestValidation.Family source, global::Fabrikam.Dsl.TestValidation.Person target )
		{
			global::System.Collections.Generic.IList<global::Fabrikam.Dsl.TestValidation.FamilyHasPeople> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Fabrikam.Dsl.TestValidation.FamilyHasPeople>(source, global::Fabrikam.Dsl.TestValidation.FamilyHasPeople.FamilyDomainRoleId);
			foreach ( global::Fabrikam.Dsl.TestValidation.FamilyHasPeople link in links )
			{
				if ( target.Equals(link.People) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Fabrikam.Dsl.TestValidation
{
	/// <summary>
	/// DomainRelationship ParentRelation
	/// Description for Fabrikam.Dsl.TestValidation.ParentRelation
	/// </summary>
	[DslDesign::DisplayNameResource("Fabrikam.Dsl.TestValidation.ParentRelation.DisplayName", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Fabrikam.Dsl.TestValidation.ParentRelation.Description", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("bb9c7302-c7d5-4dce-96ae-27367306f5fa")]
	public partial class ParentRelation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ParentRelation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbb9c7302, 0xc7d5, 0x4dce, 0x96, 0xae, 0x27, 0x36, 0x73, 0x06, 0xf5, 0xfa);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ParentRelation link in the same Partition as the given Person
		/// </summary>
		/// <param name="source">Person to use as the source of the relationship.</param>
		/// <param name="target">Person to use as the target of the relationship.</param>
		public ParentRelation(Person source, Person target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ParentRelation.ChildDomainRoleId, source), new DslModeling::RoleAssignment(ParentRelation.ParentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ParentRelation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ParentRelation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ParentRelation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ParentRelation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Child domain role code
		
		/// <summary>
		/// Child domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildDomainRoleId = new global::System.Guid(0x1f342b5a, 0x0be5, 0x48c8, 0x84, 0xb0, 0x6b, 0xa0, 0xf3, 0x28, 0x7e, 0xd9);
		
		/// <summary>
		/// DomainRole Child
		/// Description for Fabrikam.DSL.TestValidation.ParentRelation.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("Fabrikam.Dsl.TestValidation.ParentRelation/Child.DisplayName", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Fabrikam.Dsl.TestValidation.ParentRelation/Child.Description", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Parent", PropertyDisplayNameKey="Fabrikam.Dsl.TestValidation.ParentRelation/Child.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1f342b5a-0be5-48c8-84b0-6ba0f3287ed9")]
		public virtual Person Child
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Person)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Child of a Person
		/// <summary>
		/// Gets a list of Child.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Person> GetChild(Person element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(element, ParentDomainRoleId);
		}
		#endregion
		#region Parent domain role code
		
		/// <summary>
		/// Parent domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainRoleId = new global::System.Guid(0xe3aefbf8, 0xc20d, 0x4c0c, 0xaa, 0x09, 0xad, 0x88, 0x90, 0xd9, 0x76, 0xae);
		
		/// <summary>
		/// DomainRole Parent
		/// Description for Fabrikam.DSL.TestValidation.ParentRelation.Child
		/// </summary>
		[DslDesign::DisplayNameResource("Fabrikam.Dsl.TestValidation.ParentRelation/Parent.DisplayName", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Fabrikam.Dsl.TestValidation.ParentRelation/Parent.Description", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Child", PropertyDisplayNameKey="Fabrikam.Dsl.TestValidation.ParentRelation/Parent.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e3aefbf8-c20d-4c0c-aa09-ad8890d976ae")]
		public virtual Person Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Person)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a Person
		/// <summary>
		/// Gets a list of Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Person> GetParent(Person element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(element, ChildDomainRoleId);
		}
		#endregion
		#region ExampleProperty domain property code
		
		/// <summary>
		/// ExampleProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExamplePropertyDomainPropertyId = new global::System.Guid(0xaf942eb2, 0x89b5, 0x4c25, 0xb3, 0x64, 0x4b, 0xfd, 0xda, 0x7f, 0xae, 0xd1);
		
		/// <summary>
		/// Storage for ExampleProperty
		/// </summary>
		private global::System.String examplePropertyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ExampleProperty domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Fabrikam.Dsl.TestValidation.ParentRelation/ExampleProperty.DisplayName", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Fabrikam.Dsl.TestValidation.ParentRelation/ExampleProperty.Description", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("af942eb2-89b5-4c25-b364-4bfdda7faed1")]
		public global::System.String ExampleProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return examplePropertyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ExamplePropertyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ParentRelation.ExampleProperty domain property.
		/// </summary>
		internal sealed partial class ExamplePropertyPropertyHandler : DslModeling::DomainPropertyValueHandler<ParentRelation, global::System.String>
		{
			private ExamplePropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ParentRelation.ExampleProperty domain property value handler.
			/// </summary>
			public static readonly ExamplePropertyPropertyHandler Instance = new ExamplePropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ParentRelation.ExampleProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExamplePropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ParentRelation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.examplePropertyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ParentRelation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.examplePropertyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Child link accessor
		/// <summary>
		/// Get the list of ParentRelation links to a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Fabrikam.Dsl.TestValidation.ParentRelation> GetLinksToParent ( global::Fabrikam.Dsl.TestValidation.Person childInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Fabrikam.Dsl.TestValidation.ParentRelation>(childInstance, global::Fabrikam.Dsl.TestValidation.ParentRelation.ChildDomainRoleId);
		}
		#endregion
		#region Parent link accessor
		/// <summary>
		/// Get the list of ParentRelation links to a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Fabrikam.Dsl.TestValidation.ParentRelation> GetLinksToChild ( global::Fabrikam.Dsl.TestValidation.Person parentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Fabrikam.Dsl.TestValidation.ParentRelation>(parentInstance, global::Fabrikam.Dsl.TestValidation.ParentRelation.ParentDomainRoleId);
		}
		#endregion
		#region ParentRelation instance accessors
		
		/// <summary>
		/// Get any ParentRelation links between a given Person and a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Fabrikam.Dsl.TestValidation.ParentRelation> GetLinks( global::Fabrikam.Dsl.TestValidation.Person source, global::Fabrikam.Dsl.TestValidation.Person target )
		{
			global::System.Collections.Generic.List<global::Fabrikam.Dsl.TestValidation.ParentRelation> outLinks = new global::System.Collections.Generic.List<global::Fabrikam.Dsl.TestValidation.ParentRelation>();
			global::System.Collections.Generic.IList<global::Fabrikam.Dsl.TestValidation.ParentRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Fabrikam.Dsl.TestValidation.ParentRelation>(source, global::Fabrikam.Dsl.TestValidation.ParentRelation.ChildDomainRoleId);
			foreach ( global::Fabrikam.Dsl.TestValidation.ParentRelation link in links )
			{
				if ( target.Equals(link.Parent) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ParentRelation link between a given Personand a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Fabrikam.Dsl.TestValidation.ParentRelation GetLink( global::Fabrikam.Dsl.TestValidation.Person source, global::Fabrikam.Dsl.TestValidation.Person target )
		{
			global::System.Collections.Generic.IList<global::Fabrikam.Dsl.TestValidation.ParentRelation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Fabrikam.Dsl.TestValidation.ParentRelation>(source, global::Fabrikam.Dsl.TestValidation.ParentRelation.ChildDomainRoleId);
			foreach ( global::Fabrikam.Dsl.TestValidation.ParentRelation link in links )
			{
				if ( target.Equals(link.Parent) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
