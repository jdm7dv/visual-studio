//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Fabrikam.Dsl.TestValidation
{
	/// <summary>
	/// DomainClass NamedElement
	/// Description for Fabrikam.Dsl.TestValidation.NamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("Fabrikam.Dsl.TestValidation.NamedElement.DisplayName", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Fabrikam.Dsl.TestValidation.NamedElement.Description", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("9fec4439-064a-47e7-8f2c-de17dab57210")]
	public abstract partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9fec4439, 0x064a, 0x47e7, 0x8f, 0x2c, 0xde, 0x17, 0xda, 0xb5, 0x72, 0x10);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x4a557c1e, 0x0a89, 0x49b7, 0xb4, 0xbd, 0xfa, 0x09, 0x5f, 0x62, 0x67, 0xd7);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Fabrikam.Dsl.TestValidation.NamedElement.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Fabrikam.Dsl.TestValidation.NamedElement/Name.DisplayName", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Fabrikam.Dsl.TestValidation.NamedElement/Name.Description", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("4a557c1e-0a89-49b7-b4bd-fa095f6267d7")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Fabrikam.Dsl.TestValidation
{
	/// <summary>
	/// DomainClass Family
	/// </summary>
	[DslDesign::DisplayNameResource("Fabrikam.Dsl.TestValidation.Family.DisplayName", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Fabrikam.Dsl.TestValidation.Family.Description", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5b4f38c2-1f23-41e8-80ca-6b5650fd255d")]
	public partial class Family : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Family domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5b4f38c2, 0x1f23, 0x41e8, 0x80, 0xca, 0x6b, 0x56, 0x50, 0xfd, 0x25, 0x5d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Family(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Family(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region People opposite domain role accessor
		
		/// <summary>
		/// Gets a list of People.
		/// Description for Fabrikam.DSL.TestValidation.FamilyHasPeople.People
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Person> People
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(global::Fabrikam.Dsl.TestValidation.FamilyHasPeople.FamilyDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Fabrikam.Dsl.TestValidation.Person.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Fabrikam.Dsl.TestValidation.Person sourcePerson1 = sourceElement as global::Fabrikam.Dsl.TestValidation.Person;
			if (sourcePerson1 != null)
			{
				// Create link for path FamilyHasPeople.People
				this.People.Add(sourcePerson1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Fabrikam.Dsl.TestValidation.Person sourcePerson1 = sourceElement as global::Fabrikam.Dsl.TestValidation.Person;
			if (sourcePerson1 != null)
			{
				// Delete link for path FamilyHasPeople.People
				
				foreach (DslModeling::ElementLink link in global::Fabrikam.Dsl.TestValidation.FamilyHasPeople.GetLinks((global::Fabrikam.Dsl.TestValidation.Family)this, sourcePerson1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Fabrikam.Dsl.TestValidation.FamilyHasPeople.FamilyDomainRoleId, global::Fabrikam.Dsl.TestValidation.FamilyHasPeople.PeopleDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Fabrikam.Dsl.TestValidation
{
	/// <summary>
	/// DomainClass Person
	/// </summary>
	[DslDesign::DisplayNameResource("Fabrikam.Dsl.TestValidation.Person.DisplayName", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Fabrikam.Dsl.TestValidation.Person.Description", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1d6398bd-f42c-4582-9b03-d49324df79ae")]
	public partial class Person : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Person domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1d6398bd, 0xf42c, 0x4582, 0x9b, 0x03, 0xd4, 0x93, 0x24, 0xdf, 0x79, 0xae);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Person(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Person(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Birth domain property code
		
		/// <summary>
		/// Birth domain property Id.
		/// </summary>
		public static readonly global::System.Guid BirthDomainPropertyId = new global::System.Guid(0xa188132b, 0x49e4, 0x409e, 0xa4, 0xde, 0x88, 0xa2, 0x40, 0x13, 0x23, 0x57);
		
		/// <summary>
		/// Storage for Birth
		/// </summary>
		private global::System.Int32 birthPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Birth domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Fabrikam.Dsl.TestValidation.Person/Birth.DisplayName", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Fabrikam.Dsl.TestValidation.Person/Birth.Description", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a188132b-49e4-409e-a4de-88a240132357")]
		public global::System.Int32 Birth
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return birthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BirthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Person.Birth domain property.
		/// </summary>
		internal sealed partial class BirthPropertyHandler : DslModeling::DomainPropertyValueHandler<Person, global::System.Int32>
		{
			private BirthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Person.Birth domain property value handler.
			/// </summary>
			public static readonly BirthPropertyHandler Instance = new BirthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Person.Birth domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BirthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(Person element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.birthPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Person element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.birthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Death domain property code
		
		/// <summary>
		/// Death domain property Id.
		/// </summary>
		public static readonly global::System.Guid DeathDomainPropertyId = new global::System.Guid(0x89c0e4f3, 0xf364, 0x4222, 0xac, 0xec, 0x41, 0x41, 0x77, 0x5c, 0x56, 0x57);
		
		/// <summary>
		/// Storage for Death
		/// </summary>
		private global::System.Int32 deathPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Death domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Fabrikam.Dsl.TestValidation.Person/Death.DisplayName", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Fabrikam.Dsl.TestValidation.Person/Death.Description", typeof(global::Fabrikam.Dsl.TestValidation.TestValidationDomainModel), "Company.Language2.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("89c0e4f3-f364-4222-acec-4141775c5657")]
		public global::System.Int32 Death
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return deathPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DeathPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Person.Death domain property.
		/// </summary>
		internal sealed partial class DeathPropertyHandler : DslModeling::DomainPropertyValueHandler<Person, global::System.Int32>
		{
			private DeathPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Person.Death domain property value handler.
			/// </summary>
			public static readonly DeathPropertyHandler Instance = new DeathPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Person.Death domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DeathDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(Person element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.deathPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Person element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.deathPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Family opposite domain role accessor
		/// <summary>
		/// Gets or sets Family.
		/// Description for Fabrikam.DSL.TestValidation.FamilyHasPeople.Family
		/// </summary>
		public virtual Family Family
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Fabrikam.Dsl.TestValidation.FamilyHasPeople.PeopleDomainRoleId) as Family;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Fabrikam.Dsl.TestValidation.FamilyHasPeople.PeopleDomainRoleId, value);
			}
		}
		#endregion
		#region Parent opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Parent.
		/// Description for Fabrikam.DSL.TestValidation.ParentRelation.Parent
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Person> Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(global::Fabrikam.Dsl.TestValidation.ParentRelation.ChildDomainRoleId);
			}
		}
		#endregion
		#region Child opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Child.
		/// Description for Fabrikam.DSL.TestValidation.ParentRelation.Child
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Person> Child
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(global::Fabrikam.Dsl.TestValidation.ParentRelation.ParentDomainRoleId);
			}
		}
		#endregion
	}
}
